SQL - Samples extracted from Premier Press "SQL Tips and Techniques" by Konrad King and Kris Jamsa  
¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯
_________________________________________________________________________________________________________________________________________________________________________
_____________________________________________________________________________________________________________________________________________________________________
        010000BREAKFAST JUICES                F00.000000
        010200TREE TOP APPLE JUICE        120ZF01.100422
        010400WELCHES GRAPE JUICE         12OZF00.850198
        010600MINUTE MAID LEMONADE        12OZF00.850083
        010800MINUTE MAID PINK LEMONADE   12OZF00.890099
        011000MINUTE MAID ORANGE JUICE    12OZF01.260704
        011400MINUTE MAID FRUIT PUNCH     120ZF00.820142
        011600CAMPBELLS CAN TOMATO JUICE  46OZG01.200030
        020000FAMOUS BRAND CEREALS            G01.200000
        020200GENERAL MILLS CHEERIOS      15OZG03.010050

_____________________________________________________________________________________________________________________________________________________________________
 SELECT NAME, PHONE_NUMBER
   FROM STUDENT

_____________________________________________________________________________________________________________________________________________________________________
 CREATE TABLE CALL_HISTORY
   (PHONE_REP_ID CHAR(3) NOT NULL,
    PHONE_NUMBER INTEGER NOT NULL,
    DATE_TO_CALL DATE,
    TIME_TO_CALL INTEGER,
    DATE_CALLED  DATE    NOT NULL,
    TIME_CALLED  INTEGER NOT NULL,
    HANGUP_TIME  INTEGER NOT NULL,
    DISPOSITION  CHAR(4) NOT NULL)

_____________________________________________________________________________________________________________________________________________________________________
 SELECT
   STUDENT_ID, STUDENT_NAME, SUBJECT, TEACHER_NAME
 FROM
   STUDENT, TEACHER
 WHERE
   CLASS1_TEACHER = TEACHER_ID

_____________________________________________________________________________________________________________________________________________________________________
SELECT
  STUDENT_ID, STUDENT_NAME, KONRAD.STUDENT.PHONE_NUMBER,
  SUBJECT, TEACHER_NAME
FROM
  KONRAD.STUDENT, TEACHER
WHERE
  CLASS1_TEACHER = TEACHER_ID

_____________________________________________________________________________________________________________________________________________________________________
SELECT
  STUDENT_ID, STUDENT_NAME, STUDENT.PHONE_NUMBER, SUBJECT,
  TEACHER_NAME
FROM
  STUDENT, TEACHER
WHERE
  CLASS1_TEACHER = TEACHER_ID

_____________________________________________________________________________________________________________________________________________________________________
 SELECT * FROM APPT_SALES_PAY

_____________________________________________________________________________________________________________________________________________________________________
CREATE VIEW APPT_SALES_PAY
  (NAME,APPTS,SALES,SALES_PCT,YTD_SALARY,YTD_COMMISSION) AS
SELECT
  NAME, APPT_COUNT, SALES_COUNT, ((APPT_COUNT / SALES_COUNT)
  * 100), YTD_SALARY, YTD_COMMISSION
FROM
  SALES_REPS, PAYROLL
WHERE
  SALES_REPS.EMP_NUM = PAYROLL.EMP_NUM

_____________________________________________________________________________________________________________________________________________________________________
 CREATE SCHEMA MARKETING AUTHORIZATION KONRAD
   CREATE TABLE CALLS_HISTORY
     (PHONE_REP_ID CHAR (3) NOT NULL,
      PHONE_NUMBER INTEGER, NOT NULL,
      DATE_CALLED  DATE)
   CREATE TABLE  MARKETING REPS
     (REP_ID   CHAR(3),
      REP_NAME CHAR(25))
   CREATE TABLE APPOINTMENTS
     (APPOINTMENT_DATE  DATE,
      APPOINTMENT_TIME INTEGER,
      PHONE_NUMBER      INTEGER)
   CREATE TABLE PROSPECTS
     PHONE_NUMBER INTEGER,
     NAME         CHAR(25),
     ADDRESS      CHAR(35))

_____________________________________________________________________________________________________________________________________________________________________
 CREATE TABLE MARKETING.CONTESTS
   (DESCRIPTION CHAR(25),
    RULES       VARCHAR(100),
    WIN_LEVEL1  MONEY,<a name="91"></a><a name="IDX-34"></a>
    WIN_LEVEL2  MONEY,
    WIN_LEVEL3  MONEY)

_____________________________________________________________________________________________________________________________________________________________________
CREATE TABLE CALL_HISTORY
  (PHONE_REP_ID CHAR(3) NOT NULL,
   PHONE_NUMBER INTEGER NOT NULL,
   DATE_TO_CALL DATE,
   TIME_TO_CALL INTEGER,
   DATE_CALLED  DATE    NOT NULL,
   TIME_CALLED  INTEGER NOT NULL,
   HANGUP_TIME  INTEGER NOT NULL,
   DISPOSITION  CHAR(4) NOT NULL)

_____________________________________________________________________________________________________________________________________________________________________
 CREATE DOMAIN STATE_CODE AS CHAR(2)
   CONSTRAINT VALID_STATE_ABBREVIATION
   CHECK (VALUE IN ('AL', 'AK', 'AZ', 'CO', 'CT', ...  ))

_____________________________________________________________________________________________________________________________________________________________________
 CREATE TABLE CUSTOMER
   (NAME     VARCHAR(25),
    ADDRESS  VARCHAR(35),
    CITY     VARCHAR(20),
    STATE    STATE_CODE,
    ZIP CODE INTEGER)

_____________________________________________________________________________________________________________________________________________________________________
  SELECT
    NAME, ADDRESS, CITY, STATE, ZIP, PHONE_NUMBER,
    BALANCE_DUE
  FROM
    CUSTOMER
  WHERE
    BALANCE_DUE > 1000.00

_____________________________________________________________________________________________________________________________________________________________________
CREATE SCHEMA AUTHORIZATION KONRAD
  CREATE TABLE EMPLOYEES
    (ID           CHAR(3),
     NAME         VARCHAR(35),
     ADDRESS      VARCHAR(45),
     PHONE_NUMBER CHAR(11),
     DEPARTMENT   CHAR(10),
     SALARY       MONEY,
     HOURLY_RATE  MONEY)
  CREATE CUSTOMERS
    (NAME         VARCHAR(35),
     ADDRESS      VARCHAR(45),
     PHONE_NUMBER CHAR(11),<a name="107"></a><a name="IDX-43"></a>
     FOOD_PLAN    CHAR(2))
  CREATE TABLE        APPT_SCHEDULE
    (APPT_DATE        DATE,
     APPT_TIME        INTEGER,
     APPT_DISPOSITION CHAR(4),
     APPT_SALESMAN_ID CHAR(3))
GRANT SELECT, UPDATE
  ON EMPLOYEES
  TO HR_DEPARTMENT
GRANT ALL PRIVILEGES
  ON CUSTOMERS
  TO MARKETING_REPS,  OFFICE_CLERKS
GRANT SELECT
  ON APPT SCHEDULE
  TO PUBLIC
GRANT SELECT, INSERT
  ON APPT SCHEDULE
  TO MARKETING REPS
CREATE SCHEMA AUTHORIZATION KAREN
  CREATE TABLE EMPLOYEES
    (ID            CHARM,
     NAME          VARCHAR(35),
     ADDRESS       VARCHAR(45),
     PHONE_NUMBER  CHAR(11),
     EMPLOYEE_TYPE CHAR (2),
     SALARY        MONEY,
     HOURLY_RATE,  MONEY)
  GRANT SELECT, UPDATE
    ON EMPLOYEES
    TO HR DEPARTMENT
  CREATE PATIENTS
    (ID            INTEGER
     SPONSOR_SSAN  CHAR(11),
     NAME          VARCHAR(35),
     ADDRESS       VARCHAR(45),
     PHONE_NUMBER  CHAR(11),
     AILMENT_CODES VARCHAR(120))
  GRANT SELECT, UPDATE
    ON PATIENTS
    TO DOCTORS, NURSES, CLERKS
  CREATE TABLE APPT_SCHEDULE
    (APPT_DATE          DATE,
     APPT_TIME          INTEGER,
     REASON_CODES       VARCHAR(120),
     DOCTOR_ID          CHAR(3),
     NURSE_ID           CHAR(3),
     REFERRAL_DOCTOR_ID CHAR(15))
  GRANT SELECT, UPDATE
    ON APPT_SCHEDULE
    TO PUBLIC<a name="108"></a><a name="IDX-44"></a>

_____________________________________________________________________________________________________________________________________________________________________
CREATE TABLE  integer_table
  (integer_max   INT,
   smallint_max  SMALLINT,
   tinyint_max     TINYINT)

_____________________________________________________________________________________________________________________________________________________________________
INSERT INTO INTEGER_TABLE
  VALUES (1,2,256)

_____________________________________________________________________________________________________________________________________________________________________
Server: Msg 220, Level 16, State 2, Line 1
Arithmetic overflow error for type tinyint, value = 256.
The statement has been terminated.

_____________________________________________________________________________________________________________________________________________________________________
 CREATE TABLE numeric_table
   (numeric_column NUMERIC(8,4))

_____________________________________________________________________________________________________________________________________________________________________
CREATE TABLE float_table
  (float_column FLOAT (15))

_____________________________________________________________________________________________________________________________________________________________________
CREATE TABLE decimal_table
  (decimal_column DECIMAL (6,2))

_____________________________________________________________________________________________________________________________________________________________________
CREATE TABLE numeric_table
  (numeric_column NUMERIC)

_____________________________________________________________________________________________________________________________________________________________________
 INSERT IN character_table
   VALUES ("Konrad", 9, 5+4,  '5+4')

_____________________________________________________________________________________________________________________________________________________________________
CREATE TABLE character_table
  (char_column          CHAR(10),
   char_column2         CHAR(100),
   varchar_column       VARCHAR(100),
   nchar_column         NCHAR(20)
   nchar_varying_column NCHAR VARYING (200))

_____________________________________________________________________________________________________________________________________________________________________
 CREATE TABLE order_table
   (customer_number      INTEGER,
    delivery_date        DATE,
    item_number          SMALLINT,
    quantity             SMALLINT,
    special_instructions CHAR(1000))

_____________________________________________________________________________________________________________________________________________________________________
CREATE TABLE order_table
  (customer_number      INTEGER,
   delivery_date        DATE,
   item_number          SMALLINT,
   quantity             SMALLINT,
   special_instructions VARCHAR(1000))

_____________________________________________________________________________________________________________________________________________________________________
 CREATE TABLE human_resources
   (id              INTEGER,
    name            VARCHAR(25),
    department_code TINYINT,
    data_of_hire    DATE,
    resume          TEXT)

_____________________________________________________________________________________________________________________________________________________________________
 SELECT resume FROM human_resources<a name="141"></a><a name="IDX-60"></a>

_____________________________________________________________________________________________________________________________________________________________________
 SELECT * FROM graphic_images

_____________________________________________________________________________________________________________________________________________________________________
 INSERT INTO graphic_images
   VALUES (123,'Picture 123','Picture'123')

_____________________________________________________________________________________________________________________________________________________________________
CREATE TABLE graphic_images
  (id          INTEGER,
   description VARCHAR(250),
   picture     IMAGE)

_____________________________________________________________________________________________________________________________________________________________________
 INSERT INTO date_table VALUES ("2000 Apr 25")

_____________________________________________________________________________________________________________________________________________________________________
CREATE TABLE time_table
(time_with_seconds TIME(3))

_____________________________________________________________________________________________________________________________________________________________________
CREATE TABLE date_table
  (date_time DATETIME)

_____________________________________________________________________________________________________________________________________________________________________
CREATE TABLE time_table
    (time_with_gmt         TIME WITH TIME ZONE,
     time_with_seconds_gmt TIME (4) WITH TIME ZONE)

_____________________________________________________________________________________________________________________________________________________________________
CREATE TABLE time_table
    (timestamp_column            TIMESTAMP,
     timestamp_column_no_decimal TIMESTAMP (0))

_____________________________________________________________________________________________________________________________________________________________________
CREATE TABLE time_table
    (timestamp_column TIMESTAMP WITH TIME ZONE,
     timestamp_no_dec TIMESTAMP(0)WITH TIME ZONE)

_____________________________________________________________________________________________________________________________________________________________________
INSERT INTO date_table
  VALUES ('04/25/2000 21:05:06:123')

_____________________________________________________________________________________________________________________________________________________________________
SELECT * FROM date_table

_____________________________________________________________________________________________________________________________________________________________________
 CREATE TABLE customer
   (id                   INTEGER,
    name                 VARCHAR(25),
    high_school_graduate BIT,
    some_college         BIT,
    graduate_school      BIT,
    post_graduate_work   BIT,
    male                 BIT,
    married              BIT,
    homeowner            BIT,
    US_citizen           BIT)

_____________________________________________________________________________________________________________________________________________________________________
 SELECT id, name
 FROM   customer
 WHERE  high_school_graduate = 1

_____________________________________________________________________________________________________________________________________________________________________
 SELECT id, name
 FROM   customer
 WHERE  married = 1 OR homeowner = 1

_____________________________________________________________________________________________________________________________________________________________________
 SELECT customer_name, balance_due, date_due
 FROM   customer_ar
 WHERE  date_due < CURRENT_DATE

_____________________________________________________________________________________________________________________________________________________________________
SELECT customer_name, balance_due, date_due
FROM   customer_ar
WHERE  date_due < GETDATE()

_____________________________________________________________________________________________________________________________________________________________________
 SELECT * FROM customer WHERE education = NULL

_____________________________________________________________________________________________________________________________________________________________________
 id  name            date_hired         quota
 -----------------------------------------------
 1   Sally Smith     04/27/00 00:00:00  NULL
 2   Wally Wells     04/13/99 00:00:00  5
 3   Greg Jones      05/12/97 00:00:00  7
 4   Bruce Williams  04/15/00 00:00:00  NULL
 5   Paul Harvey     06/05/99 00:00:00  9

_____________________________________________________________________________________________________________________________________________________________________
 id  name            date_hired         quota
------------------------------------------------
 1   Sally Smith     04/27/00 00:00:00  In Training
 2   Wally Wells     04/13/99 00:00:00  5
 3   Greg Jones      05/12/97 00:00:00  7
 4   Bruce Williams  04/15/00 00:00:00  In Training
 5   Paul Harvey     06/05/99 00:00:00  9<a name="162"></a><a name="IDX-70"></a>

_____________________________________________________________________________________________________________________________________________________________________
 SELECT id, name, date_hired, ISNULL(quota,'In Training')
 FROM   employee
 WHERE  ISNULL(quota,-999) = -999

_____________________________________________________________________________________________________________________________________________________________________
 SELECT id, name, date_hired, quota FROM employee

_____________________________________________________________________________________________________________________________________________________________________
ISNULL(expression,value)

_____________________________________________________________________________________________________________________________________________________________________
SELECT id, name, date_hired, quota
FROM   employee
WHERE  ISNULL(quota,-999) <> -999

_____________________________________________________________________________________________________________________________________________________________________
SELECT
  id, name, date_hired, 'quota'=ISNULL(quota,'In Training')
FROM
  employee

_____________________________________________________________________________________________________________________________________________________________________
 CREATE TABLE employee
   (id    INTEGER IDENTITY(10,10),
    name  VARCHAR(35),
    quota SMALLINT)

_____________________________________________________________________________________________________________________________________________________________________
 IDENTITY (initial_value, increment)

_____________________________________________________________________________________________________________________________________________________________________
id  name            quota
----------------------------
10  Sally Smith     (null)
20  Wally Wells     5
30  Greg Jones      7
20  Bruce Williams  (null)
40  Paul Harvey     9

_____________________________________________________________________________________________________________________________________________________________________
id  name            quota
----------------------------
10  Sally Smith     NULL
20  Wally Wells     5
30  Greg Jones      7

_____________________________________________________________________________________________________________________________________________________________________
INSERT INTO employee (name, quota)
  VALUES ('Sally Smith', NULL)
INSERT INTO employee (name, quota)
  VALUES ('Wally Wells', 5)
INSERT INTO employee (name, quota)
  VALUES ('Greg Jones', 7)
SELECT * FROM employee

_____________________________________________________________________________________________________________________________________________________________________
SET IDENTITY_INSERT employee ON
INSERT INTO employee (id, name, quota)
  VALUES(20, 'Bruce Williams', NULL)
SET IDENTITY_INSERT employee OFF
INSERT INTO employee (name, quota)
  VALUES('Paul Harvey', 9)
SELECT * FROM employee

_____________________________________________________________________________________________________________________________________________________________________
CREATE ASSERTION <assertion name> <check condition>

_____________________________________________________________________________________________________________________________________________________________________
CREATE ASSERTION maximum_withdrawal
  CHECK (investor.withdrawal_limit>
         SELECT SUM(withdrawals.amount)
         FROM   withdrawals
         WHERE  withdrawals.investor_id = investor.ID)

_____________________________________________________________________________________________________________________________________________________________________
SELECT * FROM authors
SELECT * FROM authors WHERE au_lname = 'Green'

_____________________________________________________________________________________________________________________________________________________________________
 au_ID        au_lname      zip
 -----------  ------------  ----
 427-17-2319  Dull          94301
 846-92-7186  Hunter        94301

_____________________________________________________________________________________________________________________________________________________________________
 ISQL -SNVBizNet2 -Usa -P -iInFile39.sql -n -oOutFle39

_____________________________________________________________________________________________________________________________________________________________________
ISQL -S<server name> -U<username> -P<password>

_____________________________________________________________________________________________________________________________________________________________________
ISQL -SNVBizNet2 -Usa -P -dpubs -iInFile39.sql -n

_____________________________________________________________________________________________________________________________________________________________________
ISQL -SNVBizNet2 -Usa -P -dpubs

_____________________________________________________________________________________________________________________________________________________________________
ISQL -SNVBizNet2 -Usa -P

_____________________________________________________________________________________________________________________________________________________________________
USE pubs
SELECT au_ID, au_lname, zip FROM authors WHERE zip = 94301
GO

_____________________________________________________________________________________________________________________________________________________________________
 1> USE pubs
 2> SELECT * FROM authors
 3>

_____________________________________________________________________________________________________________________________________________________________________
 Msg 208, Level 16, State 1, Server NVBIZNET2, Line 1
 Invalid object name 'authors'.

_____________________________________________________________________________________________________________________________________________________________________
 USE pubs
 SELECT *  FROM authors

_____________________________________________________________________________________________________________________________________________________________________
ISQL -S<server name> -U<username> -P<password>

_____________________________________________________________________________________________________________________________________________________________________
ISQL -SNVBizNet2 -Usa -P
1> SELECT * FROM authors
2>

_____________________________________________________________________________________________________________________________________________________________________
SELECT * FROM authors

_____________________________________________________________________________________________________________________________________________________________________
 CREATE DATABASE <database name>
 [ON {[PRIMARY] <filespec>} [,...<last filespec>]]
 [LOG ON { <filespec>} [,...<last filespec>]]
 [FOR RESTORE]
 <filespec> is defined as:
    (NAME = <logical file name>,
     FILENAME = '<physical  file name>'
     [, SIZE = <initial  file size>]
     [, MAXSIZE = {<maximum file size> | UNLIMITED}]
     [, FILEGROWTH = <file extension inc>])

_____________________________________________________________________________________________________________________________________________________________________
 The CREATE DATABASE process is allocating 10.00 MB on disk   'SQLTips_data'.
 The CREATE DATABASE process  is allocating 3.00 MB on disk  "SQLTips_log'.

_____________________________________________________________________________________________________________________________________________________________________
CREATE DATABASE SQLTips
ON     (NAME       = SQLTips_data,
        FILENAME   = 'c:\mssql7\data\SQLTips_data.mdf',
        SIZE       = 10,
        FILEGROWTH = 1MB)
LOG ON (NAME = 'SQLTips_log',
        FILENAME = 'c:\mssql7\data\SQLTips_log.ldf',
        SIZE = 3,
        FILEGROWTH = 1MB)

_____________________________________________________________________________________________________________________________________________________________________
 Deleting database file 'C:\MSSQL7\data\MARKETING_Data.MDF'.
 Deleting database file 'C:\MSSQL7\data\MARKETING_Log.LDF'.

_____________________________________________________________________________________________________________________________________________________________________
DROP DATABASE <database name>
              [,<database name>,  <last database name>]

_____________________________________________________________________________________________________________________________________________________________________
DROP DATABASE marketing.

_____________________________________________________________________________________________________________________________________________________________________
CREATE DATABASE SQLTips
ON     (NAME       = SQLTips_data,
        FILENAME   = 'c:\mssql7\data\SQLTips_data.mdf',
        SIZE       = 10,
        FILEGROWTH = 1MB)
LOG ON (NAME = 'SQLTips_log',
        FILENAME = 'c:\mssql7\data\SQLTips_log.ldf',
        SIZE = 3,
        FILEGROWTH = 1MB)

_____________________________________________________________________________________________________________________________________________________________________
 CREATE TABLE <table name>
  (<column definition> [,...<last column definition]
    [<primary key definition>]
    [<foreign key definition>])
 <column definition> is defined as:
    <column name> <data-type> [DEFAULT <value>]
    [NOT NULL] [UNIQUE] [<check constraint definition>]
 <check constraint definition> is defined as:
    CHECK (<search condition>)
 <primary key definition> is defined as:
    PRIMARY KEY (<column name> [, <column name>])
 <foreign key definition> is defined as:
    FOREIGN KEY (<column name>) REFERENCES <table name>

_____________________________________________________________________________________________________________________________________________________________________
 CREATE TABLE item_master
   (item_number INTEGER,
    description VARCHAR(35) NOT NULL
    PRIMARY KEY (item_number))
 CREATE TABLE orders
   (order_number    INTEGER UNIQUE NOT NULL,
    item_number     INTEGER NOT NULL,
    quantity        SMALLINT DEFAULT 1,
    item_cost       DECIMAL (5, 2),
    customer_number INTEGER
    PRIMARY KEY (order_number, item_number)
    FOREIGN KEY (item_number) REFERENCES item_master)

_____________________________________________________________________________________________________________________________________________________________________
 CREATE TABLE ##customer_orders
   (customer_number INTEGER,
    customer_name   VARCHAR (35),
    order_date      DATE_TIME,
    amount          MONEY)

_____________________________________________________________________________________________________________________________________________________________________
CREATE TABLE #customer_orders
  (customer_number INTEGER,
   customer_name   VARCHAR (35),
   order_date      DATETIME,
   amount          MONEY)

_____________________________________________________________________________________________________________________________________________________________________
 CREATE DEFAULT [<owner name>.]<name of default>
 AS <constant expression>

_____________________________________________________________________________________________________________________________________________________________________
 CREATE DEFAULT ud_value_unknown AS "Unknown"
 CREATE DEFAULT ud_applied_for AS "Applied for"

_____________________________________________________________________________________________________________________________________________________________________
 CREATE TABLE employee
   (employee_ID            INTEGER,
    first_name             VARCHAR (20),
    last_name              VARCHAR(30),
    social_security_number CHAR(11),
    street_address         VARCHAR(35),
    health_card_number     CHAR(15),
    sheriff_card_number    CHAR(15)
    PRIMARY KEY (employee_ID))

_____________________________________________________________________________________________________________________________________________________________________
 CREATE DEFAULT ud_value_unknown AS "Unknown"
 CREATE DEFAULT ud_applied_for AS "Applied for"

_____________________________________________________________________________________________________________________________________________________________________
 EXEC sp_bindefault
   @DEFNAME=<name of defaults>,
   @OBJNAME=<table name>.<column name>

_____________________________________________________________________________________________________________________________________________________________________
 EXEC sp_bindefault
   @defname=ud_applied_for,
   @objname='employee.[health_card_number]'<a name="240"></a><a name="IDX-112"></a>

_____________________________________________________________________________________________________________________________________________________________________
 EXEC sp_bindefault
   @defname=ud_applied_for,
   @objname='employee.[sheriff_card_number]'

_____________________________________________________________________________________________________________________________________________________________________
 EXEC sp_bindefault
   @defname=ud_value_unknown,
   @objname='employee.[social_security_number]'

_____________________________________________________________________________________________________________________________________________________________________
 INSERT INTO employee (employee_ID, first_name, last_name)
   VALUES (1, 'Konrad', 'King')

_____________________________________________________________________________________________________________________________________________________________________
   CREATE TABLE employee
   (employee_ID             INTEGER,
    first_name              VARCHAR(20)  NOT NULL,
    last_name               VARCHAR(30)  NOT NULL,
    social_security_number  CHAR(11)     DEFAULT 'Unknown',
    street_address          VARCHAR(35)  DEFAULT 'Unknown',
    health_card_number      CHAR(15)     DEFAULT 'Applied For',
    sheriff_card_number     CHAR(15)     DEFAULT 'Applied For',
    hourly_rate             NUMERIC(5,2) DEFAULT 10.00,
    bonus_level             INTEGER      DEFAULT 1,<a name="242"></a><a name="IDX-113"></a>
    job_rating_90days       SMALLINT,
    job_rating_180days      SMALLINT,
    job_rating_1year        SMALLINT
    PRIMARY KEY (employee_ID))

_____________________________________________________________________________________________________________________________________________________________________
 INSERT INTO employee
   (employee_ID, first_name, last_name,
    social_security_number, street_address)
 VALUES (1, 'Konrad', 'King', NULL, '77 Sunset Strip')

_____________________________________________________________________________________________________________________________________________________________________
 CREATE TABLE employee
   (id               INTEGER,
    name             VARCHAR(35),
    regular_pay_rate hourly_pay_rate)

_____________________________________________________________________________________________________________________________________________________________________
 CREATE DEFAULT ud_value_unknown AS "Unknown"
 CREATE DEFAULT ud_applied_for AS "Applied for"

_____________________________________________________________________________________________________________________________________________________________________
 DROP DEFAULT ud_applied_for

_____________________________________________________________________________________________________________________________________________________________________
 DROP DEFAULT ud_value_unknown, ud_applied_for

_____________________________________________________________________________________________________________________________________________________________________
 The default 'ud_applied_for' cannot be dropped because it
 is bound to one or more column.

_____________________________________________________________________________________________________________________________________________________________________
DROP DEFAULT <default name>
  {, <default name>, ... ,<last default name>]

_____________________________________________________________________________________________________________________________________________________________________
 ALTER COLUMN <column name> <new data type>
   [(precision,scale)][NULL | NOT NULL]

_____________________________________________________________________________________________________________________________________________________________________
 ALTER TABLE <table name> ADD <column definition>

_____________________________________________________________________________________________________________________________________________________________________
 ALTER TABLE <table name>
   {ADD <column definition>}
   {[WITH CHECK | WITH NO CHECK] ADD <table constraint>}
   {ALTER COLUMN <column name> <new data type>
      [(precision,scale)][NULL | NOT NULL]}
   {DROP COLUMN <column name>
      [,<column name>...,<last column name]}
   {DROP [CONSTRAINT] <constraint name>}
   {CHECK | NO CHECK CONSTRAINT [ALL |
      <constraint name>
      [,<constraint name>...,<last constraint name>]}<a name="266"></a><a name="IDX-126"></a>
   {ENABLE | DISABLE TRIGGER [ALL |
      <trigger name>
      [,<trigger name>...,<last trigger name>]}

 <column definition> is defined as:
    <column name> <data type>
    [IDENTITY [(seed,increment)]|[NOT NULL]
    [DEFAULT <value>]][UNIQUE]
    [<check constraint definition>]

 <check constraint definition> is defined as:
    CHECK (<search condition>)

 <table constraint> is defined as:
    [CONSTRAINT <constraint name>]
         <primary key definition>
       | <foreign key definition>
       | DEFAULT <constant expression>
           FOR <column name>
       | CHECK (<search condition>)

 <primary key definition> is defined as:
    PRIMARY KEY (<column name> [, <column name>])

 <foreign key definition> is defined as:
    FOREIGN KEY (<column name>) REFERENCES <table name>

_____________________________________________________________________________________________________________________________________________________________________
 ALTER TABLE <table name>
   ADD <column name> <data type> [DEFAULT <value>]
    [NOT NULL] [IDENTITY][UNIQUE][CHECK (<search condition>)]

_____________________________________________________________________________________________________________________________________________________________________
 ALTER TABLE employee ADD badge_number INTEGER IDENTITY

_____________________________________________________________________________________________________________________________________________________________________
 CREATE TABLE employee
   (employee_id            INTEGER,
    first_name             VARCHAR(20),
    last_name              VARCHAR(30),
    social_security_number CHAR(11),
    street_address         VARCHAR(35)
    PRIMARY KEY (employee_id))

_____________________________________________________________________________________________________________________________________________________________________
 ALTER TABLE <table name> DROP CONSTRAINT <constraint name>

_____________________________________________________________________________________________________________________________________________________________________
 ALTER TABLE employee
   DROP COLUMN health_card<u class="underline">_</u>number, sheriff_card_number

_____________________________________________________________________________________________________________________________________________________________________
 Server: Msg 4922, Level 16, State 3, Line 1
 ALTER TABLE DROP COLUMN employee_id failed because PRIMARY
   KEY CONSTRAINT PK__employee__6E01572D access this column.

_____________________________________________________________________________________________________________________________________________________________________
ALTER TABLE <table name>
  DROP COLUMN <column name>
  [,<column name>...,<last column name]

_____________________________________________________________________________________________________________________________________________________________________
CREATE TABLE employee
  (employee_id INTEGER,
   first_name             VARCHAR(20),
   last_name              VARCHAR(30),
   social_security_number CHAR(11),
   street_address         VARCHAR(35),
   health_card_number     CHAR(15),
   sheriff_card_number    CHAR(15),<a name="271"></a><a name="IDX-129"></a>
   badge_number           IDENTITY(100,100)
   PRIMARY KEY (employee_id))

_____________________________________________________________________________________________________________________________________________________________________
 ALTER TABLE <table name>
   ALTER COLUMN <column name> <new data type>

_____________________________________________________________________________________________________________________________________________________________________
 ALTER TABLE employee
   ALTER COLUMN health_card_number INTEGER

_____________________________________________________________________________________________________________________________________________________________________
 ALTER TABLE employee
   ALTER COLUMN street_address CHAR(35)

_____________________________________________________________________________________________________________________________________________________________________
 CREATE TABLE employee
   (employee_id            INTEGER,
    first_name             VARCHAR(20),
    last_name              VARCHAR(30),
    social_security_number CHAR(11),
    street_address         CHAR(30),
    health_card_number     CHAR(15),
    sheriff_card_number    CHAR(15),
    PRIMARY KEY (employee_id))<a name="274"></a><a name="IDX-131"></a>

_____________________________________________________________________________________________________________________________________________________________________
 ALTER TABLE <table name>
   [WITH NOCHECK]
   ADD [CONSTRAINT <constraint name] FOREIGN KEY
     (<column name>[,<column name>...,<last column name>]
   REFERENCES <foreign table name>
     (<foreign column name>
     [,<foreign column name>...,<last foreign column name>])

_____________________________________________________________________________________________________________________________________________________________________
 ALTER TABLE employee
   ADD CONSTRAINT pk_employee PRIMARY KEY (employee_id)

_____________________________________________________________________________________________________________________________________________________________________
 ALTER TABLE employee
   ADD CONSTRAINT pk_employee
   PRIMARY KEY (employee_id,badge_number)

_____________________________________________________________________________________________________________________________________________________________________
 ALTER TABLE order ADD
   CONSTRAINT fk_order_column
   FOREIGN KEY (placed_by_customer_num)
   REFERENCES customer (customer_number)

_____________________________________________________________________________________________________________________________________________________________________
 CREATE TABLE customer
   (customer_number INTEGER PRIMARY KEY,
    first_name      VARCHAR(20),
    last_name       VARCHAR(30),
    address         VARCHAR(35))

_____________________________________________________________________________________________________________________________________________________________________
 CREATE TABLE order
   (placed_by_customer_num INTEGER,
    order_date             DATETIME,
    item_number            INTEGER,
    quantity               SMALLINT)

_____________________________________________________________________________________________________________________________________________________________________
ALTER TABLE <table name> ADD CONSTRAINT
  <constraint name> PRIMARY KEY (<column name>
  [,<column name>...,<last column name>])

_____________________________________________________________________________________________________________________________________________________________________
ALTER TABLE <table name> DROP CONSTRAINT <constraint name>

_____________________________________________________________________________________________________________________________________________________________________
CREATE TABLE employee
  (employee_id  INTEGER NOT NULL,
   badge_number SMALLINT NOT NULL,
   first_name   VARCHAR(20),
   last_name    VARCHAR(30))

_____________________________________________________________________________________________________________________________________________________________________
 [CONSTRAINT <constraint name>] PRIMARY KEY

_____________________________________________________________________________________________________________________________________________________________________
 CONSTRAINT <constraint name>
   PRIMARY KEY (<column name>
     [,<column_name...[,<last column name>]])

_____________________________________________________________________________________________________________________________________________________________________
 CREATE TABLE employee
   (employee_id INTEGER PRIMARY KEY,<a name="280"></a><a name="IDX-135"></a>
    first_name  VARCHAR(20),
    last_name   VARCHAR(30))

_____________________________________________________________________________________________________________________________________________________________________
 CREATE TABLE employee
   (employee_id INTEGER,
      CONSTRAINT pk_employee_table PRIMARY KEY,
    first<u class="underline">_</u>name  VARCHAR(20),
    last_name   VARCHAR(30))

_____________________________________________________________________________________________________________________________________________________________________
 CREATE TABLE employee
   (employee_id INTEGER,
    division    SMALLINT,
    first_name  VARCHAR(20),
    last_name   VARCHAR(30)

    CONSTRAINT pk_employee_table
      PRIMARY KEY (employee_id, division))

_____________________________________________________________________________________________________________________________________________________________________
CREATE TABLE employee
  (employee_id            INTEGER
   CONSTRAINT pk_employee_table
     PRIMARY KEY (employee_id, division),
   division               SMALLINT,
   first_name             VARCHAR(20),
   last_name              VARCHAR(30))

_____________________________________________________________________________________________________________________________________________________________________
EXEC sp_help <table name>

_____________________________________________________________________________________________________________________________________________________________________
 [CONSTRAINT <constraint name>]
    FOREIGN KEY (<column name>
      [,<column name>...[,<last column name>]])
    REFERENCES <foreign table name>
      (<foreign table column name>
          [,<foreign table column name>...
          [,<last foreign table column name>]]}

_____________________________________________________________________________________________________________________________________________________________________
 CREATE TABLE customer
   (customer_number        INTEGER,
    first<u class="underline">_</u>name             VARCHAR(20),
    last_name              VARCHAR(30),
    address                VARCHAR(35),
    CONSTRAINT pk_customer_table
      PRIMARY KEY (customer_number))

 CREATE TABLE order
   (placed_by_customer_num INTEGER
      FOREIGN KEY (placed_by_customer_num) REFERENCES
        customer(customer_number),
    order_date             DATETIME,
    item_number            INTEGER,
    quantity               SMALLINT,

    CONSTRAINT pk_order_table
      PRIMARY KEY
      (placed_by_customer_num, order_date, item_number))

_____________________________________________________________________________________________________________________________________________________________________
 CREATE TABLE item_master
   (item_number      INTEGER,
    vendor_id        INTEGER,
    quantity_on_hand SMALLINT

    CONSTRAINT pk_item_master_table
      PRIMARY KEY (item_number, vendor_id))

_____________________________________________________________________________________________________________________________________________________________________
 CREATE TABLE order
   (placed_by_customer_num INTEGER
      CONSTRAINT fk_customer_table FOREIGN KEY
        (placed_by_customer_num) REFERENCES
         customer(customer_number),
    order_date             DATETIME,
    item_number            INTEGER,
    quantity               SMALLINT,
    CONSTRAINT pk_order_table
      PRIMARY KEY
      (placed_by_customer_num, order_date, item_number))

_____________________________________________________________________________________________________________________________________________________________________
 CREATE TABLE order
   (placed_by_customer_num INTEGER
    order_date             DATETIME,<a name="285"></a><a name="IDX-139"></a>
    item_number            INTEGER,
    vendor_id_number       INTEGER,
    quantity               SMALLINT,

    CONSTRAINT fk_item_master_table FOREIGN KEY
      (item_number, vendor_id_number) REFERENCES
       item_master (item_number, vendor_id),

    CONSTRAINT fk_customer_table FOREIGN KEY
      (placed_by_customer_num) REFERENCES
       customer (customer_number),

    CONSTRAINT pk_order_table
      PRIMARY KEY
      (placed_by_customer_num, order_date, item_number))

_____________________________________________________________________________________________________________________________________________________________________
EXEC sp_help <table name>

_____________________________________________________________________________________________________________________________________________________________________
 ALTER TABLE order DROP CONSTRAINT fk_customer_table

_____________________________________________________________________________________________________________________________________________________________________
 Server: Msg 3726, Level 16, State 1, Line1
 Could not drop object 'customer' because it is referenced
 by a FOREIGN KEY constraint

_____________________________________________________________________________________________________________________________________________________________________
DROP TABLE customer<a name="287"></a><a name="IDX-140"></a>

_____________________________________________________________________________________________________________________________________________________________________
DROP TABLE
  [[<schema name>.]<table owner name>.]]<table name>

_____________________________________________________________________________________________________________________________________________________________________
 DROP VIEW <view name> [,<view name>...[,<last view name>]]

_____________________________________________________________________________________________________________________________________________________________________
 DROP VIEW vw_sales_production

_____________________________________________________________________________________________________________________________________________________________________
 DROP VIEW
   vw_sales_production_east, vw_sales_production_west

_____________________________________________________________________________________________________________________________________________________________________
 Server: Msg 208, Level 16, State 1, Procedure
   <name of referencing view>, Line 2
 Invalid object name '<name of dropped view>'.

 Server: Msg 4413, Level 16, State 1, Line 1
 Could not use view '<name of referencing view>' because of
   previous binding errors.

_____________________________________________________________________________________________________________________________________________________________________
 rep_id      calls  sales  deliveries
 ----------- ------ ------ ----------
 3           750    6      5
 4           400    9      7
 5           625    8      6
 6           384    6      4
 (4 row(s) affected)

_____________________________________________________________________________________________________________________________________________________________________
 SELECT * FROM vw_sales_production

_____________________________________________________________________________________________________________________________________________________________________
 CREATE VIEW vw_delivered_sales_commissions
   (rep_id, deliveries, commission) AS
 SELECT rep_id, deliveries, deliveries * 150.00
 FROM vw_sales_production

_____________________________________________________________________________________________________________________________________________________________________
 CREATE VIEW vw_sales_production AS
  SELECT rep_id, calls, sales, deliveries FROM production

_____________________________________________________________________________________________________________________________________________________________________
 DROP VIEW vw_sales_production

_____________________________________________________________________________________________________________________________________________________________________
 SELECT * FROM vw_delivered_sales_commissions

_____________________________________________________________________________________________________________________________________________________________________
 Server: Msg 208, Level 16, State 1,
   Procedure vw_delivered_sales_commissions, Line 1
 Invalid object name 'vw_sales_production'.

 Server: Msg 4413, Level 16, State 1, Line 1
 Could not use view ' vw_delivered_sales_commissions'
   previous binding errors.

_____________________________________________________________________________________________________________________________________________________________________
DROP VIEW vw_sales_production CASCADE

_____________________________________________________________________________________________________________________________________________________________________
DROP VIEW vw_sales_production RESTRICT<a name="301"></a><a name="IDX-147"></a>

_____________________________________________________________________________________________________________________________________________________________________
 INSERT INTO <table name>
   [(<column name>...[,<last column name>])]
  VALUES (<column value>...[,<last column value>])

_____________________________________________________________________________________________________________________________________________________________________
 INSERT INTO orders
   (customer_number, order_number, order_date, item_number,
    quantity, special_instructions)
  VALUES (10, 1, '05/18/00', 1001, 5, 'keep frozen')

_____________________________________________________________________________________________________________________________________________________________________
CREATE orders
  (order_number         INTEGER NOT NULL,
   customer_number      INTEGER NOT NULL,
   item_number          INTEGER NOT NULL,
   quantity             SMALLINT DEFAULT 1,<a name="304"></a><a name="IDX-148"></a>
   order_date           DATETIME,
   special_instructions VARCHAR(30))

_____________________________________________________________________________________________________________________________________________________________________
INSERT INTO orders
  (order_number, customer_number, item_number, quantity,
   order_date, special_instructions)
 VALUES (1, 10, 1001, 5, '05/18/00', 'keep frozen')

_____________________________________________________________________________________________________________________________________________________________________
INSERT INTO orders
  (order_number, customer_number, item_number, quantity,
   order_date, special_instructions)
 VALUES (1, 10, 1001, 5, '05/18/00', 'keep frozen')<a name="305"></a><a name="IDX-149"></a>

_____________________________________________________________________________________________________________________________________________________________________
INSERT INTO orders
VALUES (1, 10, 1001, 5, '05/18/00', 'keep frozen')

_____________________________________________________________________________________________________________________________________________________________________
SELECT * <table name> WHERE NULL = NULL

_____________________________________________________________________________________________________________________________________________________________________
  SELECT * FROM orders

_____________________________________________________________________________________________________________________________________________________________________
 CREATE orders
   (order_id   INTEGER IDENTITY,
    cust_id    INTEGER NOT NULL,
    item       INTEGER NOT NULL,
    qty        SMALLINT DEFAULT 1,
    order_date CHAR(10),
    ship_date  CHAR(10),
    handling   VARCHAR(30) DEFAULT 'none')

_____________________________________________________________________________________________________________________________________________________________________
 CREATE VIEW vw_shipped_orders AS
   SELECT order_id, cust_id, item, qty, order_date,
          ship_date
 FROM orders
 WHERE ship_date IS NOT NULL<a name="307"></a><a name="IDX-150"></a>

_____________________________________________________________________________________________________________________________________________________________________
 INSERT INTO vw_shipped_orders
   (cust_id, item, qty, order_date)
 VALUES (2004, 110, 20, '2000-05-01')

_____________________________________________________________________________________________________________________________________________________________________
 INSERT INTO vw_shipped_orders
   (cust_id, item, qty, order_date, ship_date)
  VALUES (1002, 55, 10, '2000-05-17', '2000-18-00']

_____________________________________________________________________________________________________________________________________________________________________
 order_id cust_id item qty order_date ship_date handling
 -------- ------- ---- --- ---------- --------- --------
 1        1002    55   10  2000-05-17 200-15-18 none
 (1 row(s) affected)

_____________________________________________________________________________________________________________________________________________________________________
 order_id cust_id item qty order_date ship_date
 -------- ------- ---- --- ---------- ---------
 1        1002    55   10  2000-05-17 200-15-18
  (1 row(s) affected)

_____________________________________________________________________________________________________________________________________________________________________
 order_id cust_id item qty order_date ship_date
 -------- ------- ---- --- ---------- ---------
 1        1002    55   10  2000-05-17 200-15-18
 (1 row(s) affected)

_____________________________________________________________________________________________________________________________________________________________________
 SELECT * FROM orders

_____________________________________________________________________________________________________________________________________________________________________
 SELECT * FROM vw_shipped_orders

_____________________________________________________________________________________________________________________________________________________________________
 SELECT * FROM vw_shipped_orders

_____________________________________________________________________________________________________________________________________________________________________
INSERT INTO <view_name>
  [(<view column name>...[,<view column name>])]
VALUES (<view column value>...[,<last value column value>])

_____________________________________________________________________________________________________________________________________________________________________
order_id cust_id item qty order_date ship_date handling
-------- ------- ---- --- ---------- --------- --------
1        1002    55   10  2000-05-17 200-15-18 none
2        2004    110  20  2000-05-01 NULL      none
(2 row(s) affected)

_____________________________________________________________________________________________________________________________________________________________________
  ALTER TABLE employee ADD COLUMN hourly_pay_rate NUMERIC

_____________________________________________________________________________________________________________________________________________________________________
 CREATE TABLE employee
   (employee_id            INTEGER,
    first_name             VARCHAR(20),
    last_name              VARCHAR(30) NOT NULL,
    social_security_number CHAR(11),
    street_address         CHAR(30),
    health_card_number     CHAR(15),
    sheriff_card_number    CHAR(15),
    PRIMARY KEY (employee_id))

_____________________________________________________________________________________________________________________________________________________________________
 INSERT INTO employee VALUES (1,'Konrad','King',
   '555-55-5555','7810 Greenwood Ave',NULL,NULL)

_____________________________________________________________________________________________________________________________________________________________________
 INSERT INTO employee VALUES (1,'Konrad','King',
   '555-55-5555','7810 Greenwood Ave',NULL,NULL)

_____________________________________________________________________________________________________________________________________________________________________
 INSERT INTO employee
   (employee_id, first_name, last_name)
 VALUES (2, 'Sally', 'Fields')

_____________________________________________________________________________________________________________________________________________________________________
 INSERT INTO employee
   (employee_id, first_name, last_name)
 VALUES (2, 'Sally', 'Fields')

_____________________________________________________________________________________________________________________________________________________________________
 INSERT INTO employee
   (first_name, employee_id, last_name)
 VALUES ('Sally', 2, 'Fields')

_____________________________________________________________________________________________________________________________________________________________________
 INSERT INTO employee
   (first_name, employee_id, last_name)
 VALUES ('Sally', 2, 'Fields')<a name="316"></a><a name="IDX-156"></a>

_____________________________________________________________________________________________________________________________________________________________________
INSERT INTO <table name>
  [(<column name>[...,<last column name>])]
VALUES (<column value>[...,<last column value>])

_____________________________________________________________________________________________________________________________________________________________________
INSERT INTO employee VALUES (1,'Konrad','King',
  '555-55-5555','7810 Greenwood Ave',NULL,NULL)

_____________________________________________________________________________________________________________________________________________________________________
INSERT INTO employee
  (employee_id, first_name, last_name,
   social_security_number, street_address,
   health_card_number, sheriff_card_number)
VALUES (1, 'Konrad', 'King', '555-55-5555',
        '7810 Greenwood Ave',NULL,NULL)<a name="315"></a><a name="IDX-155"></a>

_____________________________________________________________________________________________________________________________________________________________________
INSERT INTO employee
  (first_name, last_name) VALUES ('Sally', 'Fields')

_____________________________________________________________________________________________________________________________________________________________________
 CREATE TABLE customers
   (customer_id  INTEGER,      first_name   VARCHAR(30),
    last _name   VARCHAR(30),  address      VARCHAR(35),
    city         VARCHAR (20), state        CHAR(2),
    zip_code     INTEGER,      phone_number CHAR(12),
    salesperson  INTEGER       net_due_days SMALLINT,
    credit_limit NUMERIC)
 CREATE TABLE employees
   (employee_id      INTEGER,     first_name   VARCHAR(30),
    last_name        VARCHAR(30), address      VARCHAR(35),
    ssan             CHAR(11),    salary       NUMERIC,
    low_quota        SMALLINT,    medium_quota SMALLINT,
    high_quota       SMALLINT,    sales_commission NUMERIC)
 CREATE TABLE orders<a name="320"></a><a name="IDX-159"></a>
   (order_id    INTEGER,  order_date  DATETIME,
    item_number INTEGER,  quantity    SMALLINT,
    customer_id INTEGER,  salesman_id INTEGER)
 CREATE TABLE products
   (product_id       SMALLINT, description VARCHAR(40),
    quantity_on_hand SMALLINT, item_cost   NUMERIC)

_____________________________________________________________________________________________________________________________________________________________________
 CREATE TABLE temp_report_table
   (customer_ID         INTEGER,
    cust_first_name     VARCHAR(30),
    cust_last_name      VARCHAR(30),
    salesman_ID         INTEGER,
    salesman_first_name VARCHAR(30),
    salesman_last_name  VARCHAR(30),
    order_date          DATETIME,
    order_item_number   SMALLINT,
    order_item_quantity SMALLINT,
    order_total         NUMERIC,
    order_item_desc     VARCHAR(40))

_____________________________________________________________________________________________________________________________________________________________________
 INSERT INTO <table name>
   [(<column name> [...,<last column name>])]
 VALUES (<column value>[...,<last column value>])<a name="318"></a><a name="IDX-157"></a>

_____________________________________________________________________________________________________________________________________________________________________
 INSERT INTO employee (employee_id, first_name, last_name)
 VALUES (4, 'Joe', 'Kernan'), (5, 'David', 'Faber'),
        (3, 'Brad', 'Woodyard')

_____________________________________________________________________________________________________________________________________________________________________
 INSERT INTO employee VALUES (1,'Konrad','King',
   '555-55-5555','7810 Greenwood Ave',NULL,NULL)

_____________________________________________________________________________________________________________________________________________________________________
 INSERT INTO employee
   (employee_id, first_name, last_name,
    social_security_number, street_address,
    health_card_number, sheriff_card_number)
 VALUES (1, 'Konrad', 'King', '555-55-5555',
         '7810 Greenwood Ave',NULL,NULL),
        (2, 'Sally', 'Fields', '556-55-5555',
         '77 Sunset Strip',NULL,NULL),
        (3, 'Wally', 'Wallberg', '557-55-5555',
         '765 E. Eldorado Lane',NULL,NULL)

_____________________________________________________________________________________________________________________________________________________________________
 INSERT INTO employee2 SELECT * from employee

_____________________________________________________________________________________________________________________________________________________________________
 SELECT salesman_id, salesman_first_name,
          salesman_last_name, order_total
 FROM temp_report_table
 WHERE order_total =
         (SELECT MAX(order_total) FROM temp_report_table)

_____________________________________________________________________________________________________________________________________________________________________
 SELECT
   cust_first_name, cust_last_name, salesman_first_name,
   salesman_last_name, order_item_quantity, order_total,
   order_item_desc
 FROM temp_report_table WHERE order_item_number = 5

_____________________________________________________________________________________________________________________________________________________________________
INSERT INTO <table name>
  [(<column name> [...,<last column name>])]
SELECT <column name> [...,<last column name>]
FROM <table name>
[WHERE <search condition>]

_____________________________________________________________________________________________________________________________________________________________________
INSERT INTO <table name>
  [(<column name> [...,<last column name>])]
VALUES (<row value constructor>
        [...,<last row value constructor>])

_____________________________________________________________________________________________________________________________________________________________________
INSERT INTO temp_report_table
  (customer_id, cust_first_name, cust_last_name,
   salesman_id, salesman_first_name, salesman_last_name,
   order_date, order_item_number, order_item_quantity,
   order_total, order_item_desc)
SELECT
   customers.customer_id, customer.first_name,
   customers.last_name, employee_id, employees.first_name,
   employees.last_name, order_date, item_number, quantity,
   (quantity * item_cost), description
FROM orders, customers, products, employees
WHERE orders.customer_id = customers.customer_id
AND   product_id         = item_number
AND   employee_id        = salesman_id

_____________________________________________________________________________________________________________________________________________________________________
 EXEC SP_DBOPTION SQLTips, 'SELECT INTO/BULKCOPY', TRUE

_____________________________________________________________________________________________________________________________________________________________________
 sp_dboption <database name>, 'SELECT INTO/BULKCOPY', TRUE

_____________________________________________________________________________________________________________________________________________________________________
EXEC <database name>, 'SELECT INTO/BULKCOPY', FALSE

_____________________________________________________________________________________________________________________________________________________________________
 UPDATE <table name | view name>
 SET <column name> = <expression>
        [..., <last column name> = <last expression>]
 [WHERE <search condition>]

_____________________________________________________________________________________________________________________________________________________________________
 UPDATE customers SET salesperson = 9 WHERE salesperson = 3

_____________________________________________________________________________________________________________________________________________________________________
 UPDATE employees SET low_quota = low_quota * 1.5

_____________________________________________________________________________________________________________________________________________________________________
SELECT COUNT(*) FROM customers WHERE salesperson = 3

_____________________________________________________________________________________________________________________________________________________________________
UPDATE customers SET salesperson = 9 WHERE salesperson = 3

_____________________________________________________________________________________________________________________________________________________________________
UPDATE customers
SET    credit_limit = 10000,  net_due_days = 120
WHERE  first_name = 'Konrad' AND last_name = 'King'

_____________________________________________________________________________________________________________________________________________________________________
UPDATE employees
SET low_quota = (low_quota * 2), medium_quota =
  (low_quota * 4), high_quota = (medium_quota * 8)
WHERE low_quota = 1 AND medium_quota = 2

_____________________________________________________________________________________________________________________________________________________________________
  UPDATE <target table name | view name>
  SET <column name> = <expression>...
         [, <last column name> = <last expression>]
  [WHERE <search condition>]

_____________________________________________________________________________________________________________________________________________________________________
 UPDATE employees
 SET department = ' Main Room', sales = 0,
     low_quota = sales, medium_quota = low_quota + 5,
     high_quota = medium_quota + 5
 WHERE sales > low_quota AND department ='Training'

_____________________________________________________________________________________________________________________________________________________________________
UPDATE employee SET YTD_fed_tax_withheld = 0.00,
  YTD_FICA_Employer = 0.00, YTD_FICA_Employee = 0.00,
  YTD_gross_pay = 0.00

_____________________________________________________________________________________________________________________________________________________________________
UPDATE employees SET low_quota = 1, medium_quota = 2,
  high_quota = 4
WHERE low_quota IS NULL

_____________________________________________________________________________________________________________________________________________________________________
UPDATE employees
SET department = ' Main Room', sales = 0,
    low_quota = sales, medium_quota = sales + 5,
    high_quota = sales + 10
WHERE sales > low_quota AND department ='Training'

_____________________________________________________________________________________________________________________________________________________________________
 UPDATE employees SET job_title = 'Manager'
 WHERE job_title = 'Supervisor'
 AND   5 < (SELECT COUNT (*)
  FROM employees WHERE reports_to = employee_id)<a name="331"></a><a name="IDX-166"></a>

_____________________________________________________________________________________________________________________________________________________________________
UPDATE employees SET department = 'Training'
WHERE department <> 'Training'
AND   sales < (SELECT AVG(sales)
               FROM employees
               WHERE department <> 'Training')

_____________________________________________________________________________________________________________________________________________________________________
 UPDATE employees SET bonus_multiplier = 2
 WHERE sales > high_quota * 1.5

_____________________________________________________________________________________________________________________________________________________________________
 UPDATE employees SET bonus_multiplier = 2,
 WHERE sales > (SELECT AVG(high_quota) FROM employees) * 1.5

_____________________________________________________________________________________________________________________________________________________________________
CREATE TABLE employees
(employee_id      INTEGER,
 first_name       VARCHAR(25),
 last_name        VARCHAR(30),
 SSAN             CHAR(11),
 sales            INTEGER,
 status           VARCHAR(30),
 low_quota        INTEGER,
 medium_quota     INTEGER,
 high_quota       INTEGER,
 bonus            INTEGER,
 bonus_multiplier INTEGER DEFAULT 1)<a name="333"></a><a name="IDX-167"></a>

_____________________________________________________________________________________________________________________________________________________________________
 UPDATE employees SET status = 'Key Account Manager'
 WHERE employee_id IN
   (SELECT salesperson_id FROM customers
    WHERE customer_number IN
      (SELECT customer_id FROM orders
       GROUP BY customer_ID
       HAVING SUM(order_total) > 1000000))

_____________________________________________________________________________________________________________________________________________________________________
 UPDATE INVENTORY SET reorder_status = 'Discontinued'
 WHERE vendor_id = 5

_____________________________________________________________________________________________________________________________________________________________________
 UPDATE INVENTORY SET reorder_status = 'Discontinued'
 WHERE vendor_id IN (SELECT vendor_id FROM vendors
                     WHERE company_name = 'XYZ Corp')

_____________________________________________________________________________________________________________________________________________________________________
CREATE TABLE employees
  (employee_id      INTEGER,
   first_name       VARCHAR(25),
   last_name        VARCHAR(30),
   SSAN             CHAR(11),
   total_sales      MONEY,
   status           VARCHAR(30))

CREATE table customers
  (customer_number INTEGER,
   company_name    VARCHAR(50),
   salesperson_id  INTEGER)

CREATE table orders
  (customer_id  INTEGER,
   order_number INTEGER,
   order_date   DATETIME,
   order_total  MONEY)

_____________________________________________________________________________________________________________________________________________________________________
 CREATE TABLE employees
 (emp_id     INTEGER PRIMARY KEY IDENTITY,
  fname      VARCHAR(25),
  lname      VARCHAR(30),
  addr       VARCHAR(30),
  SSAN       CHAR(11),<a name="338"></a><a name="IDX-170"></a>
  dept       VARCHAR(20),
  badgno     INTEGER,
  sales      INTEGER,
  tot_sales  MONEY,
  status     VARCHAR(30),
  low_quota  INTEGER,
  med_quota  INTEGER,
  high_quota INTEGER,
  bonus      INTEGER,
  bonus_mult INTEGER DEFAULT 1)

_____________________________________________________________________________________________________________________________________________________________________
 Server: Msg 4405, Level 16, State 2, Linel
 View 'CUST_REP' is not updateable because the FROM clause
   names multiple tables.

_____________________________________________________________________________________________________________________________________________________________________
 UPDATE vw_marketing_sup_emp_update
 SET badge_number = 1123
 WHERE employee_number = 123

_____________________________________________________________________________________________________________________________________________________________________
CREATE VIEW vw_marketing_sup_emp_update
  (employee_number, first_name, last_name, address,
   social_security_number, badge_number)
AS SELECT emp_id, fname, lname, addr, ssan, badgno
FROM employees
WHERE dept = 'Marketing'

_____________________________________________________________________________________________________________________________________________________________________
UPDATE <target table name | view name>
SET <column name> = <expression>...
       [, <last column name> = <last expression>]
[WHERE <search condition>]

_____________________________________________________________________________________________________________________________________________________________________
UPDATE cust_rep
SET employee_status ='Terminated', cust_sales_rep = 2
WHERE employee_id = 6

_____________________________________________________________________________________________________________________________________________________________________
 CREATE TABLE hotmail_users
   (user_id      VARCHAR(25) PRIMARY KEY,
    name         VARCHAR(50),
    address      VARCHAR(50),
    phone_number VARCHAR(30),
    password     VARCHAR(20))

 CREATE TABLE hotmail_messages
   (user_id            VARCHAR(25),
    date_time_received DATETIME,
    subject            VARCHAR (250),
    sent_by            VARCHAR(25),
    date_time_sent     DATETIME,
    priority           CHAR(1),
    message            TEXT
    CONSTRAINT recipient_account_id
      FOREIGN KEY (user_id) REFERENCES hotmail_users)<a name="341"></a><a name="IDX-172"></a>

_____________________________________________________________________________________________________________________________________________________________________
 DELETE from <table name> [WHERE <search condition>]

_____________________________________________________________________________________________________________________________________________________________________
DELETE FROM hotmail_messages WHERE user_id = 'KKI'
DELETE hotmail_users WHERE user_id = 'KKI'

_____________________________________________________________________________________________________________________________________________________________________
Server: Msg 547, Level 16, State 1, Line 1
DELETE statement conflict with COLUMN REFERENCE constraint
  'recipient_account_id'.
The conflict occurred in database 'SQLTips', table
  hotmail_messages', column 'user_id'.
The statement has been terminated.

_____________________________________________________________________________________________________________________________________________________________________
  SELECT COUNT (*) FROM orders
  WHERE order_date > '01/01/2000' AND ship_date IS NULL

_____________________________________________________________________________________________________________________________________________________________________
 DELETE from <table name> [WHERE <search condition>]

_____________________________________________________________________________________________________________________________________________________________________
 DELETE FROM clients WHERE fc_id IN (1001, 1005, 1010, 1015)

_____________________________________________________________________________________________________________________________________________________________________
 DELETE FROM clients

_____________________________________________________________________________________________________________________________________________________________________
 DELETE FROM orders
 WHERE order_date < '01/01/2000' AND ship_date IS NULL

_____________________________________________________________________________________________________________________________________________________________________
DELETE FROM customers
WHERE (SELECT COUNT (*) FROM orders
         WHERE customer_ID = ordered_by
         AND order_date > '05/30/1999') = 0

_____________________________________________________________________________________________________________________________________________________________________
DELETE FROM customers
WHERE NOT EXISTS (SELECT * FROM ORDERS
                    WHERE customer_ID = ordered_by
                    AND order_date > '05/30/1999')<a name="346"></a><a name="IDX-175"></a>

_____________________________________________________________________________________________________________________________________________________________________
DELETE FROM hotmail_messages
WHERE user_id = (SELECT user_id FROM hotmail_users
                 WHERE name = 'Konrad King').

_____________________________________________________________________________________________________________________________________________________________________
DELETE FROM hotmail_messages, hotmail_users
WHERE hotmail_messages.user_id hotmail_users.user_id
AND name = 'Konrad King'

_____________________________________________________________________________________________________________________________________________________________________
DELETE FROM salesreps
WHERE 1000 >
  (SELECT SUM(order_total) FROM orders
      WHERE sold_by = salesrep_id))

_____________________________________________________________________________________________________________________________________________________________________
 DELETE FROM employee<a name="348"></a><a name="IDX-176"></a>

_____________________________________________________________________________________________________________________________________________________________________
 TRUNCATE TABLE <table name>

_____________________________________________________________________________________________________________________________________________________________________
 TRUNCATE TABLE employee

_____________________________________________________________________________________________________________________________________________________________________
  DELETE FROM customers
  WHERE last_order_date < CONVERT(DATETIME,'05/30/99'). - 365
  AND total_purchases / order_count <
        (SELECT (SUM(total_purchases) / sum(order_count)) *
           1.75 FROM customers)

_____________________________________________________________________________________________________________________________________________________________________
 CREATE TABLE customers
 (cust_id            INTEGER PRIMARY KEY,
  first_name         VARCHAR(25),
  last_name          VARCHAR(35),
  address            VARCHAR(40),
  phone_number       VARCHAR(20),
  total_purchases    MONEY,<a name="350"></a><a name="IDX-177"></a>
  last_order_date    DATETIME,
  order_count        INTEGER)

_____________________________________________________________________________________________________________________________________________________________________
  DELETE FROM vw_tulsa_employees WHERE department = 'shipping'

_____________________________________________________________________________________________________________________________________________________________________
 CREATE TABLE employees
 (employee_id      INTEGER,
  first_name       VARCHAR(25),
  last_name        VARCHAR(30),
  SSAN             CHAR(11),
  location         VARCHAR(20),
  department       VARCHAR(20),
  total_sales      MONEY)

_____________________________________________________________________________________________________________________________________________________________________
 CREATE VIEW vw_tulsa_employees AS
 SELECT employee_id, first_name, last_name, SSAN, department
 FROM employees
 WHERE location = 'Tulsa'

_____________________________________________________________________________________________________________________________________________________________________
 DELETE FROM vw_tulsa_employees WHERE total_sales < 1000

_____________________________________________________________________________________________________________________________________________________________________
 DELETE FROM vw_tulsa_employees

_____________________________________________________________________________________________________________________________________________________________________
Server: Msg 207, Level 16, State 3, Line 1
<i class="emphasis">Invalid column name 'total sales'</i>.

_____________________________________________________________________________________________________________________________________________________________________
 SELECT employee_id, first_name, last_name, total_sales
 FROM employees
 WHERE first_name IS NULL

_____________________________________________________________________________________________________________________________________________________________________
 SELECT SUM(total_sales) FROM employees

_____________________________________________________________________________________________________________________________________________________________________
 SUM(total_sales)
 ================
 1072105.7900

_____________________________________________________________________________________________________________________________________________________________________
employee_id  first_name  last_name  total_sales
===========  ==========  =========  ===========

_____________________________________________________________________________________________________________________________________________________________________
employee_id  first_name  last_name  total_sales
===========  ==========  =========  ===========
1            Konrad      King       125258.2200
2            Sally       Fields     83478.2500
3            Wally       Wallberg   14258.1200
4            Sam         Kelleher   6012.5900
5            Sam         Walton     748252.2000
6            Helen       Eoff       45587.6600
7            NULL        Gomez      49258.7500

_____________________________________________________________________________________________________________________________________________________________________
employee_id  first_name  last_name  total_sales
===========  ==========  =========  ===========
4            Sam         Kelleher   6012.5900
5            Sam         Walton     748252.2000

_____________________________________________________________________________________________________________________________________________________________________
SELECT [ALL | DISTINCT] <select item list>
FROM <table list>
[WHERE <search conditions>]
[GROUP BY <grouping column list>
   [HAVING <having search conditions>]]
[ORDER BY <sort specification>]

_____________________________________________________________________________________________________________________________________________________________________
SELECT employee_id, first_name, last_name, total_sales
FROM employees
WHERE first_name = 'Sam'

_____________________________________________________________________________________________________________________________________________________________________
SELECT employee_id, first_name, last_name, total_sales
FROM employees<a name="356"></a><a name="IDX-180"></a>

_____________________________________________________________________________________________________________________________________________________________________
 SELECT [ALL | DISTINCT] <select item list>
 FROM <table list>
 [WHERE <search conditions>]
 [GROUP BY <grouping column list>
    [HAVING <having search conditions>]]
 ORDER BY <sort specification>]<a name="359"></a><a name="IDX-182"></a>

_____________________________________________________________________________________________________________________________________________________________________
 SELECT order_date, description, cost
 FROM orders, customers
 WHERE ordered_by = customer_id
 AND   first_name = 'Bruce' AND last_name = 'Williams'

_____________________________________________________________________________________________________________________________________________________________________
SELECT order_date, description, cost FROM orders, customers
WHERE ordered_by = customer_id
AND   first_name = 'Bruce' AND last_name = 'Williams'

_____________________________________________________________________________________________________________________________________________________________________
          EMPLOYEES                          ORDERS
          emp_id last_name trainer sales     cust_id sold_by sales_amt
          ------ --------- ------- -----     ------- ------- ---------
          1      Hardy     Bob     3         1       1       $6,000
          1      Hardy     Bob     3         2       1       $6,000
          1      Hardy     Bob     3         8       1       $6,000
          3      Green     Bob     2         6       3       $7,000
          3      Green     Bob     2         10      3       $9,000
          2      Wallace   Greg    3         4       2       $4,000
          2      Wallace   Greg    3         5       2       $6,000
          2      Wallace   Greg    3         9       2       $7,000
          4      Marsh     Andy    2         3       4       $8,000
          4      Marsh     Andy    2         7       4       $4,000

_____________________________________________________________________________________________________________________________________________________________________
          trainer   num_trainees  gross_sales  AVG(sales_amt)
          -------   ------------  -----------  -------------
          Bob       5             $34,000      $6,800.0000
          Greg      3             $17,000      $5,666.6666
          Andy      2             $12,000      $6,000.0000<a name="370"></a><a name="IDX-188"></a>

_____________________________________________________________________________________________________________________________________________________________________
   EMPLOYEES                           ORDERS
   emp_id last_name trainer sales      cust_id sold_by sales_amt
   ------ --------- ------- -----      ------- ------- ---------
   1      Hardy     Bob     3          1       1       $6,000
   1      Hardy     Bob     3          2       1       $6,000
   1      Hardy     Bob     3          8       1       $6,000
   2      Wallace   Greg    3          4       2       $4,000
   2      Wallace   Greg    3          5       2       $6,000
   2      Wallace   Greg    3          9       2       $7,000
   3      Green     Bob     2          6       3       $7,000
   3      Green     Bob     2          10      3       $9,000
   4      Marsh     Andy    2          3       4       $8,000
   4      Marsh     Andy    2          7       4       $4,000

_____________________________________________________________________________________________________________________________________________________________________
 SELECT * FROM employees

_____________________________________________________________________________________________________________________________________________________________________
 SELECT [ALL | DISTINCT] <select item list>
 FROM <table list>
 [WHERE <search conditions>]
 [GROUP BY <grouping column list>
    [HAVING <having search conditions>)]
 [ORDER BY <sort specification>]

_____________________________________________________________________________________________________________________________________________________________________
 SELECT last_name trainer, COUNT(*) AS num_trainees,
        SUM(sales_amt) AS gross_sales, AVG(sales_amt)
 FROM employees, sales
 WHERE sales > 0
 AND emp_id = sold_by
 GROUP BY last_name, trainer
 HAVING AVG(sales_amt) > 6000

_____________________________________________________________________________________________________________________________________________________________________
 trainer  num_trainees  gross_sales  AVG(sales_amt)
 -------  ------------  -----------  -------------
 Bob      5             34000.00     6800.0000
 (1 Row(s)  affected)

_____________________________________________________________________________________________________________________________________________________________________
CREATE TABLE employees
(emp_id    INTEGER PRIMARY KEY,
 last_name VARCHAR(25),<a name="363"></a><a name="IDX-185"></a>
 trainer    VARCHAR(25),
 sales      INTEGER)

CREATE TABLE sales
 (cust_id   INTEGER PRIMARY KEY,
  sold_by   INTEGER,
  sales_amt MONEY)

_____________________________________________________________________________________________________________________________________________________________________
EMPLOYEES                          ORDERS
emp_id last_name trainer sales     cust_id sold_by sales_amt
------ --------- ------- -----     ------- ------- ---------
1      Hardy     Bob     3         1       1       $6,000
1      Hardy     Bob     3         2       1       $6,000
1      Hardy     Bob     3         3       4       $8,000
1      Hardy     Bob     3         4       2       $4,000
1      Hardy     Bob     3         5       2       $6,000
1      Hardy     Bob     3         6       3       $7,000
1      Hardy     Bob     3         7       4       $4,000<a name="365"></a><a name="IDX-186"></a>
1      Hardy     Bob     3         8       1       $6,000
1      Hardy     Bob     3         9       2       $7,000
1      Hardy     Bob     3         10      3       $9,000
2      Wallace   Greg    3         1       1       $6,000
2      Wallace   Greg    3         2       1       $6,000
2      Wallace   Greg    3         3       4       $8,000
2      Wallace   Greg    3         4       2       $4,000
2      Wallace   Greg    3         5       2       $6,000
2      Wallace   Greg    3         6       3       $7,000
2      Wallace   Greg    3         7       4       $4,000
2      Wallace   Greg    3         8       1       $6,000
2      Wallace   Greg    3         9       2       $7,000
2      Wallace   Greg    3         10      3       $9,000
3      Green     Bob     2         1       1       $6,000
3      Green     Bob     2         2       1       $6,000
3      Green     Bob     2         3       4       $8,000
3      Green     Bob     2         4       2       $4,000
3      Green     Bob     2         5       2       $6,000
3      Green     Bob     2         6       3       $7,000
3      Green     Bob     2         7       4       $4,000
3      Green     Bob     2         8       1       $6,000
3      Green     Bob     2         9       2       $7,000
3      Green     Bob     2         10      3       $9,000
4      Marsh     Andy    2         1       1       $6,000
4      Marsh     Andy    2         2       1       $6,000
4      Marsh     Andy    2         3       4       $8,000
4      Marsh     Andy    2         4       2       $4,000
4      Marsh     Andy    2         5       2       $6,000
4      Marsh     Andy    2         6       3       $7,000
4      Marsh     Andy    2         7       4       $4,000
4      Marsh     Andy    2         8       1       $6,000
4      Marsh     Andy    2         9       2       $7,000
4      Marsh     Andy    2         10      3       $9,000
5      Brown     Greg    0         1       1       $6,000
5      Brown     Greg    0         2       1       $6,000
5      Brown     Greg    0         3       4       $8,000
5      Brown     Greg    0         4       2       $4,000
5      Brown     Greg    0         5       2       $6,000
5      Brown     Greg    0         6       3       $7,000
5      Brown     Greg    0         7       4       $4,000
5      Brown     Greg    0         8       1       $6'000
5      Brown     Greg    0         9       2       $7,000
5      Brown     Greg    0         10      3       $9,000

_____________________________________________________________________________________________________________________________________________________________________
EMPLOYEES table              SALES table
id last_name trainer sales   cust_id sold_by sales_amt
-- --------- ------- -----   ------- ------- ---------
1  Hardy     Bob     3       1       1       $6,000
2  Wallace   Greg    3       2       1       $6,000
3  Green     Bob     2       3       4       $8,000
4  Marsh     Andy    2       4       2       $4,000
5  Brown     Greg    0       5       2       $6,000
                             6       3       $7'000
                             7       4       $4,000
                             8       1       $6,000
                             9       2       $7,000
                             10      3       $9,000

_____________________________________________________________________________________________________________________________________________________________________
  SELECT * FROM customer

_____________________________________________________________________________________________________________________________________________________________________
  SELECT [ALL | DISTINCT] <select item list>
  FROM <table list>
  [WHERE <search conditions>]
  [GROUP BY <grouping column list><a name="372"></a><a name="IDX-189"></a>
    [HAVING <having search conditions>]]
  [ORDER BY <sort specification>]

_____________________________________________________________________________________________________________________________________________________________________
  WHERE customers.cust_id = orders.cust_id

_____________________________________________________________________________________________________________________________________________________________________
 CREATE TABLE customer
   (customer_id  INTEGER PRIMARY KEY,
   first_name    VARCHAR(20),
   last_name     VARCHAR(30),
   address       VARCHAR(50),
   phone_number  VARCHAR(20))

_____________________________________________________________________________________________________________________________________________________________________
 customer_id    first_name    last_name
 -----------    ----------    ---------
 1              Wally         Cleaver
 2              Dolly         Madison
 3              Horace        Greely
 4              Ben           Stepman

_____________________________________________________________________________________________________________________________________________________________________
 SELECT customer_id, first_name, last_name FROM customers

_____________________________________________________________________________________________________________________________________________________________________
 SELECT customer_id, first_name, last_name, address,
        phone_number
 FROM customer

_____________________________________________________________________________________________________________________________________________________________________
 SELECT customer_id, first_name, phone_number FROM customer

_____________________________________________________________________________________________________________________________________________________________________
 SELECT customers.cust_id, first_name, last_name,
        order_date, description, order_total
 FROM customers, orders
 WHERE customers.cust_id = orders.cust_id

_____________________________________________________________________________________________________________________________________________________________________
CREATE TABLE customers
  (cust_id    INTEGER PRIMARY KEY,
  first_name  VARCHAR(20)
  last_name   VARCHAR(30))

CREATE TABLE  ORDERS
  (order_number INTEGER PRIMARY KEY,
  order_date    DATETIME,
  cust_id       INTEGER,
  description   VARCHAR(25),
  order_total   MONEY)<a name="373"></a><a name="IDX-190"></a>

_____________________________________________________________________________________________________________________________________________________________________
SELECT * FROM customer

_____________________________________________________________________________________________________________________________________________________________________
CREATE TABLE sales
  (emp_id     INTEGER,
  meal_total  MONEY,
  tip_rec     MONEY)<a name="375"></a><a name="IDX-191"></a>

_____________________________________________________________________________________________________________________________________________________________________
emp_id meal_total         standard_tip tip_rec over_under
------ ---------- ------- ------------ ------- ----------
1      75.3300    * 15% = 11.2995      10.5000 -.799500
2      13.5700    * 15% = 2.0355       1.2500  -.785500
5      89.2500    * 15% = 13.3875      13.5000 .112500
7      110.4800   * 15% = 16.5720      17.2500 .678000
1      125.4400   * 15% = 18.8160      19.7500 .934000
3      271.2200   * 15% = 40.6830      47.5000 6.817000

_____________________________________________________________________________________________________________________________________________________________________
SELECT emp_id, meal_total, '* 15% = ',
       meal_total * .15 AS standard_tip, tip_rec,
       tip_rec - (meal_total * .15) AS over_under
FROM sales
ORDER BY over_under

_____________________________________________________________________________________________________________________________________________________________________
  emp_id meal_total tip_rec expected_tip
  ------ ---------- ------- ------------

_____________________________________________________________________________________________________________________________________________________________________
  SELECT *, meal_total * .15 AS expected_tip FROM sales
  WHERE NULL = NULL<a name="378"></a><a name="IDX-193"></a>

_____________________________________________________________________________________________________________________________________________________________________
 CREATE TABLE sales
   (emp_id     INTEGER,
   meal_total  MONEY,
   tip_rec     MONEY)

_____________________________________________________________________________________________________________________________________________________________________
 SELECT * FROM <table name>

_____________________________________________________________________________________________________________________________________________________________________
 SELECT * FROM sales

_____________________________________________________________________________________________________________________________________________________________________
emp_id meal_total tip_rec
------ ---------- ------
1      75.3300    10.5000
2      13.5700    1.2500
5      89.2500    13.5000
7      110.4800   17.2500
1      125.4400   19.7500
3      271.2200   47.5000

_____________________________________________________________________________________________________________________________________________________________________
  emp_id  first_name  last_name  under_by
  ------  ----------  ---------  --------
  1       Sally       Fields     6
  7       Wally       Wells      9
  9       Bret        Maverick   12

_____________________________________________________________________________________________________________________________________________________________________
  SELECT emp_id, first_name, last_name,
         quota - monthly_sales AS under_by
  FROM employees
  WHERE department = 'SALES' AND monthly_sales < quota<a name="380"></a><a name="IDX-194"></a>

_____________________________________________________________________________________________________________________________________________________________________
  CREATE customers
    (customer_id  INTEGER PRIMARY KEY,
     first_name   VARCHAR(25),
     last_name    VARCHAR(30),
     credit_limit MONEY)

  CREATE invoices
    (invoice_number INTEGER PRIMARY KEY,
     ordered_by     INTEGER,
     invoice_total  MONEY,
     total_paid     MONEY)

_____________________________________________________________________________________________________________________________________________________________________
 SELECT <column list> FROM <table name>
 WHERE <search condition><a name="382"></a><a name="IDX-195"></a>

_____________________________________________________________________________________________________________________________________________________________________
 SELECT customer_id, first_name, last_name, credit_limit
 FROM customers, invoices
 WHERE ordered_by = customer_id
 AND credit_limit < (SELECT SUM(invoice_total - total_paid)
                     FROM invoices
                     WHERE ordered_by = customer_id)

_____________________________________________________________________________________________________________________________________________________________________
SELECT emp_id, first_name, last_name,
       quota - monthly_sales AS under_by
FROM employees
WHERE department = 'SALES'
AND monthly_sales < (quota * .80)

_____________________________________________________________________________________________________________________________________________________________________
  SELECT *, (speed - posted_limit) AS mph_over_limit
  FROM citation WHERE speed > 1.5 * posted_limit

_____________________________________________________________________________________________________________________________________________________________________
  SELECT employee_id, last_name
  FROM employees_WHERE_last_name >= 'King' ORDER BY last_name

_____________________________________________________________________________________________________________________________________________________________________
  SELECT student_id, first_name, last_name
  FROM students WHERE absent_count = 0 AND late_count <= 2

_____________________________________________________________________________________________________________________________________________________________________
 SELECT * FROM employees WHERE status = 'A'

_____________________________________________________________________________________________________________________________________________________________________
 SELECT * FROM students WHERE class <> 'Senior'

_____________________________________________________________________________________________________________________________________________________________________
 SELECT dept_no, budget, total_spent,
         budget - total_spent AS remaining
 FROM dept_financials WHERE total_spent < budget

_____________________________________________________________________________________________________________________________________________________________________
 SELECT student_id, first_name, last_name
 FROM students WHERE class = 'Senior' AND height >= 78

_____________________________________________________________________________________________________________________________________________________________________
 SELECT year, color, make, model, cost FROM auto_inventory
 WHERE (make = 'Jaguar' AND year > 1998) OR
       (make = 'Corvette') OR
       (make = 'BMW' AND NOT color = 'blue')

_____________________________________________________________________________________________________________________________________________________________________
 SELECT year, make, model, cost FROM auto_inventory
 WHERE make = 'Corvette' AND year > 1990 AND color = 'Red'<a name="389"></a><a name="IDX-199"></a>

_____________________________________________________________________________________________________________________________________________________________________
 SELECT year, make, model, cost FROM auto_inventory
 WHERE make = 'Jaguar' OR make = 'BMW' OR make = 'Corvette'

_____________________________________________________________________________________________________________________________________________________________________
 SELECT year, make, model, cost FROM auto_inventory
 WHERE NOT cost_to_insure > 2000

_____________________________________________________________________________________________________________________________________________________________________
SELECT <select item list> FROM <table name>
WHERE [NOT] <search condition>
  [<comparison operator> [NOT] < search condition>]...
  [<last comparison operator> [NOT]
      <last search condition>]

_____________________________________________________________________________________________________________________________________________________________________
WHERE <column name> != <value>

_____________________________________________________________________________________________________________________________________________________________________
WHERE <column name> <> <value>

_____________________________________________________________________________________________________________________________________________________________________
WHERE NOT <column name> = <value>

_____________________________________________________________________________________________________________________________________________________________________
  SELECT student_id, last_name, first_name, grade_received
  FROM students<a name="393"></a><a name="IDX-202"></a>
  ORDER BY grade_received DESC, last_name ASC, first_name,
           student_id

_____________________________________________________________________________________________________________________________________________________________________
 SELECT student_id, last_name, first_name, grade_received
 FROM students
 ORDER BY 4 DESC, 2, 3, 1

_____________________________________________________________________________________________________________________________________________________________________
 SELECT student_id, last_name, first_name, grade_received
 FROM students
 ORDER BY grade_received DESC, last_name ASC, first_name,
          student_id

_____________________________________________________________________________________________________________________________________________________________________
 student_id  last_name  first_name  grade_received
 ----------  ---------  ----------  --------------
 1           Smith      Sally       65
 8           Wells      Wally       70
 9           Luema      Albert      75
 12          Luema      Abner       75
 90          Davis      Scott       96

_____________________________________________________________________________________________________________________________________________________________________
emp_id  first_name  last_name  quota  sales  over_under
------  ----------  ---------  -----  -----  ----------
1       Sally       Fields     3      7      4
7       Wally       Wells      8      9      1
9       Bret        Maverick   7      5      -2

_____________________________________________________________________________________________________________________________________________________________________
emp_id  first_name  last_name  quota sales
------  ----------  ---------  ----- ------
1       Sally       Fields     3     7       4
7       Wally       Wells      8     9       1
9       Bret        Maverick   7     5       -2

_____________________________________________________________________________________________________________________________________________________________________
SELECT <select item list> FROM <table name>
[WHERE <search condition>]
ORDER BY <sort specification>

where <sort specification> is defined as:

<column name | column number> [ASC | DESC]
   [,...<last column name | last column number>
     [ASC | DESC]}

_____________________________________________________________________________________________________________________________________________________________________
SELECT employee_id, first_name, last_name, quota,
       sales, sales - quota AS over_under
FROM employees
ORDER BY over_under DESC, last_name, first_name,
         employee_id

_____________________________________________________________________________________________________________________________________________________________________
SELECT employee_id, first_name, last_name, quota,
       sales, sales - quota
FROM employees
ORDER BY 6 DESC, last_name, first_name, employee_id

_____________________________________________________________________________________________________________________________________________________________________
SELECT student_id, last_name, first_name, grade_received
FROM students
ORDER BY grade_received

_____________________________________________________________________________________________________________________________________________________________________
student_id  last_name  first_name  grade_received
----------  ---------  ----------  --------------
90          Davis      Scott       96
12          Luema      Abner       75
9           Luema      Albert      75
8           Wells      Wally       70
1           Smith      Sally       65

_____________________________________________________________________________________________________________________________________________________________________
 SELECT employee_id, first_name, last_name, '$200' AS bonus
 FROM employees
 WHERE department = 'Sales' AND
       gross_sales > 75000 AND
       (cancellations / sales) < .1 AND
       sales > 30

_____________________________________________________________________________________________________________________________________________________________________
 SELECT first_name, last_name FROM golfers
 WHERE previous_us_open_winner = 'Y' OR
       PGA_tournaments_won > 1 OR
       qual_school_ranking <= 10

_____________________________________________________________________________________________________________________________________________________________________
SELECT employee_id, first_name, last_name, gross_sales,
       sales
FROM employees
WHERE department = 'Sales' AND
      ((NOT gross_sales > 75000)  OR
       (NOT sales > 30))

_____________________________________________________________________________________________________________________________________________________________________
 SELECT first_name FROM employees WHERE quota = NULL

_____________________________________________________________________________________________________________________________________________________________________
first_name  last_name   sales  quota
----------  ---------   -----  -----
Sally       Fields      8      5
Wally       Wells       4      10
Sue         Smith       10     NULL
Kelly       Sutherland  7      7

_____________________________________________________________________________________________________________________________________________________________________
SELECT first_name FROM employees WHERE quota IS NULL

_____________________________________________________________________________________________________________________________________________________________________
SELECT first_name FROM employees WHERE sales >= quota

_____________________________________________________________________________________________________________________________________________________________________
SELECT first_name FROM employees WHERE sales < quota

_____________________________________________________________________________________________________________________________________________________________________
 SELECT employee_id, first_name, last_name, gross_sales
 FROM employees
 WHERE (status, department) = ('Active', 'Sales')

_____________________________________________________________________________________________________________________________________________________________________
SELECT employee_id, first_name, last_name, gross_sales
FROM employees
WHERE status = 'Active' AND department = 'Sales'

_____________________________________________________________________________________________________________________________________________________________________
  (SELECT [ALL I DISTINCT] <select item list>
   FROM <table list>
   [WHERE <search condition>]
   [GROUP BY <group item list>
      [HAVING <group by search condition>]])

_____________________________________________________________________________________________________________________________________________________________________
 SELECT product_id, description, qty_in_stock FROM products
 WHERE qty_in_stock < "total to ship"

_____________________________________________________________________________________________________________________________________________________________________
 SELECT product_id, description, qty_in_stock FROM products
 WHERE qty_in_stock < (SELECT SUM(quantity)
                       FROM orders
                       WHERE orders.item_number =
                               products.product_id AND
                             date_shipped IS NULL)

_____________________________________________________________________________________________________________________________________________________________________
SELECT SUM(quantity) FROM orders
WHERE orders.item_number = "item to total" AND
      date_shipped IS NULL)

_____________________________________________________________________________________________________________________________________________________________________
  SELECT manufacturer, make, model FROM auto_inventory
  WHERE sticker_price = (SELECT MAX (sticker_price)
                         FROM auto_inventory)

_____________________________________________________________________________________________________________________________________________________________________
 SELECT customer_id, order_date, price_paid
 FROM auto_purchases
 WHERE (manufacturer, make, model) =
       (SELECT manufacturer, make, model FROM auto_inventory
       WHERE sticker_price = (SELECT MAX (sticker_price)
                              FROM auto_inventory))

_____________________________________________________________________________________________________________________________________________________________________
SELECT customer_id, order_date, price_paid
FROM auto_purchases
WHERE manufacturer = (SELECT DISTINCT manufacturer
                      FROM auto_inventory
                      WHERE sticker_price =
                           (SELECT MAX (sticker_price)
                            FROM auto_inventory))
AND make = (SELECT DISTINCT make FROM auto_inventory
             WHERE sticker_price =
                  (SELECT MAX (sticker_price)
                   FROM auto_inventory))
AND model = (SELECT DISTINCT model FROM auto_inventory
              WHERE sticker_price =
                   (SELECT MAX (sticker_price)
                    FROM auto_inventory))

_____________________________________________________________________________________________________________________________________________________________________
 SELECT employee_id, first_name, last_name, gross_sales,
        gross_sales/ hours AS revenues_per_hour,
        gross_sales / amount_paid AS
           revenues_per_dollar_paid
 FROM employees

_____________________________________________________________________________________________________________________________________________________________________
 UPDATE employees SET quota = quota * .25
 WHERE department = 'Marketing' and status = 'Senior'

_____________________________________________________________________________________________________________________________________________________________________
SELECT employee_id, first_name, last_name, quota, sales
FROM employees WHERE sales < .50 * quota<a name="412"></a><a name="IDX-212"></a>

_____________________________________________________________________________________________________________________________________________________________________
-37.89
378.95 + 458.3 - 37.9
(59.6 * 10) / (58.3 / 4)
quota * .10
gross_sales - costs

_____________________________________________________________________________________________________________________________________________________________________
 'City'
 'Peanut butter ' || 'and Jelly'
 'Time' + 'shares'
 first_name || ' ' || last_name

_____________________________________________________________________________________________________________________________________________________________________
 '06/09/2000'
 '06/09/2000 14:52:52'
 start_date + 7
 DATENAME(weekday, start_date)
 DATEDIFF(stop_date, start_date)
 GETDATE()
 DATEPART(day, (GETDATE())

_____________________________________________________________________________________________________________________________________________________________________
 SELECT student_id, first_name, last_name FROM students
 WHERE gpa = 4.0

_____________________________________________________________________________________________________________________________________________________________________
  DELETE customers
  WHERE customer_since_date < '01/01/1995' AND
        last_order_date < '12/31/1997' OR
        total_paid = 0.00 AND
        NOT total_orders > 100000.00

_____________________________________________________________________________________________________________________________________________________________________
 DELETE customers WHERE customer_since_date < '01/01/1995'

_____________________________________________________________________________________________________________________________________________________________________
 DELETE customers
 WHERE (customer_since_date < '01/01/1995' AND
        last_order_date < '12/31/1997' OR
        total_paid = 0.00) AND
       NOT total_orders > 100000.00

_____________________________________________________________________________________________________________________________________________________________________
 DELETE customers
 WHERE customer_since_date < '01/01/1995' AND
       last_order_date < '12/31/1997'

_____________________________________________________________________________________________________________________________________________________________________
 DELETE customers
 WHERE customer_since_date < '01/01/1995' OR
       last_order_date < '01/01/1997'<a name="423"></a><a name="IDX-217"></a>

_____________________________________________________________________________________________________________________________________________________________________
 DELETE customers
 WHERE NOT customer_since_date < '01/01/1995'

_____________________________________________________________________________________________________________________________________________________________________
 SELECT COUNT(*) FROM employees WHERE state = 'NV'

_____________________________________________________________________________________________________________________________________________________________________
 SELECT COUNT(*) FROM employees WHERE state = 'NV'

_____________________________________________________________________________________________________________________________________________________________________
 SELECT COUNT(*) FROM employees

_____________________________________________________________________________________________________________________________________________________________________
 SELECT COUNT(quota) FROM employees WHERE state = 'NV'

_____________________________________________________________________________________________________________________________________________________________________
 SELECT COUNT(quota) FROM employees WHERE state = 'NV'

_____________________________________________________________________________________________________________________________________________________________________
 SELECT employee_id, first_name, last_name, age
 FROM employees
 WHERE age = (SELECT MAX(age) FROM employees)

_____________________________________________________________________________________________________________________________________________________________________
 SELECT employee_id, first_name, last_name, age
 FROM employees
 WHERE age = (SELECT MIN(age) FROM employees)

_____________________________________________________________________________________________________________________________________________________________________
 SELECT SUM (order_total) FROM sales
 WHERE date_sold >= '05/01/2000' AND
       date_sold <= '05/31/2000'

_____________________________________________________________________________________________________________________________________________________________________
 SELECT SUM (order_total), AVG (order_total) FROM sales
 WHERE date_sold >= '05/01/2000' AND
         date_sold <= '05/31/2000'

_____________________________________________________________________________________________________________________________________________________________________
       CREATE TABLE employees
         (id           CHAR(3)
          name         VARCHAR(35),
          address      VARCHAR(45),
          phone_number CHAR (11),
          department   SMALLINT,
          commission   MONEY,
          bonus_level  VARCHAR(35),
          total_sales  MONEY,
          hourly_rate  MONEY,
          sales_calls  SMALLINT,
          sales_count  SMALLINT)

_____________________________________________________________________________________________________________________________________________________________________
   CASE <value to test>
     WHEN <value> THEN <expression> | NULL
     [WHEN <value> THEN <expression> | NULL]...
       [WHEN <last value> THEN <last expression> | NULL]
     [ELSE <expression> | NULL]
   END

_____________________________________________________________________________________________________________________________________________________________________
 CASE WHEN <search condition> THEN <expression> | NULL
      [WHEN <search condition> THEN <expression> | NULL]...
        [WHEN <last search condition> THEN
          <last expression> | NULL]
   [ELSE <expression> | NULL]
 END

_____________________________________________________________________________________________________________________________________________________________________
 id  name               department
 --  -----------------  ----------
 3   William Silverman  1
 4   Walt welinski      1<a name="429"></a><a name="IDX-221"></a>
 1   Carry Grant        2
 2   Michael Lancer     2
 5   Sally Fields       3
 6   Walt Frazier       3
 7   Melissa Gomez      4

_____________________________________________________________________________________________________________________________________________________________________
 id  name               dept_name
 --  -----------------  ------------------
 5   Sally Fields       Collections
 6   Walt Frazier       Collections
 7   Melissa Gomez      Customer Relations
 1   Carry Grant        Customer Service
 2   Michael Lancer     Customer Service
 3   William Silverman  Marketing
 4   Walt Welinski      Marketing<a name="430"></a><a name="IDX-222"></a>

_____________________________________________________________________________________________________________________________________________________________________
 SELECT id, name, department FROM employees
 ORDER BY department

_____________________________________________________________________________________________________________________________________________________________________
 SELECT id, name, total sales,
        CASE WHEN  total_sales <    10000) THEN 'Rookie'
             WHEN (total_sales >=   10000) AND
                  (total_saIes <   100000) THEN 'Associate'
             WHEN (total_sales >=  100000) AND
                  (total_sales <  1000000) THEN 'Manager'
             WHEN (total_sales >= 1000000) THEN
                                            'Vice President'
        END
 FROM employees
 ORDER BY name, id

_____________________________________________________________________________________________________________________________________________________________________
SELECT id, name, CASE department
                   WHEN 1 THEN 'Marketing'
                   WHEN 2 THEN 'Customer Service'
                   WHEN 3 THEN 'Collections'
                   WHEN 4 THEN 'Customer Relations'
                 END AS dept_name
FROM employees
ORDER BY dept_name

_____________________________________________________________________________________________________________________________________________________________________
SELECT id, name,
       CASE WHEN department = 1 THEN 'Marketing'
            WHEN department = 2 THEN 'Customer Service'
            WHEN department = 3 THEN 'Collections<sup>,</sup>
            WHEN department = 4 THEN 'Customer Relations'
       END AS dept_name
FROM employees
ORDER BY dept_name

_____________________________________________________________________________________________________________________________________________________________________
 UPDATE employees
   SET bonus_level =
     CASE WHEN  total_sales <      10000  THEN 'Rookie'
          WHEN (total_sales >=     10000) AND
               (total_sales <     100000) THEN 'Associate'
          WHEN (total_sales >=  100000) AND
               (total_sales <  1000000) THEN 'Manager'
          WHEN (total_sales >= 1000000) THEN 'Vice President'
     END

_____________________________________________________________________________________________________________________________________________________________________
 UPDATE employees
 SET commission =
       CASE bonus_level
         WHEN 'Rookie'         THEN total_sales * .01
         WHEN 'Associate'      THEN total_sales * .05
         WHEN 'Manager'        THEN total_sales * .15
         WHEN 'Vice President' THEN total_sales * .25
END

_____________________________________________________________________________________________________________________________________________________________________
  UPDATE payroll_records
  SET net_pay = CASE WHEN gross_pay >= health_ins_deduction
                       Then gross_pay - health_ins_deduction
                     ELSE gross_pay
                END

_____________________________________________________________________________________________________________________________________________________________________
 SELECT id, name, (sales_calls / sales_count) * 100.00
          AS closing_percentage
 FROM employees
 WHERE department = 1
 -

_____________________________________________________________________________________________________________________________________________________________________
 SELECT id, name, CASE WHEN sales_count > 0 THEN
                         sales_calls / sales_count * 100.00
                       ELSE 0
                  END AS closing_percentage
 FROM employees
 WHERE department = 1

_____________________________________________________________________________________________________________________________________________________________________
 UPDATE payroll_records
 SET net_pay = gross_pay - health_ins_deduction

_____________________________________________________________________________________________________________________________________________________________________
 ----- -------
 NULL, no match

_____________________________________________________________________________________________________________________________________________________________________
 NULLIF (<expression 1>, <expression 2>)

_____________________________________________________________________________________________________________________________________________________________________
 SELECT employee_id, first_name, last_name,
          NULLIF (SALES_QUOTA, -1) as Quota
 FROM employees

_____________________________________________________________________________________________________________________________________________________________________
 UPDATE employees SET office = NULLIF (office, 6)

_____________________________________________________________________________________________________________________________________________________________________
SELECT
  NULLIF ('match', 'match'), NULLIF ('no match', 'match')

_____________________________________________________________________________________________________________________________________________________________________
 COALESCE (<first expression>, <second expression>
             [,...<last expression>])

_____________________________________________________________________________________________________________________________________________________________________
 SELECT employee_id, first_name, last_name,
   COALESCE (appt_quota,
     (SELECT MlN(appt_quota) FROM employees), 0) AS quota
 FROM employees
 WHERE department = 'Marketing'

_____________________________________________________________________________________________________________________________________________________________________
  SELECT COUNT(*) FROM employees

_____________________________________________________________________________________________________________________________________________________________________
 SELECT COUNT (employee_id) FROM employees

_____________________________________________________________________________________________________________________________________________________________________
 SELECT COUNT(*) FROM employees

_____________________________________________________________________________________________________________________________________________________________________
 UPDATE managers SET employees_managed =
                      (SELECT COUNT(*) FROM employees
                       WHERE manager = managers.employee_id)

_____________________________________________________________________________________________________________________________________________________________________
  SELECT COUNT(first_name + last_name) FROM employees

_____________________________________________________________________________________________________________________________________________________________________
 COUNT([ALL | DISTINCT] <expression>)

_____________________________________________________________________________________________________________________________________________________________________
 employee_id  first_name  last_name  quota  manager
 -----------   ---------  ---------  -----  -------
 1             Lancer     Michael    5      NULL
 2             Michael    Lancer     5      1
 3             William    Silverman  NULL   2
 4             Walt       Wellinski  8      1
 5             William    Silverman  8      2
 6             NULL       Gomez      10     2
 7             Walt       Frazier    10     NULL

_____________________________________________________________________________________________________________________________________________________________________
 Row_Count  Last_Name_Count  Manager_Count
 ---------  ---------------  -------------
 7          7                5

_____________________________________________________________________________________________________________________________________________________________________
 SELECT COUNT(*) AS Row_Count,
        COUNT(last_name) AS Last_Name_Count,
        COUNT(manager) AS Manager_Count
 FROM employees<a name="444"></a><a name="IDX-230"></a>

_____________________________________________________________________________________________________________________________________________________________________
 SELECT COUNT(first_name) FROM employees WHERE manager = 2

_____________________________________________________________________________________________________________________________________________________________________
SELECT COUNT('constant value') FROM employees

_____________________________________________________________________________________________________________________________________________________________________
SELECT COUNT(first_name || last_name) FROM employees

_____________________________________________________________________________________________________________________________________________________________________
  employee_ID  first_name  last_name  quota  manager
  -----------  ----------  ---------  -----  -------
  1            Lancer      Michael    5      NULL
  2            Michael     Lancer     5      1
  3            William     Silverman  NULL   2
  4            Walt        Wellinski  8      1
  5            William     Silverman  8      2
  6            NULL        Gomez      10     2
  7            Walt        Frazier    10     NULL

_____________________________________________________________________________________________________________________________________________________________________
  SELECT COUNT(*) - COUNT(DISTINCT first_name + last_name)
    AS Dup_Name_And_NULL_Count
  FROM employees

_____________________________________________________________________________________________________________________________________________________________________
  SELECT COUNT(first_name + last_name) -
           COUNT(DISTINCT first_name + last_name)
    AS Dup_Name_Count
  FROM employees

_____________________________________________________________________________________________________________________________________________________________________
  Total_First_Names  Unique_First_Names
  -----------------  ------------------
  6                  4

_____________________________________________________________________________________________________________________________________________________________________
 SELECT COUNT(first_name) AS Total_First_Names,
        COUNT(DISTINCT first_name) AS Unique_First_Names
        COUNT(DISTINCT first_name + last_name) AS
          Unique_Full_Names
 FROM employees

_____________________________________________________________________________________________________________________________________________________________________
 SELECT COUNT(first_name) AS Total_First_Names,
        COUNT(DISTINCT first_name) AS Unique_First_Names
 FROM employees

_____________________________________________________________________________________________________________________________________________________________________
Total_First_Names  Unique_First_Names  Unique_FullNames
-----------------  ------------------  ----------------
6                  4                   5

_____________________________________________________________________________________________________________________________________________________________________
  cust_id  product_code  quantity
  -------  ------------  --------
  4        5             3
  4        6             3
  5        5             4

_____________________________________________________________________________________________________________________________________________________________________
  cust_id  product_code  quantity
  -------  ------------  --------
  NULL     NULL          10
  4        5             3
  4        6             3
  4        NULL          6
  5        5             4
  5        NULL          4

_____________________________________________________________________________________________________________________________________________________________________
  cust_id  product_code  quantity
  -------  ------------  --------
  NULL     NULL          10
  NULL     5             7
  NULL     6             3
  4        5             3
  4        6             3
  4        NULL          6
  5        5             4
  5        NULL          4

_____________________________________________________________________________________________________________________________________________________________________
 SELECT cust_id, product_code, SUM(qty) AS quantity
 FROM invoices WHERE cust_id IN (4, 5)
 GROUP BY cust_id, product_code
 ORDER BY cust_id<a name="450"></a><a name="IDX-234"></a>

_____________________________________________________________________________________________________________________________________________________________________
 SELECT cust_id, product_code, sum(qty) AS quantity
 FROM invoices WHERE cust_id IN (4, 5)
 GROUP BY cust_id, product_code
 WITH ROLLUP
 ORDER BY cust_id

_____________________________________________________________________________________________________________________________________________________________________
inv_date    inv_no  cust_id  product_code  qty
----------  ------  -------  ------------  ---
2000-01-01  1       1        1             1
2900-01-01  1       1        6             1
2000-01-01  1       1        3             1
2000-01-01  1       1        5             6
2000-03-01  2       9        1             5
2000-03-01  2       9        2             4
2000-02-01  3       7        2             4
2000-05-01  4       7        5             1
2000-05-01  4       7        4             3
2000-05-01  4       7        2             8
2000-01-01  5       4        5             3
2000-01-01  5       4        6             3
2000-06-01  6       1        5             4
2000-06-01  7       5        5             4

_____________________________________________________________________________________________________________________________________________________________________
SELECT cust_id, product_code, sum(qty) AS quantity
FROM invoices WHERE cust_id IN (4, 5)
GROUP BY cust_id, product_code
WITH CUBE
ORDER BY cust_id

_____________________________________________________________________________________________________________________________________________________________________
   SELECT MAX(inv_date) AS 'Date Last Inv for Cust 1'
   FROM invoices WHERE cust_id = 1<a name="453"></a><a name="IDX-236"></a>

_____________________________________________________________________________________________________________________________________________________________________
  MAX Item Cost
  -------------
  1844.5100

_____________________________________________________________________________________________________________________________________________________________________
 Date Last Inv for Cust 1
 ------------------------
 2000-06-01 00:00:00.000

_____________________________________________________________________________________________________________________________________________________________________
 SELECT MAX(item_cost) AS 'Max Item Cost' FROM products

_____________________________________________________________________________________________________________________________________________________________________
   Date First Inv for Cust 1
   -------------------------
   2000-01-01 00:00:00.000<a name="455"></a><a name="IDX-237"></a>

_____________________________________________________________________________________________________________________________________________________________________
   Min Item Cost
   -------------
   258.2300

_____________________________________________________________________________________________________________________________________________________________________
   SELECT MIN(inv_date) AS 'Date First Inv for Cust 1'
   FROM invoices WHERE cust_id = 1

_____________________________________________________________________________________________________________________________________________________________________
 SELECT MIN(item_cost) AS 'Min Item Cost' FROM products

_____________________________________________________________________________________________________________________________________________________________________
  SELECT SUM(sales_commission) AS 'Total Commissions'
  FROM employees<a name="457"></a><a name="IDX-238"></a>

_____________________________________________________________________________________________________________________________________________________________________
  Total Commissions
  -----------------
  1072105.7900

_____________________________________________________________________________________________________________________________________________________________________
 SELECT SUM(DISTINCT quantity_on_hand) FROM products

_____________________________________________________________________________________________________________________________________________________________________
 SELECT SUM(quantity_on_hand) FROM products

_____________________________________________________________________________________________________________________________________________________________________
 SUM([DISTINCT] <expression>)

_____________________________________________________________________________________________________________________________________________________________________
    SELECT AVG(age) FROM employees

_____________________________________________________________________________________________________________________________________________________________________
    SELECT AVG(sales_price) FROM products

_____________________________________________________________________________________________________________________________________________________________________
  AVG([DISTINCT] <expression>)

_____________________________________________________________________________________________________________________________________________________________________
  SELECT AVG(DISTINCT age) FROM employees

_____________________________________________________________________________________________________________________________________________________________________
  SELECT AVG(item_cost) FROM products

_____________________________________________________________________________________________________________________________________________________________________
  SELECT SUM(sales_price) / COUNT(*) FROM products

_____________________________________________________________________________________________________________________________________________________________________
 SELECT AVG(age) FROM employees

_____________________________________________________________________________________________________________________________________________________________________
  SELECT AVG(gross_sales) AS 'Avg Gross Sales' FROM salesreps

_____________________________________________________________________________________________________________________________________________________________________
  SELECT AVG(quota) AS 'Avg Quota for Above Avg Sales',
         AVG(gross_sales) AS 'Avg Above Avg Sales'
  FROM salesreps
  WHERE gross_sales > (SELECT AVG(gross_sales)
                       FROM salesreps)<a name="462"></a><a name="IDX-241"></a>

_____________________________________________________________________________________________________________________________________________________________________
 SELECT AVG(gross_sales) AS 'Avg NV Gross Sales'
 FROM salesreps
 WHERE sales_territory = 'NV'

_____________________________________________________________________________________________________________________________________________________________________
 SELECT dept, COUNT(*) FROM employees

_____________________________________________________________________________________________________________________________________________________________________
SELECT dept, COUNT(*) FROM employees GROUP BY dept

_____________________________________________________________________________________________________________________________________________________________________
     SUM (appt_count) - SUM(appt_quota)<a name="467"></a><a name="IDX-244"></a>

_____________________________________________________________________________________________________________________________________________________________________
    emp_id  appt_quota  appt_count  sales_count  sales_amount
    ------  ----------  ----------  -----------  ------------
    1       2           4           2            10725.0000
    2       5           6           5            25625.0000
    3       NULL        2           0            0.0000
    4       NULL        5           0            0.0000
    5       7           9           7            35259.0000
    6       4           4           4            20748.0000
    7       9           10          9            45589.0000<a name="466"></a><a name="IDX-243"></a>

_____________________________________________________________________________________________________________________________________________________________________
  Rows Emps Quotas Sum Quotas Sum Sales Avg Quota Avg Sales
  ---- ---- ------ ---------- --- ----- --- ----- ---------
  7    7    5      27         27        5         3

_____________________________________________________________________________________________________________________________________________________________________
  SELECT COUNT(*) AS 'Rows', COUNT(emp_id) AS 'Emps',
         COUNT(appt_quota) AS 'Quotas',
         SUM(appt_quota)   AS 'Sum Quotas',
         SUM(sales_count)  AS 'Sum Sales',
         AVG(appt_quota)   AS 'Avg Quota',
         AVG(sales_count)  AS 'Avg Sales'
  FROM employees

_____________________________________________________________________________________________________________________________________________________________________
  SUM (appt_count - appt_quota)

_____________________________________________________________________________________________________________________________________________________________________
  SUM Appts Sum Quotas Sum of Difference Difference of Sums
  --------- ---------- ----------------- ------------------
  40        27         6                 13

_____________________________________________________________________________________________________________________________________________________________________
 SELECT
   SUM(appt_count) AS 'Sum Appts',
   SUM(appt_quota) AS 'Sum Quotas',
   SUM(appt_count - appt_quota) AS 'Sum of Difference'
   SUM(appt_count) - SUM(appt_quota) AS 'Difference of Sums'
 FROM employees

_____________________________________________________________________________________________________________________________________________________________________
 SUM (appt_count - appt_quota)

_____________________________________________________________________________________________________________________________________________________________________
 SUM (appt_count) - SUM(appt_quota)

_____________________________________________________________________________________________________________________________________________________________________
 SELECT emp_id, first_name, last_name FROM employees
 WHERE dept = 'Marketing'
   AND employment_status = 'Active'
   AND supervisor IS NULL

_____________________________________________________________________________________________________________________________________________________________________
 SELECT emp_id, first_name, last_name FROM employees
 WHERE dept = 'Marketing'

_____________________________________________________________________________________________________________________________________________________________________
SELECT emp_id, first_name, last_name FROM employees
WHERE dept = 'Marketing'
  AND employment_status = 'Active'

_____________________________________________________________________________________________________________________________________________________________________
  NOT  TRUE    FALSE   NULL
       --------------------
       FALSE   TRUE    NULL

_____________________________________________________________________________________________________________________________________________________________________
  SELECT first_name, last_name FROM employees
  WHERE NOT age > 50

_____________________________________________________________________________________________________________________________________________________________________
  SELECT vin_number, make, model, year, price, color
  FROM AUTO_INVENTORY
  WHERE color IN ('Orange', 'Brown', 'Chartreuse')

_____________________________________________________________________________________________________________________________________________________________________
  SELECT vin_number, make, model, year, price, color
  FROM AUTO_INVENTORY
  WHERE color NOT IN ('Red', 'Green', 'Blue')

_____________________________________________________________________________________________________________________________________________________________________
SELECT first_name, last_name FROM employees
WHERE age <= 50

_____________________________________________________________________________________________________________________________________________________________________
 SELECT student_id, first_name, last_name FROM students
 WHERE major = 'Chemistry'

_____________________________________________________________________________________________________________________________________________________________________
 SELECT student_id, first_name, last_name, major
 FROM students
 WHERE major = 'Chemistry' OR major = 'Biology'
 OR major = 'Mathematics'

_____________________________________________________________________________________________________________________________________________________________________
    SELECT
      product_code, description, cost, vendor, serial_number
    FROM inventory, products
    WHERE inventory.product_code = products.product_code<a name="477"></a><a name="IDX-250"></a>

_____________________________________________________________________________________________________________________________________________________________________
UPDATE products SET sales_price = sales_price * 1.2

_____________________________________________________________________________________________________________________________________________________________________
BEGIN TRANSACTION
MOD 1...
MOD 2...
COMMIT TRANSACTION

BEGIN TRANSACTION
MOD 3...
MOD 4...<a name="486"></a><a name="IDX-255"></a>

_____________________________________________________________________________________________________________________________________________________________________
BEGIN TRANSACTION
MOD 1...
MOD 2...
MOD 3...
MOD 4...

_____________________________________________________________________________________________________________________________________________________________________
UPDATE products SET sales_price = sales_price * 1.2

_____________________________________________________________________________________________________________________________________________________________________
BEGIN TRANSACTION

_____________________________________________________________________________________________________________________________________________________________________
DELETE FROM employees

_____________________________________________________________________________________________________________________________________________________________________
MOD 1

BEGIN TRANSACTION
MOD 2
MOD 3
MOD 4

ROLLBACK TRANSACTION

_____________________________________________________________________________________________________________________________________________________________________
ROLLBACK TRANSACTION

_____________________________________________________________________________________________________________________________________________________________________
BEGIN TRANSACTION
CREATE TABLE trans_table
  (row_number SMALLINT, description VARCHAR(35))
INSERT INTO trans_table VALUES (1, 'Inserted Row 1')
INSERT INTO trans_table VALUES (2, 'Inserted Row 2')
SAVE TRANSACTION savepoint_1

DELETE FROM trans_table WHERE row_number = 2
INSERT INTO trans_table VALUES (3, 'Inserted Row 3')
INSERT INTO trans_table VALUES (4, 'Inserted Row 4')
SAVE TRANSACTION savepoint_2
DELETE FROM trans_table WHERE row_number = 1
DELETE FROM trans_table WHERE row_number = 3
INSERT INTO trans_table VALUES (5, 'Inserted Row 5')
UPDATE trans_table SET description = 'All Rows Updated'

ROLLBACK TRANSACTION savepoint_2

UPDATE trans_table
  SET description = 'Row 1 After ROLLBACK to 2'
DELETE trans_table WHERE row_number = 4

COMMIT TRANSACTION

_____________________________________________________________________________________________________________________________________________________________________
row_number  description
----------  -------------------------
1           Row 1 After ROLLBACK to 2
3           Inserted Row 3<a name="492"></a><a name="IDX-259"></a>

_____________________________________________________________________________________________________________________________________________________________________
SAVE TRANSACTION savepoint_2

_____________________________________________________________________________________________________________________________________________________________________
SELECT * FROM trans_table

_____________________________________________________________________________________________________________________________________________________________________
    COMMIT TRANSACTION insert_trans

_____________________________________________________________________________________________________________________________________________________________________
 EXEC SP_Insert_Row 3, 'Inserted Row 3'

_____________________________________________________________________________________________________________________________________________________________________
CREATE PROCEDURE SP_Insert_Row
  @row_number SMALLINT, @description CHAR(35)
AS BEGIN TRANSACTION insert_trans
     INSERT INTO trans_table
       VALUES (@row_number, @description)
   COMMIT TRANSACTION insert_trans

_____________________________________________________________________________________________________________________________________________________________________
CREATE TABLE trans_table
  (row_number SMALLINT, description VARCHAR(35))

BEGIN TRANSACTION
  INSERT INTO trans_table VALUES (1, 'Inserted Row 1')
  INSERT INTO trans_table VALUES (2, 'Inserted Row 2')
  EXEC SP_Insert_Row 3, 'Inserted Row 3'
  EXEC SP_Insert_Row 4, 'Inserted Row 4'
ROLLBACK

_____________________________________________________________________________________________________________________________________________________________________
EXEC SP_Insert_Row 3, 'Inserted Row 3'

BEGIN TRANSACTION
  INSERT INTO trans_table VALUES (1, 'Inserted Row 1')
  INSERT INTO trans_table VALUES (2, 'Inserted Row 2')
  EXEC SP_Insert_Row 4, 'Inserted Row 4'
ROLLBACK

_____________________________________________________________________________________________________________________________________________________________________
row_number  description
----------  --------------
3           Inserted Row 3

_____________________________________________________________________________________________________________________________________________________________________
 ISQL /USER=KONRAD / PASSWORD=KING

_____________________________________________________________________________________________________________________________________________________________________
 SQLPLUS KONRAD/KING

_____________________________________________________________________________________________________________________________________________________________________
 GRANT <privilege list> [(<column name list>)]
 ON <object name>
 TO <name list> [WITH GRANT OPTION]

_____________________________________________________________________________________________________________________________________________________________________
 GRANT SELECT, INSERT ON employees TO konrad<a name="542"></a><a name="IDX-286"></a>

_____________________________________________________________________________________________________________________________________________________________________
 GRANT UPDATE (first_name, last_name, address)
 ON employees TO sally

_____________________________________________________________________________________________________________________________________________________________________
GRANT INSERT, DELETE ON tips TO sqltips_users

_____________________________________________________________________________________________________________________________________________________________________
 GRANT ALL PRIVILEGES ON employees TO sally

_____________________________________________________________________________________________________________________________________________________________________
 GRANT SELECT ON vw_vegas_employees TO mary<a name="544"></a><a name="IDX-287"></a>

_____________________________________________________________________________________________________________________________________________________________________
 GRANT SELECT ON vw_vegas_employees
 TO mary WITH GRANT OPTION

_____________________________________________________________________________________________________________________________________________________________________
 GRANT SELECT, INSERT, REFERENCES ON employees TO frank

_____________________________________________________________________________________________________________________________________________________________________
 GRANT SELECT, INSERT, REFERENCES ON employees TO frank

_____________________________________________________________________________________________________________________________________________________________________
 GRANT SELECT, INSERT, UPDATE ON employees TO frank

_____________________________________________________________________________________________________________________________________________________________________
 REVOKE ALL PRIVILEGES ON employees FROM frank

_____________________________________________________________________________________________________________________________________________________________________
REVOKE [GRANT OPTION FOR]<privilege list>[(<column list>)]
ON <object name>
FROM <name list> [CASCADE | RESTRICT]<a name="546"></a><a name="IDX-288"></a>

_____________________________________________________________________________________________________________________________________________________________________
REVOKE INSERT, REFERENCES ON employees FROM frank

_____________________________________________________________________________________________________________________________________________________________________
 GRANT SELECT ON employees TO Scott

_____________________________________________________________________________________________________________________________________________________________________
 GRANT SELECT, INSERT ON employees TO frank
 WITH GRANT OPTION<a name="548"></a><a name="IDX-289"></a>

_____________________________________________________________________________________________________________________________________________________________________
 GRANT SELECT, INSERT ON employees to SUE WITH GRANT OPTION.

_____________________________________________________________________________________________________________________________________________________________________
 REVOKE INSERT ON employees FROM frank CASCADE

_____________________________________________________________________________________________________________________________________________________________________
 REVOKE INSERT ON employees FROM frank RESTRICT

_____________________________________________________________________________________________________________________________________________________________________
 GRANT INSERT, UPDATE ON invoices TO sue
 GRANT SELECT, INSERT, UPDATE ON invoices TO frank<a name="551"></a><a name="IDX-291"></a>

_____________________________________________________________________________________________________________________________________________________________________
 GRANT SELECT, INSERT, UPDATE, DELETE ON invoices
 TO konrad, mary WITH GRANT OPTION

_____________________________________________________________________________________________________________________________________________________________________
 REVOKE GRANT OPTION FOR INSERT ON invoices
 FROM konrad CASCADE

_____________________________________________________________________________________________________________________________________________________________________
 REVOKE GRANT OPTION FOR INSERT ON invoices
 FROM konrad CASCADE

_____________________________________________________________________________________________________________________________________________________________________
 GRANT SELECT ON employees TO konrad

_____________________________________________________________________________________________________________________________________________________________________
 GRANT SELECT ON invoices TO frank WITH GRANT OPTION

_____________________________________________________________________________________________________________________________________________________________________
 GRANT SELECT ON invoices TO frank WITH GRANT OPTION

_____________________________________________________________________________________________________________________________________________________________________
 GRANT SELECT ON vw_lv_employees TO mary, sue, payroll_users

_____________________________________________________________________________________________________________________________________________________________________
 REVOKE [GRANT OPTION FOR] SELECT | (<column name list>)
 ON <table name> | <view name>
 FROM <user and/or Role name list> [CASCADE]

_____________________________________________________________________________________________________________________________________________________________________
 REVOKE GRANT OPTION FOR SELECT ON invoices
 FROM frank CASCADE

_____________________________________________________________________________________________________________________________________________________________________
 REVOKE SELECT ON invoices FROM frank CASCADE

_____________________________________________________________________________________________________________________________________________________________________
 REVOKE SELECT ON invoices FROM sue

_____________________________________________________________________________________________________________________________________________________________________
 REVOKE SELECT ON vw_lv_employees FROM mary, payroll_users

_____________________________________________________________________________________________________________________________________________________________________
GRANT SELECT [(<column list>) ]
ON <table name> | <view name>
TO <user and/or Role name list> [WITH GRANT OPTION]<a name="553"></a><a name="IDX-292"></a>

_____________________________________________________________________________________________________________________________________________________________________
REVOKE SELECT ON invoices FROM sue

_____________________________________________________________________________________________________________________________________________________________________
GRANT SELECT (id, name, health_plan_selection,
              health_plan_cost, dental_plan_selection,
              dental_plan_cost,
              retirement_plan_participation_pcnt,
              retirement_plan_vesting_date)
ON employees TO paul

_____________________________________________________________________________________________________________________________________________________________________
SELECT id, name, salary FROM employees

_____________________________________________________________________________________________________________________________________________________________________
Server: Msg 230, Level 14, State 1, Line 1
SELECT permission denied on column 'salary' of object
'employees', database 'SQLTips', owner 'dbo'.

_____________________________________________________________________________________________________________________________________________________________________
 GRANT INSERT ON <table name> | <view name>
 TO <user and/or Role name list> [WITH GRANT OPTION]

_____________________________________________________________________________________________________________________________________________________________________
 GRANT INSERT ON invoices TO sally

_____________________________________________________________________________________________________________________________________________________________________
 GRANT INSERT ON products TO gary WITH GRANT OPTION

_____________________________________________________________________________________________________________________________________________________________________
 GRANT INSERT ON VW_KEY_CUST_ORDERS TO frank

_____________________________________________________________________________________________________________________________________________________________________
 GRANT INSERT ON vw_key_cust_orders
 TO leonard, mark, sales_managers

_____________________________________________________________________________________________________________________________________________________________________
 INSERT INTO order VALUES ('1/1/2001', 1, 8, 6, 258.25, 20)

_____________________________________________________________________________________________________________________________________________________________________
 INSERT INTO vw_key_cust_orders
   VALUES ('1/1/2001', 1, 8, 6, 258.25, 20)

_____________________________________________________________________________________________________________________________________________________________________
REVOKE INSERT ON invoices FROM sally

_____________________________________________________________________________________________________________________________________________________________________
 GRANT UPDATE (item_description, item_cost) ON inventory
 TO karen

_____________________________________________________________________________________________________________________________________________________________________
 GRANT UPDATE [(<column list>)]
 ON <table name> | <view name>
 TO <user and/or Role name list> [WITH GRANT OPTION]

_____________________________________________________________________________________________________________________________________________________________________
 GRANT UPDATE ON  inventory TO karen

_____________________________________________________________________________________________________________________________________________________________________
 GRANT UPDATE ON invoices TO kris

_____________________________________________________________________________________________________________________________________________________________________
 GRANT UPDATE ON products TO frank WITH GRANT OPTION

_____________________________________________________________________________________________________________________________________________________________________
 GRANT UPDATE ON VW_KEY_CUST_ORDERS TO david

_____________________________________________________________________________________________________________________________________________________________________
 GRANT UPDATE ON vw_lv_inventory
 TO scott, harmon, lv_store_managers

_____________________________________________________________________________________________________________________________________________________________________
 REVOKE UPDATE ON invoices FROM sue<a name="563"></a><a name="IDX-299"></a>

_____________________________________________________________________________________________________________________________________________________________________
 UPDATE ORDERS SET ship_date = '07/11/2001'
 WHERE invoice_date = '07/10/200' AND ship<u class="underline">_</u>date IS NULL

_____________________________________________________________________________________________________________________________________________________________________
 UPDATE vw_key_cust_orders SET ship_date = '07/11/2001'
 WHERE invoice_date = '07/10/200' AND ship_date IS NULL

_____________________________________________________________________________________________________________________________________________________________________
REVOKE UPDATE (invoice_date, cust_id, item_cost)
ON invoices FROM sue

_____________________________________________________________________________________________________________________________________________________________________
REVOKE UPDATE ON  invoices  FROM sue

_____________________________________________________________________________________________________________________________________________________________________
 GRANT REFERENCES (stock_symbol, security_cussip) ON
 takeover_list_table TO karen

_____________________________________________________________________________________________________________________________________________________________________
 GRANT REFERENCES [(<column list>)] ON <table name>
 TO <user and/or Role name list> [WITH GRANT OPTION]

_____________________________________________________________________________________________________________________________________________________________________
 GRANT REFERENCES ON customers TO james WITH GRANT OPTION

_____________________________________________________________________________________________________________________________________________________________________
 GRANT REFERENCES ON employees TO rob

_____________________________________________________________________________________________________________________________________________________________________
 REVOKE REFERENCES (cust_ID, phone_number) ON customers
 FROM sally

_____________________________________________________________________________________________________________________________________________________________________
 REVOKE REFERENCES ON customers FROM sally

_____________________________________________________________________________________________________________________________________________________________________
 REVOKE REFERENCES ON employees FROM jerry

_____________________________________________________________________________________________________________________________________________________________________
CREATE TABLE my_takeover_stocks
  (symbol VARCHAR(10)
   CONSTRAINT fk_takeover_targets FOREIGN KEY(symbol)
   REFERENCES takeover_stocks_list(stock_symbol))<a name="565"></a><a name="IDX-300"></a>

_____________________________________________________________________________________________________________________________________________________________________
Server: Msg 547, Level 16, State1, Line 1
INSERT statement  conflicted with COLUMN FOREIGN KEY
  constraint 'fk_takeover_stocks'. The conflict occurred in
  database 'SQLTips', table 'takeover_stocks_list', column
  'stock_symbol'.

The statement has been terminated.

_____________________________________________________________________________________________________________________________________________________________________
 DELETE FROM ORDERS WHERE shipped_date < '01/01/1999'<a name="570"></a><a name="IDX-304"></a>

_____________________________________________________________________________________________________________________________________________________________________
 DELETE FROM vw_shipped_orders
 WHERE shipped_date < '01/01/1999'

_____________________________________________________________________________________________________________________________________________________________________
 GRANT DELETE ON <table name> | <view name>
 TO <user and/or Role name list> [WITH GRANT OPTION]

_____________________________________________________________________________________________________________________________________________________________________
 GRANT DELETE ON employees TO scott WITH GRANT OPTION

_____________________________________________________________________________________________________________________________________________________________________
 GRANT DELETE ON invoices TO jerry<a name="569"></a><a name="IDX-303"></a>

_____________________________________________________________________________________________________________________________________________________________________
 GRANT DELETE ON vw_shipped_orders TO david

_____________________________________________________________________________________________________________________________________________________________________
 GRANT DELETE ON vw_shipped_orders
 TO sally, susan, shipping_receiving_clerks

_____________________________________________________________________________________________________________________________________________________________________
 REVOKE DELETE ON customers FROM walter

_____________________________________________________________________________________________________________________________________________________________________
DELETE  FROM  invoices WHERE  invoice_date <   01/01/1900

_____________________________________________________________________________________________________________________________________________________________________
DELETE FROM employees

_____________________________________________________________________________________________________________________________________________________________________
Server: Msg 229, Level 14, State 5, Line 1
SELECT permission denied on object 'invoices', database
  'SQLTips', owner 'dbo'.

_____________________________________________________________________________________________________________________________________________________________________
 GRANT ALL (employee_id, first_name, last_name)
 ON employees TO rodger, sue, mary

_____________________________________________________________________________________________________________________________________________________________________
 GRANT ALL [PRIVILEGES][(<column list>)] ON <table name>
 TO <user and/or Role name list> (WITH GRANT OPTION]

_____________________________________________________________________________________________________________________________________________________________________
 GRANT ALL ON employees TO sue

_____________________________________________________________________________________________________________________________________________________________________
 GRANT SELECT, INSERT, UPDATE, DELETE ON invoices TO sue
 GRANT SELECT, INSERT, DELETE ON invoices TO frank
 GRANT SELECT ON invoices TO konrad

_____________________________________________________________________________________________________________________________________________________________________
 GRANT SELECT, INSERT, UPDATE, DELETE, REFERENCES
 ON employees TO sue

_____________________________________________________________________________________________________________________________________________________________________
 GRANT SELECT, UPDATE, REFERENCES
   (employee_id, first_name, last_name)
 ON employees TO rodger, sue, mary
 GRANT INSERT, DELETE ON employees TO rodger, sue, mary

_____________________________________________________________________________________________________________________________________________________________________
 REVOKE ALL ON employees FROM sue

_____________________________________________________________________________________________________________________________________________________________________
 REVOKE ALL ON invoices FROM sue, frank, konrad

_____________________________________________________________________________________________________________________________________________________________________
 REVOKE SELECT, INSERT, UPDATE, DELETE ON invoices FROM sue
 REVOKE SELECT, INSERT, DELETE ON invoices FROM frank
 REVOKE SELECT ON invoices FROM konrad

_____________________________________________________________________________________________________________________________________________________________________
 Server: Msg 4613, Level 16, State 1, Line 1
 Grantor does not have GRANT permission.

_____________________________________________________________________________________________________________________________________________________________________
REVOKE ALL ON customers FROM sue

_____________________________________________________________________________________________________________________________________________________________________
 CREATE VIEW vw_new_marketing_rep_template AS
 (SELECT id, first_name, last_name, address FROM employees)<a name="576"></a><a name="IDX-308"></a>

_____________________________________________________________________________________________________________________________________________________________________
 CREATE VIEW vw_new_marketing_rep_template AS
 (SELECT id, first_name, last_name, ssan, address
   FROM employees)

_____________________________________________________________________________________________________________________________________________________________________
 GRANT INSERT (id, first_name, last_name, ssan, address)
 ON employees TO mike

_____________________________________________________________________________________________________________________________________________________________________
 GRANT INSERT ON vw_new_marketing_rep_template TO mike

_____________________________________________________________________________________________________________________________________________________________________
 INSERT INTO vw_new_marketing_rep_template VALUES
   (1, 'Konrad', 'King', 'SSAN', '765 E. Eldorado Lane')

_____________________________________________________________________________________________________________________________________________________________________
CREATE TABLE employees
  (id              INTEGER PRIMARY KEY,
   first_name      VARCHAR(25) NOT NULL,
   last_name       VARCHAR(30) NOT NULL,<a name="575"></a><a name="IDX-307"></a>
   ssan            CHAR(11) NOT NULL,
   address         VARCHAR(50),
   manager         SMALLINT,
   quota           SMALLINT,
   hourly_rate     MONEY,
   commission_rate MONEY)

_____________________________________________________________________________________________________________________________________________________________________
 CREATE VIEW vw_marketing_reps AS
 (SELECT id, first_name, last_name, ssan, address, manager,
   quota FROM employees)

_____________________________________________________________________________________________________________________________________________________________________
 GRANT SELECT ON vw_marketing_reps TO marketing_employees

_____________________________________________________________________________________________________________________________________________________________________
 CREATE VIEW vw_backorders_180 AS
   (SELECT * FROM orders WHERE date_shipped IS NULL AND
                          (GETDATE() - order_date) > 180)

_____________________________________________________________________________________________________________________________________________________________________
 DELETE FROM vw_backorders_180

_____________________________________________________________________________________________________________________________________________________________________
 GRANT DELETE ON vw_backorders_180 TO frank

_____________________________________________________________________________________________________________________________________________________________________
CREATE VIEW vw_office1_employees AS
  (SELECT * FROM employees WHERE office = 1)
CREATE VIEW wv_office1_employees AS
  (SELECT * FROM employees WHERE office = 2)

_____________________________________________________________________________________________________________________________________________________________________
CREATE VIEW vw_office1_employees AS
  (SELECT first_name, last_name, address
     FROM employees WHERE office = 1)

_____________________________________________________________________________________________________________________________________________________________________
GRANT SELECT ON vw_office1_employees TO office1_managers
GRANT SELECT ON vw_office2_employees TO office2_managers<a name="580"></a><a name="IDX-310"></a>

_____________________________________________________________________________________________________________________________________________________________________
GRANT UPDATE (first_name, last_name, address)
ON employees TO sales_office_managers

_____________________________________________________________________________________________________________________________________________________________________
GRANT UPDATE (first_name, last_name, address)
ON vw_office1_employees TO office1_managers
GRANT UPDATE (first_name, last_name, address)
ON vw_office2_employees TO office2_managers

_____________________________________________________________________________________________________________________________________________________________________
SELECT date_called, call_time, hangup_time, dispo,
  called_by
FROM call_history WHERE phone_number = 2631052

_____________________________________________________________________________________________________________________________________________________________________
 CREATE INDEX date_index
 ON call_history (date_called, call_time, phone_number)

_____________________________________________________________________________________________________________________________________________________________________
 SELECT * FROM call_history WHERE phone_number = 2631070<a name="588"></a><a name="IDX-314"></a>

_____________________________________________________________________________________________________________________________________________________________________
 SELECT * FROM call_history
 WHERE called_by = 'RRH' AND phone_number = 2631056

_____________________________________________________________________________________________________________________________________________________________________
CREATE call_history
  (phone_number INTEGER,
   date_called  DATETIME,
   call_time    SMALLINT,
   hangup_time  SMALLINT,
   disposition  VARCHAR(4),
   called_by    CHAR(3))

_____________________________________________________________________________________________________________________________________________________________________
CREATE INDEX caller_index
ON call_history (called_by, date_called)

_____________________________________________________________________________________________________________________________________________________________________
SELECT * FROM call_history INDEX=caller_index
WHERE date_called BETWEEN '01/01/2000' AND '01/31/2000'

_____________________________________________________________________________________________________________________________________________________________________
 CREATE [UNIQUE] INDEX <index name> ON <table name>
   (<column name> [ASC | DESC] [,...<last column name>
    [ASC | DESC]])

_____________________________________________________________________________________________________________________________________________________________________
 CREATE INDEX date_index ON INVOICES (inv_date, inv_no)

_____________________________________________________________________________________________________________________________________________________________________
 CREATE UNIQUE INDEX date_index
 ON INVOICES (inv_date, inv_no)<a name="591"></a><a name="IDX-316"></a>

_____________________________________________________________________________________________________________________________________________________________________
Server: Msg 2601, Level 14, State 3, Line 1
Cannot insert duplicate key row in object 'invoices' with
  unique index 'date_index'.
The statement has been terminated.

_____________________________________________________________________________________________________________________________________________________________________
 CREATE [UNIQUE] [CLUSTERED I NONCLUSTERED]
 INDEX <index name> ON <table name>
   (<column name>[,...<last column name>])
 [WITH [DROP_EXISTING]
       [[,] FILLFACTOR = <% fill factor>]
       [[,] PAD_INDEX]
       [[,] IGNORE_DUP_KEY]<a name="593"></a><a name="IDX-317"></a>
       [[,]STATISTICS_NONRECOMPUTE] ]
 [ON <filegroup name>]

_____________________________________________________________________________________________________________________________________________________________________
 CREATE [UNIQUE] INDEX <index name> ON <table name>
   (<column name> [ASC | DESC][,...<last column name>
    [ASC | DESC]])

_____________________________________________________________________________________________________________________________________________________________________
CREATE INDEX product_index ON invoices
  (product_code, inv_date, inv_no) ON FILEGROUP2_D
CREATE INDEX date_index ON invoices
  (inv_date, inv_no) ON FILEGROUP3_E

_____________________________________________________________________________________________________________________________________________________________________
 SELECT SUM(qty) FROM invoices WHERE product_code = 4

_____________________________________________________________________________________________________________________________________________________________________
 DROP INDEX <index name>

_____________________________________________________________________________________________________________________________________________________________________
 DROP INDEX <table name>.<index name><a name="612"></a><a name="IDX-324"></a>

_____________________________________________________________________________________________________________________________________________________________________
 DROP INDEX invoices.product_code_index

_____________________________________________________________________________________________________________________________________________________________________
CREATE CLUSTERED INDEX cl_product_code_index
ON invoices (product_code, inv_date)

_____________________________________________________________________________________________________________________________________________________________________
 CREATE TABLE employee
   (emp_num SMALLINT,
    name    VARCHAR(30),
    address VARCHAR(50),
    payrate MONEY)

_____________________________________________________________________________________________________________________________________________________________________
 emp_num name          address               payrate
 ------- -----------   --------------------  -------
 1       Konrad King   765 E. Eldorado Lane  10.25
 2       Karen King    765 E. Eldorado Lane  25.75
 3       John Smith    2234 State Street     12.35
 4       Harry  Smith  2258 Hilly Way        10.25
 5       John Smith    589 Hillcrest Drive   32.58

_____________________________________________________________________________________________________________________________________________________________________
 SELECT * FROM <table name> WHERE <key column> = <key value>

_____________________________________________________________________________________________________________________________________________________________________
 SELECT * FROM <table name>
 WHERE <first key column>  = <first column key value>  AND
       <second key column> = <second column key value>

_____________________________________________________________________________________________________________________________________________________________________
 SELECT * FROM EMPLOYEE WHERE emp_num = 3 AND office = 'TX'

_____________________________________________________________________________________________________________________________________________________________________
 SELECT * FROM EMPLOYEE WHERE emp_num = 3

_____________________________________________________________________________________________________________________________________________________________________
emp_num Office  name         address               payrate
------- ------  -----------  --------------------  -------
1       LV      Konrad King  765 E. Eldorado Lane  10.25
2       TX      Karen King   765 E. Eldorado Lane  25.75
3       LV      John Smith   2234 State Street     12.35
4       LV      Harry Smith  2258 Hilly Way        10.25
5       TX      John Smith   589 Hillcrest Drive   32.58
2       LV      Sally Field  215 State Street      25.75
4       TX      Wally Wells  7810 Greenwood Ave    17.58
3       TX      Harry Smith  258 Hilly Way         22.58

_____________________________________________________________________________________________________________________________________________________________________
 CREATE RULE validate_grades
 AS @grade in ('A+', 'A', 'A-', 'B+', 'B', 'B-', 'C+', 'C',
               'C-', 'D+', 'D', 'D-', 'F', 'I', 'WD')

_____________________________________________________________________________________________________________________________________________________________________
 EXEC sp_bindrule
        'validate_grades', 'student_grades.course_grade'

_____________________________________________________________________________________________________________________________________________________________________
 INSERT INTO student_grades VALUES (1001, 'HIST-101', 'A+')

_____________________________________________________________________________________________________________________________________________________________________
 INSERT INTO student_grades VALUES (1001, 'HIST-101', 'NA')

_____________________________________________________________________________________________________________________________________________________________________
 Server: MSG 513, Level 16, State 1, Line 1
 A column insert or update conflicts with a rule imposed by
   a previous CREATE RULE statement.
 The statement was terminated.

 The conflict occurred in database 'SQLTips', table
   'student_grades', column 'course_grade'.
 The statement has been terminated.

_____________________________________________________________________________________________________________________________________________________________________
CREATE TABLE student_grades
  (student_id   SMALLINT,
   course_id    VARCHAR(20),
   course_grade CHAR(2))

_____________________________________________________________________________________________________________________________________________________________________
<constraint definition> ::=
  [CONSTRAINT <constraint name>]
    CHECK (VALUE <conditional expression>)

_____________________________________________________________________________________________________________________________________________________________________
CREATE DOMAIN <domain name> AS <data type>
[DEFAULT <default value>]
[<first constraint definition>
  ...<last constraint definition>]

_____________________________________________________________________________________________________________________________________________________________________
CREATE DOMAIN valid_empnums
CHECK (VALUE BETWEEN 1000 AND 1999)<a name="640"></a><a name="IDX-338"></a>

_____________________________________________________________________________________________________________________________________________________________________
CREATE TABLE employees
  (employee_num INTEGER,
   name         CHAR(30),
   address      CHAR(50))

_____________________________________________________________________________________________________________________________________________________________________
CREATE TABLE employees
  (employee_num valid_empnums,
   name         CHAR(30),
   address      CHAR(50))

_____________________________________________________________________________________________________________________________________________________________________
EXEC sp_addtype valid_empnums, 'SMALLINT'
CREATE RULE validate_empnum
AS @employee_number BETWEEN 1000 AND 1999
EXEC sp_bindrule 'validate_empnum', 'valid_empnums'

_____________________________________________________________________________________________________________________________________________________________________
 CREATE TABLE employees
   (emp_num      SMALLINT,
    office       CHAR(2),
    name         VARCHAR(30),
    address      VARCHAR(50),
    payrate      MONEY,
    PRIMARY KEY (emp_num, office))<a name="643"></a><a name="IDX-340"></a>

_____________________________________________________________________________________________________________________________________________________________________
 CREATE TABLE employees
   (emp_num      SMALLINT,
    office       CHAR(2),
    name         VARCHAR(50),
    address      VARCHAR(50),
    payrate      MONEY,
    PRIMARY KEY  (emp_num))

_____________________________________________________________________________________________________________________________________________________________________
 CREATE TABLE employees
   (emp_num  SMALLINT UNIQUE NOT NULL,
    office   CHAR(2),
    name     VARCHAR(50),
    address  VARCHAR(50),
    payrate  MONEY)

_____________________________________________________________________________________________________________________________________________________________________
 CREATE TABLE employees
   (emp_num SMALLINT UNIQUE NOT NULL,
    office  CHAR(2) UNIQUE NOT NULL,
    name    VARCHAR(50),
    address VARCHAR(50),
    payrate MONEY)

_____________________________________________________________________________________________________________________________________________________________________
emp_num Office  name         address               payrate
------- ------  -----------  --------------------  -------
1       LV      Konrad King  765 E. Eldorado Lane  10.25
2       TX      Karen King   765 E. Eldorado Lane  25.75
3       LV      John Smith   2234 State Street     12.35
4       LV      Harry Smith  2258 Hilly Way        10.25
5       TX      John Smith   589 Hillcrest Drive   32.58
2       LV      Sally Field  215 State Street      25.75
4       TX      Wally Wells  7810 Greenwood Ave    17.58
3       TX      Harry Smith  258 Hilly Way         22.58

_____________________________________________________________________________________________________________________________________________________________________
 CREATE TABLE call_history
   (phone_number CHAR(7),
    called_by    CHAR(3),<a name="646"></a><a name="IDX-342"></a>
    date_called  DATETIME,
    call_time    SMALLINT,
    hangup_time  SMALLINT,
    disposition  CHAR(4),
    PRIMARY KEY (phone_number, called_by, date_called,
                 hangup_time))

_____________________________________________________________________________________________________________________________________________________________________
 CREATE TABLE employees
   (emp_num      SMALLINT,
    office       CHAR(2),
    name         VARCHAR(30),
    address      VARCHAR(50),
    payrate      MONEY,
    PRIMARY KEY (emp_num, office))

_____________________________________________________________________________________________________________________________________________________________________
 SELECT * FROM employees WHERE emp_num = 1001

_____________________________________________________________________________________________________________________________________________________________________
 UPDATE employees SET payrate = payrate * 1.2
 WHERE emp_num = 2 AND office = 'LV'

_____________________________________________________________________________________________________________________________________________________________________
CREATE TABLE employees
  (emp_num      SMALLINT,
   office       CHAR(2),
   name         VARCHAR(50),
   address      VARCHAR(50),
   payrate      MONEY,
   PRIMARY KEY (emp_num))

_____________________________________________________________________________________________________________________________________________________________________
DELETE FROM call_history
WHERE phone_number = '3610141'    AND called_by = 'KLK' AND
      date_called  = '07/24/2000' AND hangup_time = 2100

_____________________________________________________________________________________________________________________________________________________________________
CREATE TABLE customers
  (cust_no INTEGER,
   name    VARCHAR(30),
   address VARCHAR(50),
PRIMARY KEY (cust_no))

_____________________________________________________________________________________________________________________________________________________________________
CREATE TABLE orders
  (customer_number INTEGER,
   invoice_num     INTEGER,
   order_date      DATETIME,
   delivery_date   DATETIME,
PRIMARY KEY (customer_number, invoice_num)
CONSTRAINT fk_customers_orders
  FOREIGN KEY (customer_number)
  REFERENCES CUSTOMERS (cust_no))

_____________________________________________________________________________________________________________________________________________________________________
CREATE TABLE orders_item_detail
  (cust_no     INTEGER,
   invoice_num INTEGER,
   qty         TINYINT,
   cost        MONEY,
   item_no     INTEGER
CONSTRAINT fk_orders_orders_item_detail
  FOREIGN KEY (cust_no, invoice_num)
  REFERENCES orders (customer_number, invoice_num))

_____________________________________________________________________________________________________________________________________________________________________
 CREATE TABLE employees
   (employee_number  SMALLINT,
    name             VARCHAR(30),
    payrate          MONEY,
    PRIMARY KEY (employee_number))

 CREATE TABLE timecard
   (emp_no    SMALLINT,
    card_date DATETIME,
    time_in   SMALLINT,
    time_out  SMALLINT,
    CONSTRAINT fk_employees_timecard FOREIGN KEY (emp_no)
      REFERENCES employees (employee_number)

_____________________________________________________________________________________________________________________________________________________________________
 CREATE TABLE big_gamblers
   (player_number INTEGER,
    name          VARCHAR(30),
    address       VARCHAR(50),
    phone_number  VARCHAR(20),
 PRIMARY KEY (player_number))<a name="656"></a><a name="IDX-348"></a>

_____________________________________________________________________________________________________________________________________________________________________
 DELETE FROM big_gamblers WHERE name IS NULL

_____________________________________________________________________________________________________________________________________________________________________
CREATE TABLE big_gamblers
  (player_number INTEGER,
   name          VARCHAR(30),
   address       VARCHAR(50),
   phone_number  VARCHAR(20),
CONSTRAINT fk_high_roller_id FOREIGN KEY (player_number)
  REFERENCES high_rollers (player_ID))

_____________________________________________________________________________________________________________________________________________________________________
CREATE TABLE high_rollers
  (player_ID      INTEGER,   name         VARCHAR(30),
   credit_limit   MONEY,
   average_action MONEY,
   YTD_winnings   MONEY,
   YTD_losses     MONEY,
   PRIMARY KEY (player_ID))

_____________________________________________________________________________________________________________________________________________________________________
INSERT  INTO big_gamblers
  SELECT player_cards.customer_ID, player_cards.name,
         player_cards.address, player_cards.phone_number
  FROM big_gamblers, player_cards
  WHERE player_cards.customer_ID = big_gamblers.player_ID

_____________________________________________________________________________________________________________________________________________________________________
INSERT INTO big_gamblers
VALUES (<customer_ID from players_cards table>, NULL, NULL,
        NULL)

_____________________________________________________________________________________________________________________________________________________________________
SELECT customer_ID FROM players_cards

_____________________________________________________________________________________________________________________________________________________________________
 CREATE TABLE item_master
   (product_code INTEGER,
    description  VARCHAR(30),
    bin_level    SMALLINT,
 PRIMARY KEY (product_code))

 CREATE TABLE inventory
   (item_number   INTEGER,
    supplier_code INTEGER,
    cost          MONEY,
    qty_on_hand   SMALLINT,
 CONSTRAINT fk_item_master_inv FOREIGN KEY (item_number)
   REFERENCES item_master (product_code))

_____________________________________________________________________________________________________________________________________________________________________
 DELETE item_master WHERE PRODUCT_CODE = 1001<a name="659"></a><a name="IDX-350"></a>

_____________________________________________________________________________________________________________________________________________________________________
 DROP TABLE item_master

_____________________________________________________________________________________________________________________________________________________________________
 EXEC SP_HELP item_master

_____________________________________________________________________________________________________________________________________________________________________
 Server: Msg 547, Level 16, State 1, Line 1
 DELETE statement conflicted with COLUMN REFERENCE
   constraint 'fk_item_master_inv'. The conflict occurred in
   database 'SQLTips', tab 'inventory', column
   'item_number'.
 The statement has been terminated.

_____________________________________________________________________________________________________________________________________________________________________
Server: Msg 3726, Level 16, State 1, Line 1
Could not drop object 'item_master' because it is
  referenced by a FOREIGN KEY constraint.

_____________________________________________________________________________________________________________________________________________________________________
 INSERT INTO employees VALUES (400, 'Debbie Jamsa', 4)

_____________________________________________________________________________________________________________________________________________________________________
 INSERT INTO offices VALUES (4, 'Honolulu, HI', 400)

_____________________________________________________________________________________________________________________________________________________________________
 INSERT INTO offices VALUES (4, 'Honolulu, HI', NULL)
 INSERT INTO employees VALUES (400, 'Debbie Jamsa', 4)
 UPDATE offices SET manager = 400 WHERE office = 4

_____________________________________________________________________________________________________________________________________________________________________
ALTER TABLE employees NOCHECK CONSTRAINT fk_offices_emp
INSERT INTO employees VALUES (400, 'Debbie Jamsa', 4)
INSERT INTO offices VALUES (4, 'Honolulu, HI', NULL)
ALTER TABLE employees CHECK CONSTRAINT fk_offices_emp

_____________________________________________________________________________________________________________________________________________________________________
CREATE TABLE offices
  (office_no SMALLINT,
   location  VARCHAR(30),
   manager   SMALLINT,
PRIMARY KEY (office_no))

CREATE TABLE employees
  (emp_no SMALLINT,
   name   VARCHAR(30),
   office SMALLINT NOT NULL,
PRIMARY KEY (emp_no),
CONSTRAINT fk_offices_emp
  FOREIGN KEY (office) REFERENCES offices (office_no))

ALTER TABLE offices ADD CONSTRAINT fk_employees_ofce
  FOREIGN KEY (manager) REFERENCES employees (emp_no)

_____________________________________________________________________________________________________________________________________________________________________
CREATE TABLE employees
  (emp_num      SMALLINT,
   office       CHAR(2),
   name         VARCHAR(30),
   address      VARCHAR(50),
   payrate      MONEY,
   PRIMARY KEY (emp_num, office))

_____________________________________________________________________________________________________________________________________________________________________
CREATE TABLE employees
  (emp_num  SMALLINT UNIQUE NOT NULL,
   office   CHAR(2),
   name     VARCHAR(50),
   address  VARCHAR(50),
   payrate  MONEY)<a name="666"></a><a name="IDX-354"></a>

_____________________________________________________________________________________________________________________________________________________________________
 Server: Msg 2627, Level 14, State 2, Line1
 Violation of UNIQUE KEY constraint
   'UQ__test_null__7720AD13'. Cannot insert duplicate key in
   object 'test_null'.
 The statement has been terminated.

_____________________________________________________________________________________________________________________________________________________________________
CREATE TABLE test_null
  (row_id   INTEGER UNIQUE,
   row_name VARCHAR(30))

_____________________________________________________________________________________________________________________________________________________________________
 CREATE DOMAIN employee_id_type INTEGER
   CHECK (VALUE BETWEEN 1000 AND 9999)<a name="670"></a><a name="IDX-356"></a>

_____________________________________________________________________________________________________________________________________________________________________
 CREATE TABLE employees
   (employee_ID employee_id_type,
    name        VARCHAR(30))

_____________________________________________________________________________________________________________________________________________________________________
 CREATE TABLE employees
   (employee_ID INTEGER
      CHECK (employee_ID BETWEEN 1000 AND 1999),
    name        VARCHAR(30))

_____________________________________________________________________________________________________________________________________________________________________
 CREATE TABLE employees
   (employee_ID INTEGER,
    name        VARCHAR(30))

_____________________________________________________________________________________________________________________________________________________________________
 CREATE TABLE timecards
   (emp_num   SMALLINT,
    card_date DATETIME,
    time_in   SMALLINT,
    time_out  SMALLINT,
 PRIMARY KEY (emp_num, card_date, time_in),
 CONSTRAINT fk_employees_timecards FOREIGN KEY (emp_num)
   REFERENCES employees (emp_ID))

 CREATE TABLE employees
   (emp_ID  SMALLINT,
    name    VARCHAR(30),
    address VARCHAR(50),
    payrate MONEY,
 PRIMARY KEY (emp_ID))

_____________________________________________________________________________________________________________________________________________________________________
 [ [ON UPDATE
      NO ACTION|CASCADE|RESTRICT|SET NULL|SET DEFAULT]
   [ON DELETE
      NO ACTION|CASCADE|RESTRICT|SET NULL|SET DEFAULT] ]

_____________________________________________________________________________________________________________________________________________________________________
 [ [ON UPDATE
      NO ACTION|CASCADE|RESTRICT|SET NULL|SET DEFAULT]
   [ON DELETE
      NO ACTION|CASCADE|RESTRICT|SET NULL|SET DEFAULT] ]

_____________________________________________________________________________________________________________________________________________________________________
[ [ON UPDATE
     NO ACTION|CASCADE|RESTRICT|SET NULL|SET DEFAULT]
  [ON DELETE
     NO ACTION|CASCADE|RESTRICT|SET NULL|SET DEFAULT] ]

_____________________________________________________________________________________________________________________________________________________________________
 [ [ON UPDATE
      NO ACTION|CASCADE|RESTRICT|SET NULL|SET DEFAULT]
   [ON DELETE
      NO ACTION|CASCADE|RESTRICT|SET NULL|SET DEFAULT] ]

_____________________________________________________________________________________________________________________________________________________________________
 DELETE FROM offices WHERE office_ID = 1

_____________________________________________________________________________________________________________________________________________________________________
 INSERT INTO order_detail VALUES (1,1,07/30/2000,1000)

_____________________________________________________________________________________________________________________________________________________________________
 INSERT INTO order_detail VALUES (NULL,23,07/30/2000,1001)
 INSERT INTO order_detail VALUES (77,NULL,07/30/2000,1002)

_____________________________________________________________________________________________________________________________________________________________________
CREATE TABLE invoice
  (cust_ID     INTEGER,
   invoice_num INTEGER)

CREATE TABLE order_detail
  (cust_id     INTEGER,
   invoice_num INTEGER,
   order_date  DATETIME,
   item_number INTEGER,
CONSTRAINT fk_invoice_order_detail
  FOREIGN KEY (cust_ID, invoice_num)
  REFERENCES invoice (cust_ID, invoice_num))

_____________________________________________________________________________________________________________________________________________________________________
CREATE TABLE order_detail
  (cust_id INTEGER,
   invoice_num INTEGER,
   order_date DATETIME,
   item_number INTEGER,
CONSTRAINT fk_invoice_order_detail
  FOREIGN KEY (cust_ID, invoice_num)
  REFERENCES invoice (cust_ID, invoice_num) MATCH FULL)

_____________________________________________________________________________________________________________________________________________________________________
 [MATCH {FULL | PARTIAL | SIMPLE}]

_____________________________________________________________________________________________________________________________________________________________________
 CONSTRAINT fk_customers_invoices
   FOREIGN KEY (cust_ID, office)
   REFERENCES customers (cust_ID, office)
   MATCH PARTIAL ON DELETE SET NULL ON UPDATE SET NULL)

_____________________________________________________________________________________________________________________________________________________________________
 CREATE TABLE customers
   (cust_ID       INTEGER,
    office        INTEGER,
    customer_name VARCHAR(30)
    CONSTRAINT PK_customers PRIMARY KEY (cust_ID, office))<a name="702"></a><a name="IDX-373"></a>
 CREATE TABLE invoices
   (cust_ID     INTEGER NOT NULL,
    office      INTEGER,
    invoice_num INTEGER,
    order_date  DATETIME,
    item_number INTEGER,
 CONSTRAINT fk_customers_invoices
   FOREIGN KEY (cust<u class="underline">_</u>ID, office)
   REFERENCES customers (cust_ID, office)
   ON DELETE SET NULL ON UPDATE SET NULL)

_____________________________________________________________________________________________________________________________________________________________________
 DELETE FROM customers WHERE cust_ID = 1 AND office = 5

_____________________________________________________________________________________________________________________________________________________________________
 DELETE FROM customers WHERE cust_ID = 1 AND office = 5

_____________________________________________________________________________________________________________________________________________________________________
 DELETE FROM customers WHERE cust_ID = 1 AND office = 5

_____________________________________________________________________________________________________________________________________________________________________
CONSTRAINT fk_customers_invoices
  FOREIGN KEY (cust_ID, office)
  REFERENCES customers (cust_ID, office)
  MATCH FULL ON DELETE SET NULL ON UPDATE SET NULL)<a name="703"></a><a name="IDX-374"></a>

_____________________________________________________________________________________________________________________________________________________________________
 INSERT INTO customer VALUES (0,'','','')

_____________________________________________________________________________________________________________________________________________________________________
 INSERT INTO customer
 VALUES (1,'Konrad',NULL,'765 E. Eldorado Lane')

_____________________________________________________________________________________________________________________________________________________________________
ALTER TABLE customer
ALTER COLUMN first_name VARCHAR(30) NOT NULL

_____________________________________________________________________________________________________________________________________________________________________
CREATE TABLE customer
  (cust_ID    INTEGER NOT NULL,
   first_name VARCHAR(30),
   last_name  VARCHAR(30) NOT NULL,
   address    VARCHAR(50) NOT NULL)

_____________________________________________________________________________________________________________________________________________________________________
Server: Msg 515, Level 16, State 2, Line 1
Cannot insert the value NULL into column 'last_name', table
  'SQLTips.dbo.customer'; column does not allow nulls.
  INSERT fails.
The statement has been terminated.

_____________________________________________________________________________________________________________________________________________________________________
UPDATE customer SET address = NULL WHERE cust_ID = 0

_____________________________________________________________________________________________________________________________________________________________________
UPDATE customer SET first_name = ''
WHERE first_name IS NULL

_____________________________________________________________________________________________________________________________________________________________________
 INSERT into employees
 VALUES (1, 'Konrad King', 123456789, 'SECRET')

_____________________________________________________________________________________________________________________________________________________________________
 Server: Msg 2627, Level 14, State 2, Line 1
 Violation of UNIQUE KEY constraint 'UQ_employees_1D4655FB'.
   cannot insert duplicate key in object 'employees'.
 The statement has been terminated.<a name="708"></a><a name="IDX-377"></a>

_____________________________________________________________________________________________________________________________________________________________________
CREATE TABLE employees
  (ID       INTEGER PRIMARY KEY,
   name     VARCHAR(30),
   SSAN     INTEGER UNIQUE,
   password VARCHAR(15) UNIQUE)

_____________________________________________________________________________________________________________________________________________________________________
UPDATE employees SET password = 'NEW PASSWORD' WHERE ID = 1

_____________________________________________________________________________________________________________________________________________________________________
 [CONSTRAINT <constraint name>] CHECK (<search condition>)

_____________________________________________________________________________________________________________________________________________________________________
 CREATE TABLE employees
   (ID             INTEGER PRIMARY KEY,
    name           VARCHAR(30) NOT NULL,
    SSAN           INTEGER UNIQUE NOT NULL,
    department     VARCHAR(15) CONSTRAINT valid_department
      CHECK (department IN ('MARKETING','SALES','ADMIN',
                            'EXECUTIVE','SERVICE',
                            'COLLECTIONS', 'WAREHOUSE')),
    hourly_rate    MONEY,
    monthly_salary MONEY,
    commission     MONEY,
 CONSTRAINT valid_pay CHECK(
  (department IN ('MARKETING','SALES') AND
     (hourly_rate IS NULL) AND (monthly_salary IS NULL) AND
     (commission BETWEEN 100.00 and 500,00)) OR
  (department IN ('ADMIN','EXECUTIVE') AND
     (hourly_rate IS NULL) AND (monthly_salary BETWEEN
      1000.00 AND 10000.00) AND (commission IS NULL)) OR
  (department IN ('SERVICE','COLLECTIONS','WAREHOUSE') AND
     (hourly_rate BETWEEN 10.00 AND 45.00) AND
     (monthly_salary IS NULL) AND (COMMISSION IS NULL)))

_____________________________________________________________________________________________________________________________________________________________________
 INSERT INTO employees VALUES
   (1,'Konrad King',123456789,'Executive',NULL,3000.00,NULL)

_____________________________________________________________________________________________________________________________________________________________________
 Server: Msg 547, Level 16, State 1, Line 1
 UPDATE statement conflicted with COLUMN CHECK constraint
   'valid_department'. The conflict occurred in database
   'SQLTips', table 'employees'.
 The statement has been terminated

_____________________________________________________________________________________________________________________________________________________________________
 UPDATE employees SET department = 'MIS' WHERE ID = 1

_____________________________________________________________________________________________________________________________________________________________________
CREATE TABLE employees
  (ID             INTEGER PRIMARY KEY,
   name           VARCHAR(30) NOT NULL,
   SSAN           INTEGER UNIQUE NOT NULL,
   department     VARCHAR(15) CONSTRAINT valid_department
     CHECK (department IN ('MARKETING','SALES','ADMIN',
                           'EXECUTIVE','SERVICE',
                           'COLLECTIONS', 'WAREHOUSE')),
   hourly_rate    MONEY,
   monthly_salary MONEY,
   commission     MONEY)<a name="710"></a><a name="IDX-378"></a>

_____________________________________________________________________________________________________________________________________________________________________
 CREATE RULE <rule name>

 AS @<parameter> <conditional predicate><a name="720"></a><a name="IDX-383"></a>

_____________________________________________________________________________________________________________________________________________________________________
 CREATE RULE validate_freshman_classes

 AS @class IN ('English','History','Math','Science')

_____________________________________________________________________________________________________________________________________________________________________
 CREATE RULE validate_salary

 AS @salary BETWEEN 1000.00 AND 10000.00

_____________________________________________________________________________________________________________________________________________________________________
 EXEC '<rule name>',
   '<table name>.<column name>',['FUTUREONLY']

_____________________________________________________________________________________________________________________________________________________________________
 EXEC sp_bindrule
   'validate_salary','employees.monthly_salary'

_____________________________________________________________________________________________________________________________________________________________________
 DROP RULE <rule name> [,...<last rule name>]<a name="726"></a><a name="IDX-386"></a>

_____________________________________________________________________________________________________________________________________________________________________
 DROP RULE validate_grades, validate_salary

_____________________________________________________________________________________________________________________________________________________________________
 CREATE ASSERTION <assertion name>
 CHECK (<search condition>)<a name="734"></a><a name="IDX-390"></a>

_____________________________________________________________________________________________________________________________________________________________________
 CREATE ASSERTION item_in_stock
 CHECK((orders.item_number = inventory.item_number) AND
       (SUM (orders.qty) <= inventory.qty_on_hand))

_____________________________________________________________________________________________________________________________________________________________________
 activity          cost
 ----------------  ------
 Scuba Diving      250.00
 Deep Sea Fishing  750.00
 Massages Therapy  150.00
 Golf              225.00
 Aromatherapy      75.00

_____________________________________________________________________________________________________________________________________________________________________
 guest_ID  activity          cost
 --------  ----------------  ------
 2587      Scuba Diving      250.00
 2564      Deep Sea Fishing  750.00
 4589      Massage Therapy   150.00
 1247      Golf              225.00
 1269      Aromatherapy      75.00

_____________________________________________________________________________________________________________________________________________________________________
 guest_ID  activity
 --------  ----------------
 2587      Scuba Diving
 2564      Deep Sea Fishing
 4589      Massage Therapy
 1247      Golf
 1269      Aromatherapy

_____________________________________________________________________________________________________________________________________________________________________
 CLASS SECTION TEACHER  DEPARTMENT STUDENT
 ----- ------- -------- ---------- -------
 H100  1       Smith    HISTORY    1005
 H100  1       Smith    HISTORY    2110
 H100  1       Smith    HISTORY    3115
 CS100 1       Bowls    COMP-SCI   4001
 CS100 1       Bowls    COMP-SCI   4515
 CS100 1       Bowls    COMP-SCI   8978
 M200  3       Rawlins  MATH       2002
 M200  3       Rawlins  MATH       4587
 M200  3       Rawlins  MATH       2358

_____________________________________________________________________________________________________________________________________________________________________
CLASS SECTION TEACHER  DEPARTMENT STUDENTS
----- ------- -------- ---------- --------------
H100  1       Smith    HISTORY    1005,2110,3115
CS100 1       Bowls    COMP-SCI   4001,4515,8978
M200  3       Rawlins  MATH       2002,4587,2358

_____________________________________________________________________________________________________________________________________________________________________
 CLASS SECTION TEACHER  DEPARTMENT  STUDENT MAJOR
 ----- ------- -------  ----------- ------- -----------
 H100  1       Smith    HISTORY     1005    ENGLISH
 H100  2       Riley    HISTORY     2110    ENGLISH
 H100  1       Smith    HISTORY     2358    MATH
 CS100 1       Bowls    COMP-SCI    4001    COMP-SCI
 CS100 1       Bowls    COMP-SCI    2110    ENGLISH
 CS100 1       Bowls    COMP-SCI    8978    ENGINEERING
 M200  3       Rawlins  MATH        4001    COMP-SCI
 M200  2       Brown    MATH        2110    ENGLISH
 M200  4       Riley    MATH        2358    MATH
 E100  1       Jones    ENGINEERING 8978    ENGINEERING

_____________________________________________________________________________________________________________________________________________________________________
 courses (class, section, teacher, department)
 PRIMARY KEY (class,section)

 enrollment (student, class, section)<a name="742"></a><a name="IDX-395"></a>
 PRIMARY KEY (student, class)

 students (student, major)
 PRIMARY KEY (student)

_____________________________________________________________________________________________________________________________________________________________________
 (<---- A ---->)   (B)       (C)         (D)
  CLASS SECTION  TEACHER  DEPARTMENT  DEPT_HEAD
  ----- -------  -------  ----------- ---------
  H100  1        Smith    HISTORY     SMITH
  H100  2        Riley    HISTORY     SMITH
  CS100 1        Bowls    COMP-SCI    PEROIT
  M200  3        Rawlins  MATH        HASTINGS
  M200  2        Brown    MATH        HASTINGS
  M200  4        Riley    MATH        HASTINGS
  E100  1        Jones    ENGINEERING JONES<a name="744"></a><a name="IDX-396"></a>

_____________________________________________________________________________________________________________________________________________________________________
 courses (class, section, teacher)
 PRIMARY KEY (class,section)
 teachers (teacher, department)

 PRIMARY KEY (teacher)
 departments (department, dept_head)
 PRIMARY KEY (department)

_____________________________________________________________________________________________________________________________________________________________________
 courses (class, section, teacher, department, dept_head)
 PRIMARY KEY (class,section)

_____________________________________________________________________________________________________________________________________________________________________
 CREATE TABLE customer_histories
   (cust_id          INTEGER,
    name             VARCHAR(30),
    address          VARCHAR(50),
    salesrep_name    VARCHAR(30),
    salesrep_office  SMALLINT,
    invoice_number   INTEGER,
    invoice_date     DATETIME,
    date_shipped     DATETIME,
    item_number      INTEGER,
    item_description VARCHAR(30),
    item_cost        MONEY,
    item_price       MONEY)<a name="747"></a><a name="IDX-398"></a>

_____________________________________________________________________________________________________________________________________________________________________
CREATE TABLE customers
  (cust_id     INTEGER,
   name        VARCHAR(30),
   address     VARCHAR(50),
   salesrep_ID INTEGER)

CREATE TABLE invoices
  (invoice_no   INTEGER,
   invoice_date DATETIME,
   data_shipped DATETIME)

CREATE TABLE invoice_detail
  (invoice_no  INTEGER,
   item_number INTEGER,
   price        MONEY)

CREATE TABLE item_master
  (item_number INTEGER,
   description VARCHAR(30),
   cost        MONEY)

CREATE TABLE employees
  (salesrep_ID INTEGER,
   name        VARCHAR(30),
   SSAN        CHAR(11),
   OFFICE      SMALLINT)

_____________________________________________________________________________________________________________________________________________________________________
 CREATE customers
   (cust_ID  INTEGER,
    name     VARCHAR(30),
    address  VARCHAR(50),
    salesrep INTEGER)

 CREATE employees
   (salesrep_ID INTEGER,
    name        VARCHAR(30))

_____________________________________________________________________________________________________________________________________________________________________
 SELECT <column list> FROM <table name>
 WHERE <search condition>

_____________________________________________________________________________________________________________________________________________________________________
 SELECT * FROM <table name>

_____________________________________________________________________________________________________________________________________________________________________
 SELECT * FROM customers, employees
 WHERE salesrep = salesrep_ID

_____________________________________________________________________________________________________________________________________________________________________
 SELECT cust_ID AS 'ID',   customers.name, address,
   employees.name AS 'salesperson'
 FROM customers, employees
 WHERE salesrep = salesrep_ID AND employees.name = 'Smith'

_____________________________________________________________________________________________________________________________________________________________________
 SELECT cust_ID AS 'ID', customers.name, address,
   employees.name AS 'salesperson'
 FROM customers, employees
 WHERE salesrep = salesrep_ID AND customers.name = 'Jones'

_____________________________________________________________________________________________________________________________________________________________________
 CREATE TABLE students
   (SID               INTEGER,
    first_name        VARCHAR(15),
    last_name         VARCHAR(20),
    SSAN              CHAR(11),
    home_address      VARCHAR(50),
    home_city         VARCHAR(20),
    home_state        CHAR(2),
    home_phone_number CHAR(14),
   major          VARCHAR(20))

_____________________________________________________________________________________________________________________________________________________________________
 CREATE VIEW <view name>
   [(<column name>[,...<last column name>])]
 AS <SELECT statement>

_____________________________________________________________________________________________________________________________________________________________________
 CREATE VIEW vw_student_list AS SELECT * FROM students

_____________________________________________________________________________________________________________________________________________________________________
 SELECT SID AS 'student ID', first_name, last_name
 FROM vw_student_list

_____________________________________________________________________________________________________________________________________________________________________
CREATE VIEW vw_student_name_list
  (student_ID, first_name, last_name)
AS SELECT SID, first_name, last_name FROM students

_____________________________________________________________________________________________________________________________________________________________________
SELECT * FROM vw_student_name_list<a name="753"></a><a name="IDX-401"></a>

_____________________________________________________________________________________________________________________________________________________________________
  CREATE TABLE grades
    (class        VARCHAR(15),
     section      SMALLINT,
     grade        VARCHAR(4),
     student_ID   INTEGER,
     professor_ID INTEGER)

  CREATE TABLE teachers
    (PID        INTEGER,
     professor  VARCHAR(30),
     department VARCHAR(20))

_____________________________________________________________________________________________________________________________________________________________________
 CREATE VIEW vw_LVNV_student_list
 AS SELECT * FROM students
 WHERE home_city = 'Las Vegas' AND home_state = 'NV'

_____________________________________________________________________________________________________________________________________________________________________
 CREATE VIEW vw_LVNV_student_name_list
   (student_ID, first_name, last_name)
 AS SELECT SID, first_name, last_name FROM students
 WHERE home_city = 'Las Vegas' AND home_state = 'NV'<a name="755"></a><a name="IDX-402"></a>

_____________________________________________________________________________________________________________________________________________________________________
 SELECT first_name,last_name,class,section,grade,professor
 FROM vw_students_grades_teachers WHERE SID = 2110

_____________________________________________________________________________________________________________________________________________________________________
CREATE VIEW vw_students_grades_teachers AS
SELECT * FROM students, grades, teachers
WHERE (grades.student_id = students.SID) AND
      (grades.professor_ID = teachers.PID)

_____________________________________________________________________________________________________________________________________________________________________
SELECT COUNT (*) FROM vw_students_grades_teachers
WHERE professor = 'Rawlins' AND class = 'M200' AND
      grade = 'A'

_____________________________________________________________________________________________________________________________________________________________________
SELECT first_name,last_name,class,section,grade,professor
FROM vw_students_grades_teachers
WHERE department = 'History'

_____________________________________________________________________________________________________________________________________________________________________
  UPDATE grades SET grade='B+'
  WHERE student_ID = 1005 AND class = 'H100'

_____________________________________________________________________________________________________________________________________________________________________
  UPDATE vw_students_grades_teachers SET grade='B+'
  WHERE SID = 1005 AND class = 'H100'

_____________________________________________________________________________________________________________________________________________________________________
 CREATE TABLE invoice_detail
   (invoice_number INTEGER,
    item_number    INTEGER,
    sales_price    MONEY,
    qty            INTEGER)

_____________________________________________________________________________________________________________________________________________________________________
 CREATE TABLE item_master
   (item_number INTEGER,
    description VARCHAR(30),
    item_cost   MONEY)<a name="760"></a><a name="IDX-405"></a>

_____________________________________________________________________________________________________________________________________________________________________
 CREATE VIEW vw_item_sales
   (item, order_ct, sold_ct, avg_sales_price) AS
 SELECT item_number, COUNT(*), SUM(qty), AVG(sales_price)
 FROM invoice_detail
 GROUP BY item_number

_____________________________________________________________________________________________________________________________________________________________________
CREATE VIEW vw_item_sales_profits
  (item_number, description, order_ct, sold_ct,
   avg_sales_price, total_cost, total_sales, profit,
   pct_profit) AS

SELECT vw_item_sales_profits.item_number, description,
  order_ct, sold_ct, avg_sales_price, sold_ct * item_cost,
  sold_ct * avg_sales_price,
  (avg_sales_price * sold_ct) - (sold_ct * item_cost),
  (((avg_sales_price * sold_ct) - (sold_ct * item_cost)) /
       (sold_ct * item_cost)) * 100
FROM item_master, vw_item_sales_profits
WHERE item_master.item_number = vw_item_sales.item_number

_____________________________________________________________________________________________________________________________________________________________________
 CREATE TABLE customers
   (cust_ID  INTEGER,
    name     VARCHAR(30),
    address  VARCHAR(50))

 CREATE TABLE invoices
   (invoice_number INTEGER,
    invoice_date   DATETIME,
    purchased_by   INTEGER,
    ship_to        VARCHAR(50)

_____________________________________________________________________________________________________________________________________________________________________
 CREATE VIEW vw_customer_invoices AS
 SELECT * FROM customers, invoices
 WHERE cust_ID = purchased_by<a name="762"></a><a name="IDX-406"></a>

_____________________________________________________________________________________________________________________________________________________________________
 UPDATE <table name | view name> SET <column name> =
   <expression>[,...<last column name> = <last expression>]
 WHERE <search condition>

_____________________________________________________________________________________________________________________________________________________________________
 UPDATE vw_customer_invoices SET address = 'New Address'
   WHERE CUST_ID = 1
 UPDATE VW_customer_invoices SET ship_to = 'New Address'
   WHERE CUST_ID = 1

_____________________________________________________________________________________________________________________________________________________________________
 UPDATE vw_customer_invoices SET address = 'New Address',
   ship_to = 'New Address'
 WHERE CUST_ID = 1

_____________________________________________________________________________________________________________________________________________________________________
 CREATE VIEW vw_nv_employees AS
 SELECT * FROM employees WHERE office = 'NV'
 WITH CHECK OPTION

_____________________________________________________________________________________________________________________________________________________________________
 CREATE VIEW vw_nv_employees AS
 SELECT * FROM employees WHERE office = 'NV'

_____________________________________________________________________________________________________________________________________________________________________
 INSERT INTO vw_nv_employees
 VAL0ES (2, 'Kris', '777-77-7777','TX')

_____________________________________________________________________________________________________________________________________________________________________
 SELECT * FROM vw_nv_employees

_____________________________________________________________________________________________________________________________________________________________________
 SELECT * PROM vw_nv_employees

_____________________________________________________________________________________________________________________________________________________________________
 Server: Msg 550, Level 16, State 1, Line 1
 The attempted insert or update failed because the target
   view either specifies WITH CHECK OPTION or spans a view
   that specifies WITH CHECK OPTION and one or more row
   resulting from the operation did not qualify under the
   CHECK OPTION constraint.
 The statement has been terminated.

_____________________________________________________________________________________________________________________________________________________________________
 UPDATE vw_nv_employees SET office = 'LA' WHERE id = 10

_____________________________________________________________________________________________________________________________________________________________________
id  name    ssan         office
--  ------  -----------  ------
1   Konrad  555-55-5555  TX
10  Sally   222-22-2222  NV
15  Wally   111-11-1111  NV
28  Walter  333-33-3333  CA

_____________________________________________________________________________________________________________________________________________________________________
UPDATE vw_nv_employees SET office = 'LA' WHERE id = 10

_____________________________________________________________________________________________________________________________________________________________________
 CREATE VIEW vw_bob_customers AS
 SELECT * FROM customers WHERE salesperson_ID = 101

_____________________________________________________________________________________________________________________________________________________________________
 CREATE VIEW vw_sue_subordinate_customers AS
 SELECT * FROM customers
 WHERE cust_ID IN (SELECT cust_ID FROM customers, employees
                   WHERE
                     customers.salesperson_ID = employees.ID
                AND employees.manager = 'SUE')

_____________________________________________________________________________________________________________________________________________________________________
 CREATE TABLE students
   (SID               INTEGER,
    first_name        VARCHAR(15),
    last_name         VARCHAR(20),
    SSAN              CHAR(11),
    home_address      VARCHAR(50),
    home_city         VARCHAR(20),
    home_state        CHAR(2),
    home_phone_number CHAR(14),
    major             VARCHAR(20))

_____________________________________________________________________________________________________________________________________________________________________
 CREATE VIEW vw_student_name_major AS
 SELECT first_name, last_name, major FROM students

_____________________________________________________________________________________________________________________________________________________________________
CREATE VIEW vw_student_name_rnajor AS
SELECT first_name, last_name, major FROM students
WHERE home_state = 'NV'

_____________________________________________________________________________________________________________________________________________________________________
 CREATE VIEW <view column name list>
 AS SELECT <source table column name list>
 FROM <source table list> [<WHERE clause>]
 GROUP BY <group by column list>

_____________________________________________________________________________________________________________________________________________________________________
 CREATE VIEW vw_customer_orders
   (customer_number, orders_placed_ct, orders_shipped_ct,
    total_amt_purchased, total_amt_paid, total_amt_due,
    high_order_amt, avg_order_amt, low_order_amt)
 AS SELECT
   cust_ID, COUNT(*), COUNT(date_shipped),
   SUM(invoice_total), SUM(amt_paid), SUM(invoice_total) -
   SUM(amt_paid), MAX(invoice_total), AVG(invoice_total),
   MIN(invoice_total)
 FROM invoices
 GROUP BY cust_ID

_____________________________________________________________________________________________________________________________________________________________________
 SELECT TOP 10 customer_number, name, total_amt_due
 FROM customers, vw_customer_orders
 WHERE cust_ID = customer_number
 ORDERED BY total_amt_due DESC

_____________________________________________________________________________________________________________________________________________________________________
 CREATE VIEW vw_cust_invoices
   (cust_id, total_purchased, avg_purchase)
 AS SELECT
   customers.cust_id, SUM(invoice_total), AVG(invoice_total)
 FROM customers, invoices
 WHERE customers.cust_id = invoices.cust_ID

 CREATE VIEW vw_salesperson_customers
   (salesperson_ID, salesperson_name, customer_ID,
    customer_name, total_purchased, avg_purchase)
 AS SELECT
   employees.ID, employees.name, customers.cust_ID,
   customers.name, total_purchased, avg_purchase
 FROM customers, employees, vw_cust_invoices
 WHERE customers.salesperson_ID = employees.ID AND
       vw_cust_invoices.cust_ID = customers.cust_id

_____________________________________________________________________________________________________________________________________________________________________
 SELECT * FROM vw_salesperson_customers
 ORDER BY salesperson_ID, customer_ID

_____________________________________________________________________________________________________________________________________________________________________
   SELECT 'ABC' as 'vendor', item_no, item_desc, price,
     count_on_hand FROM abc_products
 UNION
   SELECT 'DEF' as 'vendor',   item_number, description, cost,
     qty_on_hand FROM def_products
 UNION
   SELECT 'GHI' as 'vendor', item_number, description, cost,
     qty_on_hand FROM ghi_products

_____________________________________________________________________________________________________________________________________________________________________
 ABC_Products table
 item_no  item_desc  price   count_on_hand
 -------  ---------  ------  -------------
 1        Widget     254.00  5
 2        Gidget     123.00  7
 3        Gadget     249.00  10

 DEF_Products table
 item_number  description  cost    qty_on_hand
 -----------  -----------  ------  -----------
 1            Sprocket     243.00  15
 2            Gadget       100.00  7

 GHI_Products table
 item_number  description  cost    qty_on_hand
 -----------  -----------  ------  -----------
 7            Laser        575.00  12
 10           Phaser       625.00  5
 15           Taser         75.00  7<a name="776"></a><a name="IDX-414"></a>

_____________________________________________________________________________________________________________________________________________________________________
  INSERT INTO house_prospects
     SELECT * FROM house_inventory WHERE acreage > 2
   UNION ALL
     SELECT * FROM house_inventory WHERE bedrooms >= 4
   UNION ALL
    SELECT * FROM house_inventory WHERE gated_community = 'Y'<a name="780"></a><a name="IDX-416"></a>

_____________________________________________________________________________________________________________________________________________________________________
 CREATE table house_inventory
   (address         VARCHAR(50),
    sales_price     MONEY,
    pool            CHAR(l),
    gated_community CHAR(1),
    acreage         NUMERIC,
    bedrooms        SMALLINT,
    square_footage  INTEGER,
    realtor_ID      SMALLINT)

_____________________________________________________________________________________________________________________________________________________________________
 SELECT * FROM house_inventory
 WHERE acreage > 2 OR bedrooms >= 4 OR gated_community = 'Y'

_____________________________________________________________________________________________________________________________________________________________________
 SELECT COUNT(*) AS 'Score', address, sales_price, acreage,
   bedrooms, gated_community FROM house_prospects
 GROUP BY address, acreage, bedrooms, gated_community
   sales_price
 ORDER BY score DESC, sales_price ASC

_____________________________________________________________________________________________________________________________________________________________________
     SELECT * FROM table_c
   UNION CORRESPONDING
     SELECT * FROM table_b

_____________________________________________________________________________________________________________________________________________________________________
   SELECT * FROM table_a
 UNION
  SELECT * FROM table_b

_____________________________________________________________________________________________________________________________________________________________________
 CREATE TABLE table_a          CREATE TABLE table_b
   (ID         SMALLINT,         (emp_ID         SMALLINT,
    office     INTEGER,           office         INTEGER,
    address    VARCHAR(30),       home_address   VARCHAR(30),
    department CHAR(5))           emp_department CHAR(5))

_____________________________________________________________________________________________________________________________________________________________________
 CREATE TABLE table_c        CREATE TABLE table_d
   (ID         SMALLINT,       (office         INTEGER,
    office     INTEGER,         ID             SMALLINT,
    address    VARCHAR(30),     address        VARCHAR(30),
    department CHAR(5),         emp_department CHAR(5))
    pay_rate   MONEY)

_____________________________________________________________________________________________________________________________________________________________________
    SELECT * FROM innvoices_99 WHERE invoices_99.cust_ID =
      (SELECT cust_ID FROM CUSTOMERS WHERE name = 'XYZ Corp')
  UNION
    SELECT * FROM innvoices_00 WHERE invoices_00.cust_ID =
      (SELECT cust_ID FROM CUSTOMERS WHERE name = 'XYZ Corp')

_____________________________________________________________________________________________________________________________________________________________________
   SELECT store_name AS 'sold_to', address, phone, make,
          model, vehicle_ID, 'Inventory' AS 'location',
          date_received
   FROM auto_inventory, dealerships
   WHERE dealerships.store_ID = auto_inventory.dealership_ID
     AND make = 'Ford' AND model = 'Explorer'
 UNION
   SELECT first_name + ' ' + last_name AS 'sold_to',
          address, home_phone, make, model, vehicle_ID,
          'Customer' AS 'location', date_sold
   FROM customers, auto_sales
   WHERE customers.customer_ID = auto_sales.cust_ID
     AND make = 'FORD' AND model = 'Explorer'

_____________________________________________________________________________________________________________________________________________________________________
   SELECT 'ABC', item_no, item_desc, price, count_on_hand
   FROM abc_products
 UNION
   SELECT 'DEF '' item_number, description, cost, qty_on_hand
   FROM def_products
 UNION
   SELECT 'GHI',  item_number, description, cost, qty_on_hand
   FROM ghi_products
 ORDER BY item_no

_____________________________________________________________________________________________________________________________________________________________________
 ORDER BY 1, 3

_____________________________________________________________________________________________________________________________________________________________________
 ORDER BY 2

_____________________________________________________________________________________________________________________________________________________________________
  (table_a UNION ALL table_b) UNION table_c

_____________________________________________________________________________________________________________________________________________________________________
  table_a UNION (table_b UNION table_c)
 (table_a UNION table_b) UNION table_c
 (table_a UNION table_c) UNION table_b

_____________________________________________________________________________________________________________________________________________________________________
  table_a UNION ALL (table_b UNION ALL table_c)
 (table_a UNION ALL table_b) UNION ALL table_c
 (table_a UNION ALL table_c) UNION ALL table_b

_____________________________________________________________________________________________________________________________________________________________________
 SELECT * FROM table_a UNION
 SELECT * FROM table_b UNION
 SELECT * FROM table c

_____________________________________________________________________________________________________________________________________________________________________
 table_a UNION ALL (table_b UNION table_c)

_____________________________________________________________________________________________________________________________________________________________________
 table_a UNION ALL table_b UNION table_c

_____________________________________________________________________________________________________________________________________________________________________
 CREATE TABLE employees
   (employee_ID SMALLINT UNIQUE,
    office      SMALLINT UNIQUE,
    emp_name    VARCHAR(30),
    SSAN        CHAR(11) UNIQUE)

_____________________________________________________________________________________________________________________________________________________________________
 CREATE TABLE employees
   (employee_ID SMALLINT,
    office      SMALLINT,
    emp_name    VARCHAR(30),
    SSAN        CHAR(11) UNIQUE)

_____________________________________________________________________________________________________________________________________________________________________
 CREATE TABLE employees
  (employee_ID SMALLINT,
   office      SMALLINT,
   emp_name    VARCHAR(30),
   SSAN        CHAR(11) UNIQUE,
   CONSTRAINT unique_by_office UNIQUE (employee_ID, office))

_____________________________________________________________________________________________________________________________________________________________________
   UPDATE employees SET hourly_rate = 10.0 + hourly_rate * 1.2

_____________________________________________________________________________________________________________________________________________________________________
  INSERT INTO employees (emp_ID, name, hire_date, hourly_rate)
    VALUES (1, 'Konrad King', '08/20/2000', 52.75)

_____________________________________________________________________________________________________________________________________________________________________
INSERT INTO books (author, title)
  VALUES ('Konrad King', 'Konrad's Tips')

_____________________________________________________________________________________________________________________________________________________________________
  DECLARE @item_count INTEGER, @avg_value MONEY,
    @total_value MONEY

  SELECT @item_count = COUNT(*), @avg_value = AVG(cost),
    @total_value = SUM(cost) FROM inventory

  PRINT 'There are ' + RTRIM(CONVERT(CHAR(6), @item_count)) +
    ' items in inventory.'
  PRINT 'The total value of the inventory is $' +
    RTRIM(LTRIM(CONVERT(CHAR(8), @total_value))) + '.'
  PRINT 'Each item has an average value of $' +
    RTRIM(LTRIM(CONVERT(CHAR(8), @avg_value))) + '.'

_____________________________________________________________________________________________________________________________________________________________________
  UPDATE cost_sheet SET wholesale = cost * 1.1,
    discount = cost * 1.2, retail = cost * 1.3<a name="800"></a><a name="IDX-426"></a>

_____________________________________________________________________________________________________________________________________________________________________
 SET @@wholesale_margin = 1.05
 SET @@discount_margin = 1.15
 SET @@retail_margin = 1.25

_____________________________________________________________________________________________________________________________________________________________________
 UPDATE cost_sheet SET wholesale = cost * @wholesale_margin,
   discount = cost * @@retail_margin,
   retail = cost * @@list_margin

_____________________________________________________________________________________________________________________________________________________________________
There are 16 items in inventory.
The total value of the inventory is $8020.62.
Each item has an average value of $501.29.

_____________________________________________________________________________________________________________________________________________________________________
 CREATE PROCEDURE sp_call_history (@phone_number INTEGER,
   @start_date DATETIME, @stop_date DATETIME,
   @message VARCHAR(90) OUTPUT) AS

 IF @phone_number = 0 AND
   (@stop_date = '' OR @start_date = '')
  SET @message  = 'Call this routine with either ' +
   '(<phone number>, '' '', '' '' or '+
   '(0,<first date>,<last_date>)'<a name="802"></a><a name="IDX-427"></a>
 ELSE
   BEGIN
     IF @phone_number = 0
       SELECT * FROM oldcalls
       WHERE date_called >= @start_date
         AND date_called <= @stop_date
       ORDER BY date_called, call_time, hangup_time
     ELSE
       SELECT * FROM oldcalls
       WHERE phone_number = @phone_number
       ORDER BY date_called, call_time, hangup_time
   END 

_____________________________________________________________________________________________________________________________________________________________________
 DECLARE @msg_ret VARCHAR(255)
 EXEC sp_call_history 0, '08/01/2000','08/05/2000 ',
        @message=@msg_ret OUTPUT
 PRINT @msg_ret

_____________________________________________________________________________________________________________________________________________________________________
 DECLARE @msg_ret VARCHAR(255)
 EXEC sp_call_history 3320144,'', '', @message=@msg_ret OUTPUT
 PRINT @msg_ret

_____________________________________________________________________________________________________________________________________________________________________
 SELECT employee_ID, first_name, last_name, office_ID
 FROM employees WHERE office_ID = 1

_____________________________________________________________________________________________________________________________________________________________________
 SELECT employees.employee_ID, employees.first_name,
   employees.last_name, employees.manager,
   offices.office_ID, offices.location, offices.manager,
   customers.customer_ID, customers, company_name
 FROM customers, employees, offices
 WHERE  employees.office_ID   = 1
   AND (employees.office_ID   = offices.office_ID)
   AND (customers.employee_ID = employees.employee_ID

_____________________________________________________________________________________________________________________________________________________________________
 SELECT employees.employee_ID, employees.first_name,
   employees.last_name, employees.office_ID
 FROM employees WHERE employees.office_ID = 1

_____________________________________________________________________________________________________________________________________________________________________
 SELECT employees.employee_ID, first_name, last_name,
   employees.manager, offices.office_ID, location,<a name="808"></a><a name="IDX-431"></a>
   offices.manager, customer_ID, company_name
 FROM customers, employees, offices
 WHERE  employees.office_ID   = 1
   AND (employees.office_ID   = offices.office_ID)
   AND (customers.employee_ID = employees.employee_ID

_____________________________________________________________________________________________________________________________________________________________________
  SELECT last_name, SUBSTRING(last_name,1,3) AS  'First_Three',
    SUBSTRING(last_name, 4, 15) AS 'Remainder'
  FROM employees WHERE SUBSTRING(last_name,1,3) = 'KIN'

_____________________________________________________________________________________________________________________________________________________________________
 ------
 Konrad

_____________________________________________________________________________________________________________________________________________________________________
 Last_name First Three Remainder
 --------- ----------- ---------
 King      Kin         g
 Kingsly   Kin         gsly
 Kingston  Kin         gston

_____________________________________________________________________________________________________________________________________________________________________
 SELECT SUBSTRING ('King, Konrad',7, 6)

_____________________________________________________________________________________________________________________________________________________________________
 SUBSTRING(<target string>, <start>, <length>)

_____________________________________________________________________________________________________________________________________________________________________
                            first_name  last_name
 ------  ----  -----------  ----------  ---------
 KONRAD  KING  KONRAD KING  konrad      king

_____________________________________________________________________________________________________________________________________________________________________
 ------------- ------------
 KONRAD KING'S 1001 SQL TIPS

_____________________________________________________________________________________________________________________________________________________________________
 SELECT UPPER(first_name), UPPER(last_name),
   UPPER(first_name+' '+last_name), first_name, last_name
 FROM employees<a name="812"></a><a name="IDX-433"></a>

_____________________________________________________________________________________________________________________________________________________________________
 SELECT UPPER('konrad '+' king''s'),
   UPPER(SUBSTRING('1001 SQL Tips Book',1,14))

_____________________________________________________________________________________________________________________________________________________________________
 UPDATE employees SET first_name = UPPER(first_name),
   last_name = UPPER(last_name)

_____________________________________________________________________________________________________________________________________________________________________
  item_count
  ----------
  4
  5
  6
  4
  4
  5

_____________________________________________________________________________________________________________________________________________________________________
  SELECT COUNT(customer_ID) FROM orders
  WHERE order_date >= GETDATE() - 90

_____________________________________________________________________________________________________________________________________________________________________
  SELECT COUNT(DISTINCT customer_ID) FROM orders
  WHERE order_date >= GETDATE() - 90

_____________________________________________________________________________________________________________________________________________________________________
  SELECT DISTINCT customer_ID, item_count FROM orders
  WHERE order_date >= '01/01/2000'
    AND order_date <= '01/31/2000'<a name="816"></a><a name="IDX-435"></a>

_____________________________________________________________________________________________________________________________________________________________________
 customer_ID item_count
 ----------- ----------
 101         4
 102         4
 102         5
 102         6
 103         5

_____________________________________________________________________________________________________________________________________________________________________
                           first_name  last_name
------  ----  -----------  ----------  ---------
konrad  king  konrad king  KONRAD      KING

_____________________________________________________________________________________________________________________________________________________________________
 ------------- -------------
 konrad king's 601 sql tips

_____________________________________________________________________________________________________________________________________________________________________
  SELECT LOWER('KONRAD '+'KING''<i class="emphasis">S'</i>),
    LOWER(SUBSTRING('601 SQL Tips Book',1,14))

_____________________________________________________________________________________________________________________________________________________________________
 SELECT LOWER(first_name), LOWER(last_name),
   LOWER(first_name+' ' +last_name), first_name, last_name
 FROM employees<a name="818"></a><a name="IDX-436"></a>

_____________________________________________________________________________________________________________________________________________________________________
 UPDATE employees SET first_name = LOWER(first_name),
   last_name = LOWER(last_name)

_____________________________________________________________________________________________________________________________________________________________________
 ------------
 KING, KONRAD

_____________________________________________________________________________________________________________________________________________________________________
 SELECT '>' + TRIM(last_name) + ', ' + TRIM(first_name)
 FROM employees

_____________________________________________________________________________________________________________________________________________________________________
 TRIM ([LEADING|TRAILING | BOTH] [<character to trim>] [FROM]
   <target string>)

_____________________________________________________________________________________________________________________________________________________________________
  PRINT STUFF('**Konrad King '' s Tips**',9,7, '' ' S 1001 SQL')

_____________________________________________________________________________________________________________________________________________________________________
  PRINT STUFF('**Konrad King''s Tips**',16,0,' 1001 SQL')

_____________________________________________________________________________________________________________________________________________________________________
 **Konrad King's  1001  SQL Tips**

_____________________________________________________________________________________________________________________________________________________________________
 **Konrad's 1001 SQL Tips**

_____________________________________________________________________________________________________________________________________________________________________
 First Initial &amp; Last Name
 -------------------------
 K. KING
 S. FIELDS
 D. JAMSA

_____________________________________________________________________________________________________________________________________________________________________
 SELECT STUFF(first_name,2,40,'. ' + last_name)
   AS 'First Initial &amp; Last Name' FROM employees<a name="825"></a><a name="IDX-439"></a>

_____________________________________________________________________________________________________________________________________________________________________
 STUFF(<string 1>, <starting position>,
       <length to delete from string 1>, <string 2>)

_____________________________________________________________________________________________________________________________________________________________________
  ------------
  Hello world!

_____________________________________________________________________________________________________________________________________________________________________
  <string expression> + <string expression>
     [...+ <last string expression>]

_____________________________________________________________________________________________________________________________________________________________________
  SELECT first_name + ' ' + last_name + ' wrote: "' + title +
    '" for ' + publisher + ' circa ' +
    CONVERT(VARCHAR(11),publish_date) + '.'
  FROM authors, titles
  WHERE author_ID = author
  ORDER BY last_name, first_name<a name="827"></a><a name="IDX-440"></a>

_____________________________________________________________________________________________________________________________________________________________________
  SELECT 'He' + 'llo' + ' ' + world!'

_____________________________________________________________________________________________________________________________________________________________________
 -----------------------------------------------------------
 Kris Jamsa wrote: "Java Programmer's Library" for Jamsa
   Press circa Jun  1 1996.
  Kris Jamsa wrote:   "1001 Windows 98 Tips" for Jamsa Press
    circa Jun  1 1998.
  Konrad King wrote: "SQL Tips &amp; Techniques" for Prima
    Publishing circa Feb  1 2002.
  Konrad King wrote: "Hands on PowerPoint 2000" for Jamsa
    Press circa Aug  1 1999.

_____________________________________________________________________________________________________________________________________________________________________
  SELECT 'There are ' + CONVERT(VARCHAR(COUNT(*))) +
    ' invoices on file.
  The oldest is dated ' +
    CONVERT(VARCHAR,MIN(invoice_date),1) +
  ' and the most recent is ' +
    CONVERT(VARCHAR,MAX(invoice_date),1) + '.'
  FROM invoices

_____________________________________________________________________________________________________________________________________________________________________
 -----------------------------------------------------------
 There are 24 invoices on file.
 The oldest is dated 06/30/99 and the most recent is 9/15/00

_____________________________________________________________________________________________________________________________________________________________________
 CONVERT (<data type> [(<length>)], <data to convert>
   [, <style>])

_____________________________________________________________________________________________________________________________________________________________________
    Make     Model
    -------  ---------
    Ford     Explorer
    Lincoln  Navigator
    Chevy    Vega
    Ford     Expedition
    Ford     Mustang
    Ford     Jaguar<a name="836"></a><a name="IDX-444"></a>

_____________________________________________________________________________________________________________________________________________________________________
  (SELECT * FROM a) INTERSECT (SELECT * FROM b)

_____________________________________________________________________________________________________________________________________________________________________
  (SELECT * FROM a) UNION (SELECT * FROM b)

_____________________________________________________________________________________________________________________________________________________________________
  TABLE A                    TABLE B
  Make      Model            Make  Model
  -------   ----------       ----  -------
  Ford      Explorer         Ford  Mustang
  Lincoln   Navigator        Ford  Explorer
  Chevy     Vega             Ford  Jaguar
  Ford      Expedition

_____________________________________________________________________________________________________________________________________________________________________
 (SELECT * FROM a) EXCEPT (SELECT * FROM b)

_____________________________________________________________________________________________________________________________________________________________________
 (SELECT * FROM a) INTERSECT (SELECT * FROM b)

_____________________________________________________________________________________________________________________________________________________________________
 Make     Model
 -------  ----------
 Lincoln  Navigator
 Chevy    Vega
 Ford     Expedition

_____________________________________________________________________________________________________________________________________________________________________
 Make   Model
 ----   ----------
 Ford   Explorer

_____________________________________________________________________________________________________________________________________________________________________
(SELECT * FROM a) EXCEPT (SELECT * FROM b)

_____________________________________________________________________________________________________________________________________________________________________
SELECT DISTINCT a.make, a.model FROM a
WHERE (a.make + a.model)
  NOT IN (SELECT b.make + b.model FROM b)

_____________________________________________________________________________________________________________________________________________________________________
SELECT DISTINCT a.make, a.model FROM a, b
WHERE a.make = b.make
  AND a.model = b.model

_____________________________________________________________________________________________________________________________________________________________________
    (SELECT vendor_ID, product, price FROM product_list_A)
  INTERSECT
    (SELECT vendor_ID, product, price FROM product_list_B)
  INTERSECT
    (SELECT vendor_ID, product, price FROM product_list_C)

_____________________________________________________________________________________________________________________________________________________________________
    (SELECT vendor_ID, product, price FROM product_list_A)
  UNION
    (SELECT vendor_ID, product, price FROM product_list_B)
  UNION
    (SELECT vendor_ID, product, price FROM product_list_C)

_____________________________________________________________________________________________________________________________________________________________________
   (SELECT make, model FROM a)
 INTERSECT
   (SELECT make, model FROM b)<a name="839"></a><a name="IDX-446"></a>

_____________________________________________________________________________________________________________________________________________________________________
 (SELECT * FROM a) INTERSECT (SELECT * FROM b)

_____________________________________________________________________________________________________________________________________________________________________
 CREATE TABLE a                  CREATE TABLE b
   (make,       VARCHAR(15),        (model        VARCHAR(15),
    model,      VARCHAR(15),         make         VARCHAR(15),
    sales_price MONEY)               sales_price MONEY)

_____________________________________________________________________________________________________________________________________________________________________
  (SELECT * FROM inventory_01) EXCEPT
  (SELECT * FROM inventory_02)

_____________________________________________________________________________________________________________________________________________________________________
 ((SELECT description FROM vendor_a_products)  EXCEPT
  (SELECT description FROM vendor_b_products)) EXCEPT
 (SELECT description FROM vendor_c_products)

_____________________________________________________________________________________________________________________________________________________________________
 (SELECT customer_ID FROM customers) EXCEPT
 (SELECT (customer_ID FROM orders WHERE item = 'Widget')

_____________________________________________________________________________________________________________________________________________________________________
 (SELECT student_ID FROM students
  WHERE class = 'freshman') EXCEPT
 (SELECT student_ID FROM classes WHERE class_ID = 'CHEM 101')

_____________________________________________________________________________________________________________________________________________________________________
  Full Name      First Name   Last Name
  ------------   ----------   ---------
  Konrad King    Konrad       King
  Sally Fields   Sally        Fields

_____________________________________________________________________________________________________________________________________________________________________
  PRINT
  POSITION ('Kingsly' IN 'My last name is king, not kingsly')

_____________________________________________________________________________________________________________________________________________________________________
 POSITION (<target string> IN <i class="emphasis"><source</i> string>)

_____________________________________________________________________________________________________________________________________________________________________
 SELECT employee_name AS 'Full Name',
   SUBSTRING(LTRIM(employee_name),1,
     CHARINDEX(' ',LTRIM(employee_name))-1) AS 'First Name',
   SUBSTRING(LTRIM(employee_name),
     CHARINDEX(' ',LTRIM(employee_name))+1,30)
   AS 'Last Name'
 FROM employees

_____________________________________________________________________________________________________________________________________________________________________
CHARINDEX(<target_string>,
  <source string>[, <start location>])

_____________________________________________________________________________________________________________________________________________________________________
PRINT POSITION ('k' IN 'My name is Konrad')

_____________________________________________________________________________________________________________________________________________________________________
PRINT POSITION ('k' IN 'My name is Konrad')<a name="843"></a><a name="IDX-448"></a>

_____________________________________________________________________________________________________________________________________________________________________
PRINT
CHARINDEX('King', 'My last name is king, not kingsly', 18)

_____________________________________________________________________________________________________________________________________________________________________
  MAX Digits Qty  MAX Len Desc + Units  MAX Len Unit Cost
  --------------  --------------------  -----------------
  2               31                    5

_____________________________________________________________________________________________________________________________________________________________________
  PRINT CHAR_LENGTH('Captain Kirk')

_____________________________________________________________________________________________________________________________________________________________________
 SELECT MAX (LEN(CONVERT(VARCHAR,qty))) AS 'MAX Digits Qty'
   MAX (LEN(description = units))  AS 'MAX Len Des + Units'
   MAX (LEN(CONVERT(VARCHAR,unit_cost)))AS 'MAX Len Unit Cost'<a name="846"></a><a name="IDX-450"></a>

_____________________________________________________________________________________________________________________________________________________________________
CHAR_LENGTH (<string expression>)

_____________________________________________________________________________________________________________________________________________________________________
 PRINT OCTET_LENGTH ('Yellow Brick Road')

_____________________________________________________________________________________________________________________________________________________________________
PRINT OCTET_LENGTH (0x1001000110011101)

_____________________________________________________________________________________________________________________________________________________________________
PRINT BIT_LENGTH (0x100111011111)

_____________________________________________________________________________________________________________________________________________________________________
PRINT BIT_LENGTH ('Yellow Brick Road')

_____________________________________________________________________________________________________________________________________________________________________
<datetime field> is either YEAR, MONTH, DAY, HOUR, MINUTE,
SECOND, TIMEZONE_HOUR or TIMEZONE_MINUTE

<datetime value> is a column, literal, variable, or
expression with a value of data type DATETIME

_____________________________________________________________________________________________________________________________________________________________________
DECLARE @date_string VARCHAR(19), @month INTEGER
SELECT @date_string = CONVERT(VARCHAR,GETDATE(),120)
SELECT @month = SUBSTRING(@date_string,5,2)
PRINT @month

_____________________________________________________________________________________________________________________________________________________________________
EXTRACT(<datetime field> FROM <datetime value>)

_____________________________________________________________________________________________________________________________________________________________________
PRINT EXTRACT(DAY FROM '2000-09-04 17:03:35.640')<a name="854"></a><a name="IDX-453"></a>

_____________________________________________________________________________________________________________________________________________________________________
PRINT EXTRACT(MINUTE FROM '2000-09-04 17:03:35.640')

_____________________________________________________________________________________________________________________________________________________________________
  May  9 2000  8:15PM

_____________________________________________________________________________________________________________________________________________________________________
 20:08:01.22

_____________________________________________________________________________________________________________________________________________________________________
 20;21:56:450

_____________________________________________________________________________________________________________________________________________________________________
 CURRENT_TIME (<decimal second precision>)<a name="856"></a><a name="IDX-454"></a>

_____________________________________________________________________________________________________________________________________________________________________
 PRINT CONVERT(VARCHAR,GETDATE(),14)

_____________________________________________________________________________________________________________________________________________________________________
 PRINT CURRENT_TIME(2)

_____________________________________________________________________________________________________________________________________________________________________
 PRINT GETDATE()

_____________________________________________________________________________________________________________________________________________________________________
 04 Sep 2000

_____________________________________________________________________________________________________________________________________________________________________
 20:21:56:450<a name="858"></a><a name="IDX-455"></a>

_____________________________________________________________________________________________________________________________________________________________________
 PRINT CONVERT(VARCHAR,GETDATE(),14)

_____________________________________________________________________________________________________________________________________________________________________
 PRINT GETDATE()

_____________________________________________________________________________________________________________________________________________________________________
 Sep  4 2000  9:19PM

_____________________________________________________________________________________________________________________________________________________________________
PRINT CONVERT(VARCHAR,GETDATE(),106)

_____________________________________________________________________________________________________________________________________________________________________
 <date value><space><time value>

_____________________________________________________________________________________________________________________________________________________________________
 2000-09-05  05:40:01:547

_____________________________________________________________________________________________________________________________________________________________________
 PRINT CURRENT_TIMESTAMP

_____________________________________________________________________________________________________________________________________________________________________
 PRINT 'The current TIMESTAMP is: ' +
   CONVERT(VARCHAR, CURRENT_TIMESTAMP) +
   ' and  the GETDATE() value is: ' +
   CONVERT(VARCHAR,CURRENT_TIMESTAMP) + '.'

_____________________________________________________________________________________________________________________________________________________________________
 The current TIMESTAMP is: Sep  5 2000  6:54AM and the
   GETDATE() value is: Sep  5 2000  6:54AM

_____________________________________________________________________________________________________________________________________________________________________
 INSERT INTO orders (date_order_placed)
   VALUES (CONVERT(VARCHAR,GETDATE(),101)

_____________________________________________________________________________________________________________________________________________________________________
 INSERT INTO orders (date_order_placed)
   VALUES (CURRENT_DATE)

_____________________________________________________________________________________________________________________________________________________________________
 INSERT INTO orders (order_timestamp)
   VALUES (CONVERT(VARCHAR,CURRENT_TIMESTAMP,21))

_____________________________________________________________________________________________________________________________________________________________________
 INSERT INTO orders (order_timestamp)
   VALUES (CONVERT(VARCHAR,GETDATE(),21))

_____________________________________________________________________________________________________________________________________________________________________
 INSERT INTO orders (time_order_placed)
   VALUES (CURRENT_TIME)

_____________________________________________________________________________________________________________________________________________________________________
 INSERT INTO orders (time_order_placed)
   VALUES(CONVERT(VARCHAR,GETDATE(), 8))<a name="863"></a><a name="IDX-457"></a>

_____________________________________________________________________________________________________________________________________________________________________
  PRINT CAST('-12.35' AS INTEGER)

_____________________________________________________________________________________________________________________________________________________________________
 CAST (<value expression> AS <data type>)

_____________________________________________________________________________________________________________________________________________________________________
 CAST (<value expression> AS <data type>)

_____________________________________________________________________________________________________________________________________________________________________
 PRINT CAST('Hello' AS INTEGER)

_____________________________________________________________________________________________________________________________________________________________________
SELECT customer_ID, CAST (order_date AS CHAR(11)),
  CAST(date_shipped as CHAR(11)), order_total FROM Orders

_____________________________________________________________________________________________________________________________________________________________________
SELECT customer_name, product_code, qty, amount
FROM customers, orders
WHERE CUSTOMER_NUM = CAST (customer_ID INTEGER)
ORDER BY customer_name

_____________________________________________________________________________________________________________________________________________________________________
Server: Msg 8115, Level 16, State 5, Line 1
Arithmetic overflow error converting numeric to data type
  varchar.

_____________________________________________________________________________________________________________________________________________________________________
 CASE WHEN <search condition> THEN <expression>
  [...WHEN <last search condition>
        THEN <last expression>]
 [ELSE <expression>]
 END

_____________________________________________________________________________________________________________________________________________________________________
 first_name   last_name  Rating           pts_accumulated
 -----------  ---------  ---------------  --------------
 Sally        Fields     Patron           1300
 Lenny        Hall       Premium Player   50000
 Wally        Wells      Regular          13000
 Brent        McCoy      Preferred Guest  25000
 Erwin        Shiff      Preferred Guest  45000
 Bruce        Wayne      Premium Player   75000
 James        Bond       High Roller      107500

_____________________________________________________________________________________________________________________________________________________________________
 SELECT first_name, last_name,
   CASE WHEN pts_accumulated >= 100000 THEN 'High Roller'
        WHEN pts_accumulated >= 50000 THEN 'Premium Player'
        WHEN pts_accumulated >= 25000 THEN 'Preferred Guest'
        WHEN pts_accumulated >= 12500 THEN 'Regular'
        ELSE 'Patron'
   END AS 'Rating',
   pts_accumulated
 FROM casino_quests

_____________________________________________________________________________________________________________________________________________________________________
 metal     desired_lbs lbs_on_hand base_price current_price
 --------  ----------- ----------- ---------- -------------
 Tin       1000        1625        .7500     .750000
 Iron      1500        625         .2500     .312500
 Aluminum  2000        850         .4500     .562500

_____________________________________________________________________________________________________________________________________________________________________
 SELECT metal, desired_lbs,
   (SELECT SUM(lbs) FROM scrap_inv
      WHERE scrap_inv.metal = scrap_master.metal) AS
      'lbs_on_hand',
   base_price,
   CASE WHEN (SELECT SUM(lbs) FROM scrap_inv
              WHERE scrap_inv.metal = scrap_master.metal)   <=
          desired_lbs THEN base_price * 1.25
        ELSE base_price
   END AS 'current_price'
 FROM scrap_master

_____________________________________________________________________________________________________________________________________________________________________
 SELECT metal, desired_lbs,
   (SELECT SUM(lbs) FROM scrap_inv
      WHERE scrap_inv.metal = scrap_master.metal) AS
     'lbs_on_hand',
   base_price,
   CASE  WHEN (SELECT SUM(lbs) FROM scrap_inv
               WHERE scrap_inv.metal = scrap_master.metal) <=<a name="874"></a><a name="IDX-463"></a>
                   desired_lbs
          THEN CASE WHEN (SELECT SUM(lbs) FROM scrap_inv
                          WHERE scrap_inv.metal =
                            scrap_master.metal) > 0
                  THEN   (SELECT AVG(purchase_price) * 1.25
                          FROM scrap_inv
                          WHERE scrap_inv.metal =
                                  scrap_master.metal)
                    ELSE base_price * 1.25
               END
          ELSE base_price
     END AS 'current_price'
   FROM scrap_master

_____________________________________________________________________________________________________________________________________________________________________
  NULLIF (<first expression>,<second expression>)

_____________________________________________________________________________________________________________________________________________________________________
  UPDATE employees SET manager =
    CASE WHEN manager = 101 THEN NULL
         ELSE manager
    END<a name="876"></a><a name="IDX-464"></a>

_____________________________________________________________________________________________________________________________________________________________________
 UPDATE employees  SET salary = CASE salary WHEN -1 then NULL
                                            ELSE salary
                                END

_____________________________________________________________________________________________________________________________________________________________________
 UPDATE employees SET manager = NULLIF(manager,101)

_____________________________________________________________________________________________________________________________________________________________________
 UPDATE employees SET salary = NULLIF(salary,-1)

_____________________________________________________________________________________________________________________________________________________________________
  SELECT * FROM employees
  WHERE CAST(hire_date AS CHARACTER(11)) = 'Aug 20 2000'

_____________________________________________________________________________________________________________________________________________________________________
 CAST (<value  expression> AS <data type>)

_____________________________________________________________________________________________________________________________________________________________________
 SELECT customer_name, employee_name AS 'sold_by'
 FROM   employees, customers
 WHERE  emp_ID = CAST(salesperson_ID AS INTEGER)

_____________________________________________________________________________________________________________________________________________________________________
 SELECT employees WHERE hire_date = 'Aug 20 2000'

_____________________________________________________________________________________________________________________________________________________________________
  SET :date_hired = (SELECT CAST(hire_date AS CHAR(19))
                     FROM employees
                     WHERE employee_id = 101)

_____________________________________________________________________________________________________________________________________________________________________
 SELECT <column list>
 FROM <table  list>
 [WHERE <search condition(s)>]
 [GROUP BY <grouping column list>]
 [HAVING <search condition(s)>]
 [ORDER BY <column list>]

_____________________________________________________________________________________________________________________________________________________________________
 SELECT customers.cust_ID, cust_name, inv_total
 FROM customers, invoices
 WHERE customers.cust_ID = invoices.cust_ID

_____________________________________________________________________________________________________________________________________________________________________
 SELECT customers.cust_ID, cust_name, inv_total
 FROM customers, invoices

_____________________________________________________________________________________________________________________________________________________________________
 SELECT customers.cust_ID, cust_name, SUM(inv_total)
 FROM customers, invoices
 WHERE customers.cust_ID = invoices.cust_ID
 GROUP BY customers.cust_ID, cust_name
 HAVING customers.cust_ID > 500
 ORDER BY cust_name

_____________________________________________________________________________________________________________________________________________________________________
 SELECT customers.cust_ID, cust_name, SUM(inv_total)
 FROM customers, invoices
 WHERE customers.cust_ID = invoices.cust_ID
 GROUP BY customers.cust_ID, cust_name
 HAVING customers.cust_ID > 500

_____________________________________________________________________________________________________________________________________________________________________
 SELECT customers.cust_ID, cust_name, SUM(inv_total)
 FROM customers, invoices
 WHERE customers.cust_ID = invoices.cust_ID
 GROUP BY customers.cust_ID, cust_name

_____________________________________________________________________________________________________________________________________________________________________
  SELECT * FROM customers

_____________________________________________________________________________________________________________________________________________________________________
 DELETE FROM invoices WHERE invoice_date < '01/01/1900'

_____________________________________________________________________________________________________________________________________________________________________
 SELECT * FROM customers WHERE 5 = 5

_____________________________________________________________________________________________________________________________________________________________________
 SELECT cust_ID, cust_name, last_paid, amt_paid, still_due
 FROM   customers
 WHERE (GETDATE() - last_paid) > 30
 AND    total_due > 500

_____________________________________________________________________________________________________________________________________________________________________
 UPDATE customers
 SET salesperson = 'Konrad' WHERE salesperson = 'Kris'

_____________________________________________________________________________________________________________________________________________________________________
 <test expression>
    BETWEEN <low expression> AND <high expression>

_____________________________________________________________________________________________________________________________________________________________________
 SELECT * FROM employees WHERE date_hired
 BETWEEN '01/31/2000' AND '01/01/2000'

_____________________________________________________________________________________________________________________________________________________________________
 SELECT * FROM employees
 WHERE (total_sales - 25000)
   BETWEEN (SELECT AVG(total_sales) FROM employees)
     AND   (SELECT AVG(total_sales) * 1.2 FROM employees)

_____________________________________________________________________________________________________________________________________________________________________
 SELECT first_name, last_name FROM employees
 WHERE last_name >= 'J' and last_name <= 'Qz'<a name="892"></a><a name="IDX-471"></a>

_____________________________________________________________________________________________________________________________________________________________________
 SELECT first_name, last_name FROM employees
 WHERE last_name BETWEEN 'J' and 'Qz'

_____________________________________________________________________________________________________________________________________________________________________
SELECT * FROM employees WHERE date_hired
BETWEEN '01/01/2000' AND '01/31/2000'

_____________________________________________________________________________________________________________________________________________________________________
 UPDATE invoices SET sales_tax = 0.00
 WHERE ship_to_state NOT IN ('NV', 'CA', 'UT', 'TX')

_____________________________________________________________________________________________________________________________________________________________________
 UPDATE invoices SET sales_tax = invoice_total * 0.07
 WHERE ship_to_state = 'NV' OR ship_to_state = 'CA' OR
       ship_to_state = 'UT' OR ship_to_state = 'TX'

_____________________________________________________________________________________________________________________________________________________________________
 UPDATE invoices SET sales_tax = invoice_total * 0.07
 WHERE ship_to_state IN ('NV', 'CA', 'UT', 'TX')

_____________________________________________________________________________________________________________________________________________________________________
<test expression>
   [NOT] IN (<first value> [...,.<last value>])

_____________________________________________________________________________________________________________________________________________________________________
 course_ID   description
 ---------   -----------------------------------------
 CS101       Introduction to Computer Science
 BS109       Biological Sciences - Anatomy &amp; Physiology
 MS107       Beginning Quadratic Equations

_____________________________________________________________________________________________________________________________________________________________________
 SELECT first_name, last_name FROM faculty
 WHERE last_name LIKE 'Ki%'

_____________________________________________________________________________________________________________________________________________________________________
first_name  last_name
----------  ---------
Konrad      King
Wally       Kingsly
Sam         Kingston

_____________________________________________________________________________________________________________________________________________________________________
SELECT course_ID, description FROM curriculum
WHERE course_ID LIKE '_S10_'

_____________________________________________________________________________________________________________________________________________________________________
 SELECT cust_ID, cust_name, discount FROM customers
 WHERE discount LIKE "%S%" ESCAPE 'S'

_____________________________________________________________________________________________________________________________________________________________________
 SELECT product_code, description FROM inventory
 WHERE product_code LIKE "XY$_%" ESCAPE '$'

_____________________________________________________________________________________________________________________________________________________________________
  SELECT * FROM customers WHERE cust_name = 'KING'
  SELECT * FROM customers WHERE cust_name <> 'SMITH'

_____________________________________________________________________________________________________________________________________________________________________
  SELECT * FROM customers WHERE cust_name LIKE 'KING%'<a name="900"></a><a name="IDX-475"></a>

_____________________________________________________________________________________________________________________________________________________________________
 SELECT * FROM customers WHERE cust_name LIKE 'KING'

_____________________________________________________________________________________________________________________________________________________________________
 SELECT * FROM customers WHERE cust_name NOT LIKE 'SMITH'

_____________________________________________________________________________________________________________________________________________________________________
 SELECT * FROM customers WHERE notes NOT LIKE "%discount%"

_____________________________________________________________________________________________________________________________________________________________________
SELECT * FROM customers WHERE notes LIKE "%give%discount%"

_____________________________________________________________________________________________________________________________________________________________________
  SELECT * FROM employees
  WHERE badge LIKE '[1-9][^a-zA-Z][^a-zA-Z][^a-zA-Z]'

_____________________________________________________________________________________________________________________________________________________________________
 SELECT * FROM employees WHERE badge LIKE '1[a-cA-C]__'<a name="902"></a><a name="IDX-476"></a>

_____________________________________________________________________________________________________________________________________________________________________
 SELECT * FROM employees WHERE badge LIKE '1___'

_____________________________________________________________________________________________________________________________________________________________________
  NULL <> NULL

_____________________________________________________________________________________________________________________________________________________________________
  NULL = NULL

_____________________________________________________________________________________________________________________________________________________________________
  SELECT * FROM employees WHERE manager IS NULL<a name="904"></a><a name="IDX-477"></a>

_____________________________________________________________________________________________________________________________________________________________________
 NULL = NULL

_____________________________________________________________________________________________________________________________________________________________________
 NULL = NULL

_____________________________________________________________________________________________________________________________________________________________________
 SELECT * FROM employees WHERE manager = NULL

_____________________________________________________________________________________________________________________________________________________________________
 SELECT * FROM employees WHERE manager IS NOT NULL

_____________________________________________________________________________________________________________________________________________________________________
 <scalar expression> <comparison operator> ALL <subquery>

_____________________________________________________________________________________________________________________________________________________________________
 SELECT * FROM employees
 WHERE sales > ALL (SELECT sales FROM employees
                    WHERE OFFICE <> 1)

_____________________________________________________________________________________________________________________________________________________________________
SELECT * FROM titles
WHERE (SELECT SUM(qty_sold)
       FROM sales WHERE sales.isbn = titles.isbn)
  > ALL (SELECT SUM(qty_sold)
         FROM sales WHERE sales.isbn <> titles.isbn)

_____________________________________________________________________________________________________________________________________________________________________
 <scalar expression>
   <comparison operator> {SOME|ANY) <subquery>

_____________________________________________________________________________________________________________________________________________________________________
 SELECT * FROM employees
 WHERE sales > SOME (SELECT sales FROM employees
                     WHERE OFFICE <> 1)

_____________________________________________________________________________________________________________________________________________________________________
 SELECT * FROM titles
 WHERE (SELECT SUM(qty_sold)
        FROM sales WHERE sales.isbn = titles.isbn)
   > ANY (SELECT qty_sold
          FROM sales WHERE sales.isbn <> titles.isbn)

_____________________________________________________________________________________________________________________________________________________________________
SELECT * FROM <table a>
WHERE b > ANY <subquery results table values>

_____________________________________________________________________________________________________________________________________________________________________
  [NOT] UNIQUE <subquery>

_____________________________________________________________________________________________________________________________________________________________________
 SELECT emp_ID, first_name, last_name FROM employees
 Where UNIQUE (SELECT salesperson FROM invoices
               WHERE invoice_date >= '9/1/2000' AND
                     invoice_date <= '9/30/2000' AND
                     invoices.salesperson = employees.emp_ID)

_____________________________________________________________________________________________________________________________________________________________________
Salesperson  cust_ID  sales_total
-----------  -------  -----------
101          NULL     100.00
101          1000     NULL
101          NULL     NULL
101          1000     100.00

_____________________________________________________________________________________________________________________________________________________________________
SELECT emp_ID, first_name, last_name FROM employees
WHERE (SELECT count(salesperson) FROM invoices
       WHERE invoice_date >= '9/1/2000' AND
             invoice_date <= '9/30/2000' AND
             invoices.salesperson = employees.emp_ID) <= 1

_____________________________________________________________________________________________________________________________________________________________________
  <temporal value>::
     {DATE <date>}|{TIME <time>)|{TIMESTAMP <datetime>}

  <temporal argument>::
     {DATE <date>)|[TIME <time>}|{TIMESTAMP <datetime>} |<a name="913"></a><a name="IDX-482"></a>
   {INTERVAL <interval>}

<interval>::
   '<integer value>' {YEAR|MONTH|DAY|HOUR|MINUTE|SECOND}

_____________________________________________________________________________________________________________________________________________________________________
 (<temporal value 1>,
    {<temporal value 2>|<temporal argument>}) OVERLAPS
(<temporal value 3>,
    {<temporal value 4>|<temporal argument>})

_____________________________________________________________________________________________________________________________________________________________________
 (TIME '09:23:00', TIME '13:45:00') OVERLAPS
 (TIME '14:00:00', TIME '14:25:00')

_____________________________________________________________________________________________________________________________________________________________________
(DATE '01-01-2000', INTERVAL '03' MONTHS) OVERLAPS
(DATE '03-15-2000', INTERVAL '10' DAYS)

_____________________________________________________________________________________________________________________________________________________________________
    SELECT SUM(invoice_total) AS 'Total Sales' FROM invoices
    WHERE invoice_date >= (GETDATE()- 365)<a name="915"></a><a name="IDX-483"></a>

_____________________________________________________________________________________________________________________________________________________________________
 cust_ID   Total Sales
 -------   -----------
 1         7378
 5         7378
 7         22654
 8         1290
 9         8669

_____________________________________________________________________________________________________________________________________________________________________
 SELECT cust_ID, SUM(invoice_total) AS 'Total sales'
 FROM invoices
 WHERE invoice_date >= (GETDATE() - 365)
 GROUP BY cust_ID

_____________________________________________________________________________________________________________________________________________________________________
 Total Sales
 -----------
 47369

_____________________________________________________________________________________________________________________________________________________________________
 SELECT cust_ID FROM invoices
 WHERE inv_date >= (GETDATE() - 365)
 GROUP BY cust_ID

_____________________________________________________________________________________________________________________________________________________________________
SELECT DISTINCT cust_ID FROM INVOICES
WHERE inv_date >= (GETDATE() - 365)

_____________________________________________________________________________________________________________________________________________________________________
SELECT SUM(invoice_total) AS 'Total Sales',
  AVG(invoice_total) AS 'Average Invoice'
FROM invoices
WHERE invoice_date >= (GETDATE() - 365)
GROUP BY cust_ID

_____________________________________________________________________________________________________________________________________________________________________
Total Sales  Average Invoice
-----------  ---------------
7378         7378.000000
7378         7378.000000
22654        663.5000000
1290         258.000000
8669         4334.500000<a name="918"></a><a name="IDX-485"></a>

_____________________________________________________________________________________________________________________________________________________________________
SELECT state, COUNT(*) AS 'Customer Count' FROM customers
GROUP BY state

_____________________________________________________________________________________________________________________________________________________________________
 SELECT state, COUNT(*) AS 'Customer Count' FROM customers
 GROUP BY state

_____________________________________________________________________________________________________________________________________________________________________
 SELECT state, salesperson, COUNT(*) AS 'Customer Count'
 FROM customers
 GROUP BY state, salesperson

_____________________________________________________________________________________________________________________________________________________________________
 state  salesperson  Customer Count
 -----  -----------  --------------
 AZ     101          1
 CA     101          3
 LA     101          2
 HI     102          1
 LA     102          2
 NV     102          2
 TX     102          1
 AZ     103          1
 LA     103          1
 NM     103          1
 TX     103          1

_____________________________________________________________________________________________________________________________________________________________________
  SELECT state, salesperson, COUNT(*) AS 'Customer Count'
  FROM customers
  GROUP BY state, salesperson
  ORDER BY state, "Customer Count"

_____________________________________________________________________________________________________________________________________________________________________
 ORDER BY state
 ORDER BY state "Customer Count"
 ORDER BY "Customer Count" state
 ORDER BY "Customer Count"

_____________________________________________________________________________________________________________________________________________________________________
 SELECT state, COUNT(*) AS 'Customer Count' FROM customers
 GROUP BY state
 ORDER BY "Customer Count" DESC<a name="926"></a><a name="IDX-489"></a>

_____________________________________________________________________________________________________________________________________________________________________
 SELECT state, COUNT(*) AS 'Customer Count' FROM customers
 GROUP BY state

_____________________________________________________________________________________________________________________________________________________________________
state  salesperson  Customer Count
-----  -----------  --------------
AZ     101          1
AZ     103          1
CA     101          3
HI     102          1
LA     101          2
LA     102          2
LA     103          1
NM     103          1
NV     102          2
TX     102          1
TX     103          1

_____________________________________________________________________________________________________________________________________________________________________
   cust_id  cust_name      state  salesperson  total_purchases
   -------  -------------  -----  -----------  ---------------
   1        CA Customer 1  CA     101          78252.0000
   2        CA Customer 2  CA     101          45852.0000
   6        NV Customer 1  NV     102          12589.0000
   7        CA Customer 3  CA     101          75489.0000
   12       NV Customer 2  NV     102          56789.0000

                                               sum
                                               ===============
                                               268971.0000

                                               avg
                                               ===============
                                               53794.2000

   cnt
   ==========
   5

_____________________________________________________________________________________________________________________________________________________________________
 SELECT * FROM customers WHERE state IN ('CA','NV')
 COMPUTE SUM(total_purchases), AVG(total_purchases,
   COUNT(cust_ID)

_____________________________________________________________________________________________________________________________________________________________________
  SELECT state, salesperson, tot_purchases
  FROM vw_state_emp_tot_purchases
  ORDER BY state, salesperson
  COMPUTE SUM(tot_purchases) BY state

_____________________________________________________________________________________________________________________________________________________________________
  SELECT state, salesperson,
         SUM(total_purchases) AS 'Tot_Purchases"
  FROM customers
  GROUP BY state, salesperson
  ORDER BY state, salesperson<a name="932"></a><a name="IDX-493"></a>

_____________________________________________________________________________________________________________________________________________________________________
 CREATE VIEW vw_state_emp_tot_purchases AS
 SELECT state, salesperson,
   SUM(total_purchases) AS 'Tot_Purchases)

_____________________________________________________________________________________________________________________________________________________________________
 state  salesperson  total_purchases
 -----  -----------  ---------------
 CA     101          78252.0000
 CA     101          45852.0000
 CA     101          75489.0000

                     sum
                     ===============
                     199593.0000<a name="931"></a><a name="IDX-492"></a>
          LA     101         74815.0000
          LA     101         15823.0000

                             sum
                             ===============
                              90638.0000

          LA     102         96385.0000
          LA     102         85247.0000

                             sum
                             ===============
                             181632.0000

          LA     103         45612.0000

                             sum
                             ===============
                             45612.0000

                             sum
                             ===============
                              517475.0000

_____________________________________________________________________________________________________________________________________________________________________
SELECT state, salesperson, total_purchases FROM customers
WHERE state IN ('LA', 'CA')
ORDER BY state, salesperson
COMPUTE SUM(total_purchases) BY state, salesperson
COMPUTE SUM(total_purchases)

_____________________________________________________________________________________________________________________________________________________________________
 state  salesperson  amount_purchased
 -----  -----------  ----------------
 NULL   NULL         45612.0000
 NULL   NULL         15826.0000
 NULL   101          45852.0000
 NULL   101          74815.0000
 NULL   101          75489.0000
 AZ     NULL         75815.0000
 AZ     103          36958.0000
 CA     101          78252.0000
 LA     NULL         96385.0000
 LA     NULL         85247.0000

_____________________________________________________________________________________________________________________________________________________________________
 state  salesperson  Total Purchases
 -----  -----------  ---------------
 NULL   NULL         61438.0000
 NULL   101          196156.0000
 AZ     NULL         75815.0000
 AZ     103          36958.0000
 CA     101          78252.0000
 LA     NULL         181632.0000

_____________________________________________________________________________________________________________________________________________________________________
SELECT state, salesperson,
  SUM(amount_purchased) AS 'Total Purchases'
FROM customers
GROUP BY state, salesperson
ORDER BY state, salesperson

_____________________________________________________________________________________________________________________________________________________________________
 SELECT emp_ID, RTRIM(first_name)+' '+last_name
   AS 'Employee Name', SUM(amt_purchased) AS 'Total Sales'
 FROM customers, employees
 WHERE customers.salesperson = employees.emp_ID
 GROUP BY RTRIM(first_name)+' '+last_name
 HAVING (SUM(amt_purchased) < 250000) AND (emp_ID >= 102)
 ORDER BY "Total Sales"

_____________________________________________________________________________________________________________________________________________________________________
 SELECT emp_ID, RTRIM(first_name)+' '+last_name
   AS 'Employee Name', SUM(amt_purchased) AS 'Total Sales'
 FROM customers, employees<a name="937"></a><a name="IDX-496"></a>
   WHERE (customers.salesperson = employees.emp_ID)
   AND (emp_ID >= 102)
   GROUP BY RTRIM(first_name)+' '+last_name
   HAVING (SUM(amt_purchased) < 250000)
   ORDER BY "Total Sales"

_____________________________________________________________________________________________________________________________________________________________________
 SELECT RTRIM(first_name)+' '+last_name AS 'Employee Name',
   SUM(amt_purchased) AS 'Total Sales'
 FROM customers, employees
 WHERE customers.salesperson = employees.emp_ID
 GROUP BY RTRIM(first_name)+' '+last_name
 HAVING SUM(amt_purchased) > 250000
 ORDER BY "Total Sales"

_____________________________________________________________________________________________________________________________________________________________________
 SELECT state, SUM(amt_purchased) FROM customers
 WHERE STATE IN ('CA','NV','LA')
 GROUP BY state
 HAVING SUM(amt_purchased) < 250000

_____________________________________________________________________________________________________________________________________________________________________
 SELECT SUM(amt_purchased) FROM customers
 HAVING (SUM(amt_purchased) < 250000)
 AND (state IN ('CA','NV','LA'))

_____________________________________________________________________________________________________________________________________________________________________
 SELECT SUM(amt_purchased) FROM customers
 HAVING SUM(amt_purchased) < 250000

_____________________________________________________________________________________________________________________________________________________________________
 Server: Msg 8119, Level 16, State 1, Line 1
 Column 'customers.state' is invalid in the having clause
   because it is not contained in an aggregate function and
   there is no GROUP BY clause.

_____________________________________________________________________________________________________________________________________________________________________
  SELECT state, COUNT(*) AS 'Customer Count',
    (COUNT(*) - COUNT(amt_purchased)) AS 'NULL Sales Count'
    SUM(amt_purchased) AS 'Sales' FROM Customers
  GROUP BY state
  HAVING SUM(amt_purchased) < 50000

_____________________________________________________________________________________________________________________________________________________________________
  State  Customer Count  NULL Sales Count  sales
  -----  --------------  ----------------  ----------
  A2     2               0                 33399.0000

_____________________________________________________________________________________________________________________________________________________________________
  State  Customer Count  NULL Sales Count  Sales
  -----  --------------  ----------------  ----------
  AZ     2               0                 33394.0000
  CA     4               4                 NULL

_____________________________________________________________________________________________________________________________________________________________________
SELECT state, COUNT(*) AS 'Customer Count',
  (COUNT(*) - COUNT(amt_purchased)) AS 'NULL Sales Count'
  SUM(amt_purchased) AS 'Sales' FROM Customers
GROUP BY state
HAVING (SUM(amt_purchased) < 50000)
OR (SUM(amt_purchased) IS NULL)

_____________________________________________________________________________________________________________________________________________________________________
  <owner name>.<table name><a name="948"></a><a name="IDX-501"></a>

_____________________________________________________________________________________________________________________________________________________________________
 SELECT * FROM customers

_____________________________________________________________________________________________________________________________________________________________________
 SELECT * FROM mary.customers

_____________________________________________________________________________________________________________________________________________________________________
 SELECT * FROM pubs.dbo.authors

_____________________________________________________________________________________________________________________________________________________________________
 SELECT emp_ID, au_lname, au_fname
 FROM employees, pubs.dbo.authors
 WHERE employees.SSAN = pubs.dbo.authors.au_ID

_____________________________________________________________________________________________________________________________________________________________________
<database name>.<owner name>.<table name>

_____________________________________________________________________________________________________________________________________________________________________
Server: Msg 229, Level 14, State 5, Line 1
SELECT permission denied on object 'authors', database
  'pubs', owner 'dbo'.

_____________________________________________________________________________________________________________________________________________________________________
  SELECT * FROM customers, invoices

' cust_ID cust_name    inv_date   inv_no cust_ID inv_total
  ------- ------------ ---------- ------ ------- ---------
  101     Customer 101 01/02/2000 1      101     15874.0000
  101     Customer 101 01/05/2000 2      202     6859.0000
  101     Customer 101 03/05/2000 3      101     20225.0000
  101     Customer 101 09/05/2000 4      101     30228.0000
  101     Customer 101 09/27/2000 5      202     7400.0000
  202     Customer 202 01/02/2000 1      101     15874.0000
  202     Customer 202 01/05/2000 2      202     6859.0000
  202     Customer 202 03/05/2000 3      101     20225.0000
  202     Customer 202 09/05/2000 4      101     30228.0000
  202     Customer 202 09/27/2000 5      202     7400.0000
  205     Customer 205 01/02/2000 1      101     15874.0000
  205     Customer 205 01/05/2000 2      202     6859.0000
  205     Customer 205 03/05/2000 3      101     20225.0000
  205     Customer 205 09/05/2000 4      101     30228.0000
  205     Customer 205 09/27/2000 5      202     7400.0000<a name="951"></a><a name="IDX-503"></a>

_____________________________________________________________________________________________________________________________________________________________________
 SELECT * FROM table_a, table_b, table_c

_____________________________________________________________________________________________________________________________________________________________________
CUSTOMERS table        INVOICES table
====================   ===================================
cust_ID cust_name      inv_date   inv_no cust_ID inv_total
------- ------------   ---------- ------ ------- ---------
101     Customer 101   01/02/2000 1      101     15874
202     Customer 202   01/05/2000 2      202     6859
205     Customer 205   03/05/2000 3      101     20225
                       09/05/2000 4      101     30228
                       09/27/2000 5      202     7400

_____________________________________________________________________________________________________________________________________________________________________
      SELECT * FROM customers<a name="953"></a><a name="IDX-504"></a>

_____________________________________________________________________________________________________________________________________________________________________
 SELECT * FROM students, classes

_____________________________________________________________________________________________________________________________________________________________________
SELECT * FROM students, classes, teachers

_____________________________________________________________________________________________________________________________________________________________________
 SELECT * FROM students, classes

_____________________________________________________________________________________________________________________________________________________________________
 SELECT {<column name list> | *}
 FROM <table 1>, <table 2>
 WHERE <PRIMARY KEY column name> = <FOREIGN KEY column name>

_____________________________________________________________________________________________________________________________________________________________________
SELECT * FROM students CROSS JOIN classes

_____________________________________________________________________________________________________________________________________________________________________
  f_name l_name   inv_num inv_date                Balance Due
  ------ -------- ------- ----------------------- -----------
  Walter Winchell 2001    2000-01-01 00:00:00.000 .0000
  Konrad King     3010    2000-07-01 00:00:00.000 3200.0000
  Walter Winchell 2730    2000-05-01 00:00:00.000 23750.0000
  Walter Winchell 9050    2000-09-29 00:00:00.000 19300.0000<a name="959"></a><a name="IDX-507"></a>

_____________________________________________________________________________________________________________________________________________________________________
 SELECT f_name, l_name, inv_num, inv_date,
   (inv_total - amt_paid) AS 'Balance Due'
 FROM invoices, customers
 WHERE CID = ID

_____________________________________________________________________________________________________________________________________________________________________
   item_number  description           qty_on_hand
   -----------  --------------------  -----------
   1            Item 1 from Vendor 1  111
   2            Item 2 from Vendor 1  222
   2            Item 2 from Vendor 1  111
   2            Item 2 from Vendor 1  111
   2            Item 2 from Vendor 2  222
   2            Item 2 from Vendor 2  111
   2            Item 2 from Vendor 2  111
   3            Item 3 from Vendor 1  333
   3            Item 3 from Vendor 3  333

_____________________________________________________________________________________________________________________________________________________________________
  SELECT inventory.item_number, description, qty_on_hand
  FROM inventory, item_master
  WHERE (inventory.item_number = item_master.item_number)
  AND   (inventory.vendor_code = item_master.vendor_code)
  ORDER BY description

_____________________________________________________________________________________________________________________________________________________________________
 item_number  description           qty_on_hand
 -----------  --------------------  -----------
 1            Item 1 from Vendor 1  111
 2            Item 2 from Vendor 1  111
 3            Item 3 from Vendor 1  111
 2            Item 2 from Vendor 2  222
 3            Item 3 from Vendor 3  333

_____________________________________________________________________________________________________________________________________________________________________
 SELECT inventory.item_number, description, qty_on_hand
 FROM inventory, item_master
 WHERE inventory.item_number = item_master.item_number
 ORDER BY description

_____________________________________________________________________________________________________________________________________________________________________
 SELECT f_name, l_name, inv_no, inv_date,
   (inv_total - amt_paid) AS 'Balance Due',
   RTRIM(first_name)+' '+last_name AS 'Salesperson'
 FROM invoices, customers, employees
 WHERE (customers.ID = invoices.CID)
 AND   (invoices.salesrep = employees.emp_ID)

_____________________________________________________________________________________________________________________________________________________________________
 SELECT f_name, l_name, inv_num, inv_date,
   (inv_total - amt_paid) AS 'Balance Due'
 FROM invoices, customers
 WHERE invoices.CID = customers.ID

_____________________________________________________________________________________________________________________________________________________________________
  SELECT first_name, last_name, title
  FROM manuals, employees
  WHERE manuals.for_dept = employees.dept

_____________________________________________________________________________________________________________________________________________________________________
 first_name  last_name  title
 ----------  ---------  ----------------------------
 Richard     Kimbal     Handling Complaints
 Richard     Kimbal     Efficient Order Taking
 Richard     Kimbal     Frequently Asked Questions
 Hellen      Waters     Handling Complaints
 Hellen      Waters     Efficient Order Taking
 Hellen      Waters     Frequently Asked Questions
 Ed          Norton     Prospecting
 Ed          Norton     Working Callbacks
 Ed          Norton     Making Referral Calls
 Steve       Forbes     Prospecting
 Steve       Forbes     Working Callbacks
 Steve       Forbes     Making Referral Calls
 Charles     Coulter    Mechanics of the Pre-Close
 Charles     Coulter    Successful Closing Strategies
 Charles     Coulter    Proper Menu Planning
 Ralph       Cramden    Mechanics of the Pre-Close
 Ralph       Cramden    Successful Closing Strategies
 Ralph       Cramden    Proper Menu Planning

_____________________________________________________________________________________________________________________________________________________________________
SELECT first_name, last_name, card_date, start_time,
  stop time
FROM employees, timecards
WHERE employees.emp_ID = timecards.emp_ID

_____________________________________________________________________________________________________________________________________________________________________
  first_name  last_name   Days Employed  Eligible For
  ----------  ----------  -------------  ---------------
  Robert      Cunningham  3440           Retirement Plan
  Robert      Cunningham  3440           Paid Vacation
  Robert      Cunningham  3440           Paid Sick Days
  Robert      Cunningham  3440           Paid Dental
  Robert      Cunningham  3440           Paid Medical
  Lori        Swenson     153            Paid Dental
  Lori        Swenson     153            Paid Medical
  Richard     Kimbal      93             Paid Dental
  Richard     Kimbal      93             Paid Medical
  Glenda      Widmark     32             Paid Medical

_____________________________________________________________________________________________________________________________________________________________________
  SELECT first_name, last_name,
    CAST((GETDATE() - date_hired) AS INTEGER)
      AS 'Days Employed',
    description AS 'Eligible For'
  FROM employees, benefits
  WHERE CAST((GETDATE() - date_hired) AS INTEGER) >=
    days_on_job_required
  ORDER BY emp_ID

_____________________________________________________________________________________________________________________________________________________________________
  CREATE TABLE customers      CREATE TABLE employees
  (cust_ID     INTEGER,      (emp_ID     INTEGER,
   cust_f_name VARCHAR(30),   emp_f_name VARCHAR(30),
   cust_l_name VARCHAR(30),   emp_l_name VARCHAR(30))
   salesperson INTEGER)

_____________________________________________________________________________________________________________________________________________________________________
 <table name>.<column name>

_____________________________________________________________________________________________________________________________________________________________________
 CREATE TABLE customers         CREATE TABLE employees
 (cust_ID     INTEGER,          (emp_ID     INTEGER,
  cust_f_name VARCHAR(30),       f_name VARCHAR(30),
  cust_l_name VARCHAR(30),       l_name VARCHAR(30))
  emp_ID      INTEGER)<a name="971"></a><a name="IDX-515"></a>

_____________________________________________________________________________________________________________________________________________________________________
 SELECT RTRIM(cust_f_name)+' '+cust_l_name AS 'Customer',
   RTRIM(emp_f_name)+' '+emp_l_name AS 'Salesperson'
 FROM customers, employees
 WHERE salesperson = emp_ID

_____________________________________________________________________________________________________________________________________________________________________
 SELECT RTRIM(cust_f_name)+' '+cust_l_name AS 'Customer',
   RTRIM(f_name)+' '+l_name AS 'Salesperson'
 FROM customers, employees
 WHERE customers.emp_ID = employees.emp_ID

_____________________________________________________________________________________________________________________________________________________________________
 SELECT RTRIM(cust_f_name)+' '+cust_l_name AS 'Customer',
   RTRIM(f_name)+' '+l_name AS 'Salesperson'
 FROM customers, employees
 WHERE emp_ID = emp_ID

_____________________________________________________________________________________________________________________________________________________________________
Server:  Msg 209, Level 16 State 1, Line 1
Ambiguous column name 'emp_ID'.
Server:  Msg 209, Level 16 State 1, Line 1
Ambiguous column name 'emp_ID'.

_____________________________________________________________________________________________________________________________________________________________________
     SELECT cust_ID FROM traffic_violations
     WHERE date_of_infraction >= (GETDATE() - 365)
     AND cust_ID IN (SELECT cust_ID FROM auto_ins_customers
                     WHERE age BETWEEN 18 and 21)
     AND cust_ID IN (SELECT cust_ID FROM auto_claims
                     WHERE date_of_claim >= (GETDATE() - 365)
   UNION ALL
     SELECT cust_ID FROM auto_claims
     WHERE date_of_claim >= (GETDATE() - 365)
     AND cust_ID IN (SELECT cust_ID FROM auto_ins_customers
                     WHERE age BETWEEN 18 and 21)
     AND cust_ID IN (SELECT cust_ID FROM traffic_violations
                     WHERE date_of_infraction >=
                            (GETDATE() - 365)
   ORDER BY cust_ID

_____________________________________________________________________________________________________________________________________________________________________
    (SELECT * FROM auto_ins_customers)
  INTERSECT
    (SELECT * FROM home_ins_customers)

_____________________________________________________________________________________________________________________________________________________________________
    (SELECT cust_ID FROM auto_ins_customers
     WHERE age BETWEEN 18 AND 21)
  INTERSECT ALL
    (SELECT cust_ID FROM traffic_violations
     WHERE date_of_infraction >= (GETDATE() - 365))
  INTERSECT ALL
    (SELECT cust_ID FROM auto_claims
     WHERE date_of_claim >= (GETDATE() - 365))

_____________________________________________________________________________________________________________________________________________________________________
  (SELECT cust_ID FROM auto_ins_customers
   WHERE age BETWEEN 18 AND 21)
INTERSECT
  (SELECT cust_ID FROM traffic_violations
   WHERE date_of_infraction >= (GETDATE() - 365))
INTERSECT
  (SELECT cust_ID FROM auto_claims
   WHERE date_of_claim >= (GETDATE() - 365))

_____________________________________________________________________________________________________________________________________________________________________
SELECT cust_ID FROM auto_ins_customers
WHERE age BETWEEN 18 and 21<a name="974"></a><a name="IDX-517"></a>
AND cust_ID IN (SELECT cust_ID FROM traffic_violations
                WHERE date_of_infraction >=
                        (GETDATE() - 365))
AND cust_ID IN (SELECT cust_ID FROM auto_claims
                WHERE date_of_claim >= (GETDATE() - 365)

_____________________________________________________________________________________________________________________________________________________________________
   SELECT * FROM table_a
 INTERSECT
   SELECT * FROM table_b

_____________________________________________________________________________________________________________________________________________________________________
   SELECT * FROM vendors
 INTERSECT CORRESPONDING
   SELECT * FROM republican_contributors
 INTERSECT CORRESPONDING (vendor_name)
   SELECT * FROM democrat_contributors

_____________________________________________________________________________________________________________________________________________________________________
   SELECT * FROM vendors
 INTERSECT CORRESPONDING
   SELECT * FROM republican_contributors
 INTERSECT CORRESPONDING
   SELECT * FROM democrat_contributors

_____________________________________________________________________________________________________________________________________________________________________
  tax_ID      vendor_name        phone_number
  ----------  -----------------  --------------
  88-5481815  'ABC Corporation'  (748)-254-5565
  88-5107204  'XYZ Corporation'  (754)-875-5648

_____________________________________________________________________________________________________________________________________________________________________
      class_ID          Instructor      Student
      ---------------   --------------  -------------
      English 101       Ishud Reedmour  Ima Pupil
      Composition 101   Ishud Reedmour  Ima Pupil
      Math 101 Ishud    Reedmour        Ima Pupil
      English 101       Wanda Wright    Ima Pupil
      Composition 101   Wanda Wright    Ima Pupil
      Math 101          Wanda Wright    Ima Pupil
      English 101       Mathew Mattick  Ima Pupil
      Composition 101   Mathew Mattick  Ima Pupil
      Math 101          Mathew Mattick  Ima Pupil
      English 101       Ishud Reedmour  Uhara Student
      Composition 101   Ishud Reedmour  Uhara Student
      Math 101          Ishud Reedmour  Uhara Student
      English 101       Wanda Wright    Uhara Student
      Composition 101   Wanda Wright    Uhara Student
      Math 101          Wanda Wright    Uhara Student
      English 101       Mathew Mattick  Uhara Student
      Composition 101   Mathew Mattick  Uhara Student
      Math 101          Mathew Mattick  Uhara Student

_____________________________________________________________________________________________________________________________________________________________________
  class_ID           Instructor
  ---------------    --------------
  English 101        Ishud Reedmour
  Composition 101    Ishud Reedmour
  Math 101           Ishud Reedmour
  English 101        Wanda Wright
  Composition 101    Wanda Wright
  Math 101           Wanda Wright
  English 101        Mathew Mattick
  Composition 101    Mathew Mattick
  Math 101 Mathew    Mattick

_____________________________________________________________________________________________________________________________________________________________________
  class_ID           Instructor
  ---------------    -------------
  English 101        Ishud Reedmour
  Composition 101    Wanda Wright
  Math 101           Mathew Mattick

_____________________________________________________________________________________________________________________________________________________________________
  SELECT class_ID,
    RTRIM(first_name)+' '+last_name AS 'Instructor'
  FROM classes, teachers

_____________________________________________________________________________________________________________________________________________________________________
 SELECT * FROM classes, teachers, students

_____________________________________________________________________________________________________________________________________________________________________
 SELECT class_ID,
   RTRIM(first_name)+' '+last_name AS 'Instructor'
 FROM classes, teachers
 WHERE classes.instructor = teachers.ID

_____________________________________________________________________________________________________________________________________________________________________
 SELECT class_ID,
   RTRIM(first_name)+' '+last_name AS 'Instructor',
   RTRIM(students.f_name)+' '+students.l_name AS 'Student'
 FROM classes, teachers, students<a name="979"></a><a name="IDX-520"></a>

_____________________________________________________________________________________________________________________________________________________________________
    SELECT
      CONVERT(CHAR(12,konrad.anniversary_birthday.next_date,107)
        AS 'Date', hr_admin.employees.emp_ID,
      RTRIM(hr_admin.employees.first_name)+
        ' '+hr_admin.employees.last_name AS 'Employee Name',
      konrad anniversary_birthday.relationship,
      RTRIM(konrad.anniversary_birthday.first_name)+' '+
        konrad.anniversary_birthday.last_name AS
        'Family Member', konrad.anniversary_birthday.event,
      CONVERT(INTEGER,DATENAME(year,
        konrad.anniversary_birthday.next_date)) -
        CONVERT(INTEGER,DATENAME(year,
          konrad.anniversary_birthday.first_date)) AS 'Years'
    FROM hr_admin.employees, konrad.anniversary_birthday
    WHERE konrad.anniversary_birthday.next_date
            BETWEEN GETDATE() AND (GETDATE() + 30)
    AND   hr_admin.employees.emp_ID =
            konrad.anniversary_birthday.emp_ID
    ORDER BY konrad.anniversary_birthday.next_date,
               hr_admin.employees.emp_ID

_____________________________________________________________________________________________________________________________________________________________________
   SELECT
     CONVERT(CHAR(12,ab.next_date,107) AS 'Date', e.emp_ID,
     RTRIM(e.first_name)+' '+e.last_name AS 'Employee Name',
     ab.relationship,
     RTRIM(ab.first_name)+' '+ab.last_name AS 'Family Member',
     ab.event, CONVERT(INTEGER,DATENAME(year,ab.next_date)) -
       CONVERT(INTEGER,DATENAME(year,ab.first_date)) AS 'Years'
   FROM hr_admin.employees e, konrad.anniversary_birthday ab
   WHERE ab.next_date BETWEEN GETDATE() AND (GETDATE() + 30)
   AND   e.emp_ID = ab.emp_ID
   ORDER BY ab.next_date, e.emp_ID

_____________________________________________________________________________________________________________________________________________________________________
 FROM hr_admin.employees e, konrad.anniversary_birthday ab

_____________________________________________________________________________________________________________________________________________________________________
 FROM hr_admin.employees, konrad.anniversary_birthday<a name="982"></a><a name="IDX-522"></a>

_____________________________________________________________________________________________________________________________________________________________________
 SELECT * FROM employees, timecards
 WHERE employees.emp_ID = timecards.emp_ID

_____________________________________________________________________________________________________________________________________________________________________
emp_ID f_name l_name emp_ID date       time_in time_out
------ ------ ------ ------ ---------- ------- --------
101    Konrad King   101    2000-01-01 800     1600
101    Konrad King   101    2000-01-02 830     1630
101    Konrad King   101    2000-01-03 900     1600
502    Sally  Fields 502    2000-01-02 615     1630<a name="986"></a><a name="IDX-524"></a>
502    Sally  Fields 502    2000-01-03 700     1700
609    Wally  Wells  609    2000-01-03 800     1200
609    Wally  Wells  609    2000-01-03 1230    1630

_____________________________________________________________________________________________________________________________________________________________________
 SELECT * FROM customers, auto_inventory
 WHERE customers.max_price >= auto_inventory.price

_____________________________________________________________________________________________________________________________________________________________________
 SELECT * FROM customers, auto_inventory
 WHERE customers.max_price >= auto_inventory.price

_____________________________________________________________________________________________________________________________________________________________________
 SELECT * FROM customers, autos_sold
 WHERE customers.cust_ID = autos_sold.sold_to

_____________________________________________________________________________________________________________________________________________________________________
SELECT * FROM customers, autos_sold
WHERE customers.cust_ID = autos_sold.sold_to

_____________________________________________________________________________________________________________________________________________________________________
  CREATE TABLE employees      CREATE TABLE sales
  (emp_ID INTEGER,            (sales_date  DATETIME,
   f_name VARCHAR(30),         amount_sold MONEY,
   l_name VARCHAR(30))         emp_ID      INTEGER,
                               office_ID   INTEGER)

_____________________________________________________________________________________________________________________________________________________________________
  SELECT employees.emp_ID, sales.office_ID, f_name, l_name,
    sales_date, amount_sold
  FROM employees NATURAL JOIN sales

_____________________________________________________________________________________________________________________________________________________________________
 SELECT employees.emp_ID, sales.office_ID, f_name, l_name,
   sales_date, amount_sold
 FROM employees, sales
 WHERE employees.emp_ID    = sales.emp_ID
 AND   employees.office_ID = sales.office_ID<a name="993"></a><a name="IDX-528"></a>

_____________________________________________________________________________________________________________________________________________________________________
SELECT employees.emp_ID, sales.office_ID, f_name, l_name,
  sales_date, amount_sold
FROM employees, sales
WHERE employees.emp_ID = sales.emp_ID

_____________________________________________________________________________________________________________________________________________________________________
 SELECT * FROM employees JOIN customers
 ON (salesperson_ID = emp_ID)

_____________________________________________________________________________________________________________________________________________________________________
 SELECT * FROM employees, customers
 WHERE salesperson_ID = emp_ID

_____________________________________________________________________________________________________________________________________________________________________
 SELECT DISTINCT e.emp_ID e.f_name, e.l_name, total_sales
 FROM NV_employees e, AZ_employees
 WHERE e.total_sales > AZ_employees.total_sales

_____________________________________________________________________________________________________________________________________________________________________
SELECT DISTINCT e.emp_ID e.f_name, e.l_name, e.total_sales
FROM NV_employees e JOIN AZ_employees
ON (e.total_sales > AZ_employees.total_sales)

_____________________________________________________________________________________________________________________________________________________________________
 SELECT * FROM athletes, decathlon_events

_____________________________________________________________________________________________________________________________________________________________________
 SELECT * FROM table_1 CROSS JOIN table_2

_____________________________________________________________________________________________________________________________________________________________________
SELECT * FROM athletes CROSS JOIN decathlon_events<a name="998"></a><a name="IDX-530"></a>

_____________________________________________________________________________________________________________________________________________________________________
 CREATE TABLE customers     CREATE TABLE employees
 (cust_ID INTEGER,          (emp_ID INTEGER,
  f_name  VARCHAR(30),       f_name VARCHAR(30),
  l_name  VARCHAR(30))       l_name VARCHAR(30))
  emp_ID  INTEGER)

_____________________________________________________________________________________________________________________________________________________________________
 SELECT RTRIM(c.f_name)+' '+c.l_name AS 'Customer',
   RTRIM(e.f_name)+' '+e.l_name AS 'Salesperson'
 FROM customers c JOIN employees e
 USING (emp_ID)

_____________________________________________________________________________________________________________________________________________________________________
 SELECT RTRIM(c.f_name)+' '+c.l_name AS 'Customer',
   RTRIM(e.f_name)+' '+e.l_name AS 'Salesperson'
 FROM customers c NATURAL JOIN employees e

_____________________________________________________________________________________________________________________________________________________________________
SELECT RTRIM(c.f_name)+' '+c.l_name AS 'Customer',
  RTRIM(e.f_name)+' '+e.l_name AS 'Salesperson'
FROM customers c JOIN employees e
ON (c.emp_ID = e.emp_ID)

_____________________________________________________________________________________________________________________________________________________________________
 SELECT a.symbol,
   a.buy_at AS 'Buy Price A', a.sell_at AS 'Sell Price A',
   b.buy_at AS 'Buy Price B', b.sell_at AS 'Sell Price B'
 FROM stock_list_a a INNER JOIN stock_list_b b
 ON (a.symbol = b.symbol)

_____________________________________________________________________________________________________________________________________________________________________
SELECT * FROM table_a INNER JOIN table_b
ON (table_a.column_to_relate = table_b.column_to_relate)

_____________________________________________________________________________________________________________________________________________________________________
SELECT * FROM table_a JOIN table_b
ON (table_a.column_to_relate = table_b.column_to_relate)

_____________________________________________________________________________________________________________________________________________________________________
SELECT a.symbol,
  a.buy_at AS 'Buy Price A', a.sell_at AS 'Sell Price A',
  b.buy_at AS 'Buy Price B', b.sell_at AS 'Sell Price B'
FROM stock_list_a a, stock_list_b b
WHERE a.symbol = b.symbol

_____________________________________________________________________________________________________________________________________________________________________
symbol Buy Price  A Sell Price  A Buy Price  B Sell Price B
------ ---------  ------------  -----------  --------------
CSCO   50         60            55           70
LU     32         40            30           45
F      26         32            27           40
GM     60         69            58           63
VTSS   86         92            82           89
LEN    28         32            30           34

_____________________________________________________________________________________________________________________________________________________________________
 SELECT class, section, description, title
 FROM curriculum INNER JOIN book_list
 ON ((curriculum.class = book_list.class) AND
     (curriculum.section = book_list.section)

_____________________________________________________________________________________________________________________________________________________________________
 SELECT class, section, description, title
 FROM curriculum INNER JOIN book_list
 USING (class)

_____________________________________________________________________________________________________________________________________________________________________
 SELECT class, section, description, title
 FROM curriculum INNER JOIN book_list
 USING (class, section)

_____________________________________________________________________________________________________________________________________________________________________
 SELECT class, section, description, title
 FROM curriculum, book_list
 WHERE (curriculum.class = book_list.class)
 AND   (curriculum.section = book_list.section)

_____________________________________________________________________________________________________________________________________________________________________
 SELECT * FROM students
 SELECT * FROM faculty

_____________________________________________________________________________________________________________________________________________________________________
 SELECT RTRIM(s.f_name+' '+s.l_name AS 'Student', major,
   dept_head, RTRIM(f.f_name)+' '+f.l_name AS 'Professor'
 FROM students s FULL OUTER JOIN faculty f
 ON (major = dept_head)
 ORDER BY major, dept_head

_____________________________________________________________________________________________________________________________________________________________________
 Student         major        dept_head    Professor
 --------------  -----------  -----------  -------------
 NULL            NULL         NULL         Kris Mathews
 NULL            NULL         NULL         Linda Price
 Susan Smith     NULL         NULL         NULL
 Howard Baker    NULL         NULL         NULL
 NULL            NULL         Engineering  Marcus Elliot
 Bruce Dern      Business     NULL         NULL
 Sally Smith     English      English      Lori Raines
 Allen Winchell  Mathematics  Mahtematics  Kelly Wells

_____________________________________________________________________________________________________________________________________________________________________
 Student         major        dept_head    Professor
 --------------  -----------  -----------  -----------
Sally Smith      English      English      Lori Raines
Allen Winchell   Mathematics  Mathematics  Kelly Wells

_____________________________________________________________________________________________________________________________________________________________________
 STUDENTS table                 FACULTY table
 f_name l_name   major          f_name l_name   dept_head
 ------ -------- -----------    ------ -------- ---------
 Sally  Smith    English        Lori   Raines   English
 Allen  Winchell Mathematics    Marcus Elliot   Engineering
 Bruce  Dern     Business       Kelly  Wells    Mathematics
 Susan  Smith    NULL           Kris   Matthews NULL
 Howard Baker    NULL           Linda  Price    NULL

_____________________________________________________________________________________________________________________________________________________________________
SELECT RTRIM(s.f_name+' '+s.l_name AS 'Student', major,
  dept_head, RTRIM(f.f_name)+' '+f.l_name AS 'Professor'
FROM students s, faculty f
WHERE major = dept_head
ORDER BY major, dept_head

_____________________________________________________________________________________________________________________________________________________________________
  SELECT cust_ID, RTRIM(c.f_name)+' '+c.l_name AS 'Customer',
    total_purchases, emp_ID,
    RTRIM(e.f_name)+' '+e.l_name AS 'Salesperson'
  FROM customers c LEFT OUTER JOIN employees e
  ON (salesperson = emp_ID)
  ORDER BY emp_ID DESC<a name="1011"></a><a name="IDX-538"></a>

_____________________________________________________________________________________________________________________________________________________________________
 SELECT cust_ID, RTRIM(c.f_name)+' '+c.l_name AS 'Customer',
   total_purchases, emp_ID,
   RTRIM(e.f_name)+' '+e.l_name AS 'Salesperson'
 FROM customers c JOIN employees e
 ON (salesperson = emp_ID)
 ORDER BY emp_ID DESC

_____________________________________________________________________________________________________________________________________________________________________
cust_ID Customer        total_purchases emp_ID Salesperson
------- --------------- --------------- ------ -----------
6753    Sally Brown     95658.0000      NULL   NULL
3758    Richard Stewart 15425.0000      NULL   NULL
1001    Linda Reed      158112.0000     101    Konrad King
7159    Walter Fields   96835.0000      101    Konrad King
4859    Sue Coulter     45412.0000      101    Konrad King
2158    Jimmy Tyson     754515.0000     201    Kris Jamsa
5159    James Herrera   74856.0000      201    Kris Jamsa

_____________________________________________________________________________________________________________________________________________________________________
FROM (employees e JOIN customers c)

_____________________________________________________________________________________________________________________________________________________________________
  Customer Name   freezer_ID Purchased   Cost      Repairs
  --------------- ---------- ----------  --------  -------
  NULL            11111      2000-10-11  155.9900  10.0000
  Richard Stewart 15425      1999-01-01  179.9400  .0000
  NULL            15915      1998-05-05  133.4500  .0000
  NULL            16426      1998-07-05  100.4500  12.7500
  NULL            21345      1996-09-09  100.4500  12.2300
  NULL            22222      2000-04-07  255.5800  .0000
  Sue Coulter     45412      1995-03-05  179.9400  45.8900
  NULL            45413      1999-01-01  255.2800  .0000
  NULL            74845      1997-04-01  99.9900   .0000
  James Herrera   74856      1999-05-09  185.2500  12.2500
  Sally Brown     95658      2000-06-01  188.8500  15.5500
  Walter Fields   96835      2000-10-15  155.9900  75.5500
  NULL            97999      1996-09-03  75.9800   44.2500

_____________________________________________________________________________________________________________________________________________________________________
SELECT RTRIM(f_name)+' '+l_name AS 'Customers Name'
  freezer_inventory.freezer_ID, date_purchased AS
  'Purchased', cost, amt_repairs AS 'Repairs'
FROM customers RIGHT OUTER JOIN freezer_inventory
ON (customers.freezer_ID = freezer_inventory.freezer_ID)
ORDER BY freezer_inventory.freezer_ID

_____________________________________________________________________________________________________________________________________________________________________
  Customer Name   Cust_FID Inv_FID  Purchased  Cost     Repairs
  --------------- -------- -------  ---------- -------- ------
  Jimmy Tyson     754515   NULL     NULL       NULL     NULL
  Linda Reed      158112   NULL     NULL       NULL     NULL
  NULL            NULL     11111    2000-10-11 155.9900 10.0000
  Richard Stewart 15425    15425    1999-01-01 179.9400 .0000
  NULL            NULL     15915    1998-05-05 133.4500 .0000
  NULL            NULL     16426    1998-07-05 100.4500 12.7500
  NULL            NULL     21345    1996-09-09 100.4500 12.2300
  NULL            NULL     22222    2000-04-07 255.5800 .0000
  Sue Coulter     45412    45412    1995-03-05 179.9400 45.8900
  NULL            NULL     45413    1999-01-01 255.2800 .0000
  NULL            NULL     74845    1997-04-01 99.9900 .0000
  James Herrera   74856    74856    1999-05-09 185.2500 12.2500
  Sally Brown     95658    95658    2000-06-01 188.8500 15.5500
  Walter Fields   96835    96835    2000-10-15 155.9900 75.5500
  NULL            NULL     97999    1996-09-03 75.9800  44.2500

_____________________________________________________________________________________________________________________________________________________________________
  SELECT RTRIM(f_name)+' '+l_name AS 'Customers Name'
    customers.freezer_ID AS 'Cust_FID',
    freezer_inventory.freezer_ID AS 'Inv_FID',
    date_purchased AS 'Purchased', cost,
    amt_repairs AS 'Repairs'
  FROM customers FULL OUTER JOIN freezer_inventory
  ON (customers.freezer_ID = freezer_inventory.freezer_ID)
  ORDER BY freezer_inventory.freezer_ID

_____________________________________________________________________________________________________________________________________________________________________
 SELECT RTRIM(f_name)+' '+l_name AS 'Customers Name'
   freezer_inventory.freezer_ID, date_purchased AS
   'Purchased', cost, amt_repairs AS 'Repairs'
 FROM customers, freezer_inventory
 WHERE customers.freezer_ID =* freezer_inventory.freezer_ID
 ORDER BY freezer_inventory.freezer_ID

_____________________________________________________________________________________________________________________________________________________________________
SELECT cust_ID, RTRIM(c.f_name)+' '+c.l_name AS 'Customer',
  total_purchases, emp_ID,
  RTRIM(e.f_name)+' '+e.l_name AS 'Salesperson'
FROM customers c, employees e
WHERE salesperson *= emp_ID
ORDER BY emp_ID DESC

_____________________________________________________________________________________________________________________________________________________________________
SELECT (CASE WHEN p1.symbol IS NULL THEN p2.symbol
             ELSE p1.symbol
        END) AS 'Stock',
  trade_type, share_ct, position, recommendation
FROM (portfolio p1 INNER JOIN insider_trades it
      ON p1.symbol = it.symbol)<a name="1022"></a><a name="IDX-544"></a>
FULL OUTER JOIN
     (portfolio p2 INNER JOIN analyst_recommendations ar
      ON p2.symbol = ar.symbol)
ON p1.symbol = p2.symbol
ORDER BY Stock

_____________________________________________________________________________________________________________________________________________________________________
SELECT p.symbol, trade_type, share_ct, position
FROM portfolio p INNER JOIN insider_trades it
ON p.symbol = it.symbol
ORDER BY p.symbol

_____________________________________________________________________________________________________________________________________________________________________
SELECT p.symbol, trade_type, share_ct, position,
  recommendation
FROM portfolio p INNER JOIN insider_trades it
ON p.symbol = it.symbol
LEFT OUTER JOIN analyst_recommendations ar
ON p.symbol = ar.symbol
ORDER BY p.symbol

_____________________________________________________________________________________________________________________________________________________________________
  SELECT member_ID,
    RTRIM(f_name)+' '+l_name AS 'Member Name', miles_earned,
    miles_required, description AS 'Reward Earned'
  FROM frequent_fliers INNER JOIN rewards
  ON miles_earned >= miles_required
  ORDER BY l_name, f_name, member_ID, miles_required

_____________________________________________________________________________________________________________________________________________________________________
SELECT address, RTRIM(f_name)+' '+l_name AS 'Buyer',
  min_sales_price AS 'Seller Minimum',
  max_purchase_price AS 'Buyer Maximum',
  (max_purchase_price - min_sales_price) AS 'Spread'
FROM listings FULL OUTER JOIN buyers
ON  (max_purchase_price >= min_sales_price)
AND (size_required <= square_footage)
AND (bedrooms_required <= num_bedrooms)
ORDER BY address DESC, buyer

_____________________________________________________________________________________________________________________________________________________________________
  SELECT * FROM portfolio_a a UNION JOIN portfolio_b b

_____________________________________________________________________________________________________________________________________________________________________
  SELECT * FROM portfolio_a
UNION
  SELECT * FROM portfolio_b

_____________________________________________________________________________________________________________________________________________________________________
SYM   SHARES  AVG_COST
---   ------  --------
BAC   200     64 5/16
CMB   400     50 7/8
HCA   1000    33 5/8
ADP   500     21 3/4
BAC   440     53 7/16
CDN   500     33 3/4

_____________________________________________________________________________________________________________________________________________________________________
    Symbol  Account     Shares  Avg Cost
    ------  ----------  ------  --------
    ADP     SEP Acct    500     21.7500
    BAC     Joint Acct  200     64.6250
    BAC     SEP Acct    440     53.8750
    CDN     SEP Acct    500     33.7500
    CMB     IRA Acct    400     50.8750
    CMB     Joint Acct  400     50.8750
    F       IRA Acct    500     41.1250
    HCA     IRA Acct    300     27.3750
    HCA     Joint Acct  1000    35.6250

_____________________________________________________________________________________________________________________________________________________________________
  SELECT
    COALESCE (j.symbol,  s.symbol,  i.symbol)  AS 'Symbol',
    COALESCE (j.account, s.account, i.account) AS 'Account',
    COALESCE (j.shares,  s.shares,  i.shares)  AS 'Shares',
    COALESCE (j.avg_cst, s.avg_cst, i.avg_cst) AS 'Avg Cost'
  FROM         (SELECT 'Joint Acct' AS 'Account', j.*) j,
    UNION JOIN (SELECT 'SEP Acct'   AS 'Account', s.*) s,
    UNION JOIN (SELECT 'IRA Acct'   AS 'Account', i.*) i
  ORDER BY symbol, account

_____________________________________________________________________________________________________________________________________________________________________
 ORDER BY account, symbol

_____________________________________________________________________________________________________________________________________________________________________
 SELECT * FROM
   joint_acct j UNION JOIN SEP_acct s UNION JOIN IRA_acct i

_____________________________________________________________________________________________________________________________________________________________________
 sym  shares avg_cst sym  shares avg_cst  sym   shares avg_cst
 ---- ------ ------- ---- ------ -------  ----  ------ -------
 BAC  200    64.625  NULL NULL   NULL     NULL  NULL   NULL
 CMB  400    50.875  NULL NULL   NULL     NULL  NULL   NULL
 HCA  1000   35.625  NULL NULL   NULL     NULL  NULL   NULL
 NULL NULL   NULL    ADP  500    21.75    NULL  NULL   NULL
 NULL NULL   NULL    BAC  440    53.875   NULL  NULL   NULL
 NULL NULL   NULL    CDN  500    33.75    NULL  NULL   NULL
 NULL NULL   NULL    NULL NULL   NULL     F     500    41.125
 NULL NULL   NULL    NULL NULL   NULL     HCA   300    27.375
 NULL NULL   NULL    NULL NULL   NULL     CMB   400    50.875

_____________________________________________________________________________________________________________________________________________________________________
  SELECT * FROM students, grades
  WHERE student_ID = SID
  ORDER BY student_ID<a name="1033"></a><a name="IDX-550"></a>

_____________________________________________________________________________________________________________________________________________________________________
CREATE TABLE grades          CREATE TABLE students
course_ID     VARCHAR(15),   (SID    INTEGER,
section       SMALLINT,       f_name VARCHAR(20),
student_ID    INTEGER,        l_name VARCHAR(20))
professor_ID  INTEGER,
grade         NUMERIC)

_____________________________________________________________________________________________________________________________________________________________________
SELECT RRIM(s.f_name)+' '+s.l_name AS 'Student', course_ID,
  section, grade, RTRIM(p.f_name)+' '+p.l_name AS 'Teacher'
FROM (grades JOIN students s ON student_ID = SID)
JOIN professors p ON professor_ID = PID

_____________________________________________________________________________________________________________________________________________________________________
SELECT RTRIM(f_name)+' '+l_name AS 'Student', course_ID,
  section, grade
FROM grades JOIN students ON student_ID = SID

_____________________________________________________________________________________________________________________________________________________________________
 SELECT * FROM students

_____________________________________________________________________________________________________________________________________________________________________
 SELECT * FROM students, grades
 WHERE SID = student_ID

_____________________________________________________________________________________________________________________________________________________________________
 SELECT students.* FROM students

_____________________________________________________________________________________________________________________________________________________________________
SELECT students.*, grade FROM students, grades
WHERE SID = student_ID

_____________________________________________________________________________________________________________________________________________________________________
  SELECT cust_ID, RTRIM(f_name)+' '+l_name AS 'Customer',
    referrer AS 'Referred By'
  FROM customers
  WHERE referrer IS NOT NULL
  ORDER BY "Referred By"

_____________________________________________________________________________________________________________________________________________________________________
 SELECT customers.cust_ID, RTRIM(customers.f_name)+
   ' '+customers.l_name AS 'Customer',
   RTRIM(referrers.f_name)+' '+referrers.l_name
     AS 'Referred By'
 FROM customers, customers referrers
 WHERE customers.referrer = referrers.CUST_ID
 ORDER BY "Referred By"

_____________________________________________________________________________________________________________________________________________________________________
 Server: Msg 1013, Level 15, State 1, Line 4
 Tables 'customers' and 'customers' have the same exposed
   names. Use correlation names to distinguish them.

_____________________________________________________________________________________________________________________________________________________________________
SELECT c.cust_ID, RTRIM(c.f_name)+' '+c.l_name
  AS 'Customer',
  (SELECT count(*) FROM customers r
   WHERE r.referrer = c.cust_ID) AS 'Referral Count'
FROM customers c
WHERE c.cust_ID IN (SELECT referrer FROM customers)
ORDER BY "Referral Count" DESC<a name="1038"></a><a name="IDX-553"></a>

_____________________________________________________________________________________________________________________________________________________________________
SELECT cust_ID, RTRIM(f_name)+' '+l_name AS 'Customer',
  RTRIM(f_name)+' '+l_name AS 'Referred By'
FROM customers, customers
WHERE referrer = cust_ID
ORDER BY "Referred BY"<a name="1037"></a><a name="IDX-552"></a>

_____________________________________________________________________________________________________________________________________________________________________
   SELECT RTRIM(COALESCE(frank.prospects.f_name,
       rodger.prospects.f_name,susan.prospects.f_name))+' '+
     COALESCE(frank.prospects.l_name,rodger.prospects.l_name,
              susan.prospects.l_name) AS 'Prospect',
     COALESCE(frank.prospects.phone_number,
              rodger.prospects.phone_number,
              susan.prospects.phone_number) AS 'Phone Number',
     (CASE WHEN frank.prospects.phone_number IS NOT NULL
             THEN 'Frank ' ELSE '' END)+
     (CASE WHEN rodger.prospects.phone_number IS NOT NULL
             THEN 'Rodger ' ELSE '' END)+
     (CASE WHEN susan.prospects.phone_number IS NOT NULL
             THEN 'Susan' ELSE '' END) AS 'Being Called By'
   FROM ((frank.prospects FULL JOIN rodger.prospects ON
          frank.prospects.phone_number =
            rodger.prospects.phone_number)
   FULL JOIN susan.prospects ON
          frank.prospects.phone_number =
            susan.prospects.phone_number
          OR rodger.prospects.phone_number =
               susan.prospects.phone_number)
   WHERE frank.prospects.phone_number =
           rodger.prospects.phone_number
      OR frank.prospects.phone_number =
           susan.prospects.phone_number
      OR rodger.prospects.phone_number =
           susan.prospects.phone_number
   ORDER BY "Being Called By", 'Prospect'

_____________________________________________________________________________________________________________________________________________________________________
  Prospect        Phone Number    Called By
  --------------  --------------  ------------------
  Bill Barteroma  (222)-222-2222  Frank Rodger Susan
  Steve Kernin    (555)-555-5555  Frank Rodger Susan
  Frank Burns     (111)-222-1111  Frank Susan
  Hawkeye Morgan  (333)-222-3333  Frank Susan
  Steve Pierce    (444)-222-4444  Frank Susan
  Walter Phorbes  (666)-666-6666  Rodger Susan

_____________________________________________________________________________________________________________________________________________________________________
 SELECT RTRIM(sp.f_name)+' '+sp.l_name AS 'Prospect',
   sp.phone_number
 FROM susan.prospects sp
 ORDER BY 'Prospect'

_____________________________________________________________________________________________________________________________________________________________________
 SELECT RTRIM(susan.prospects.f_name)+
   ' '+susan.prospects.l_name AS 'Prospect'
   susan.prospects.phone_number
 FROM susan.prospects
 ORDER BY 'Prospect'

_____________________________________________________________________________________________________________________________________________________________________
SELECT RTRIM(COALESCE(fp.f_name,rp.f_name,sp.f_name))+' '+
  COALESCE(fp.l_name,rp.l_name,sp.l_name) AS 'Prospect',
  COALESCE(fp.phone_number,rp.phone_number,sp.phone_number)
    AS 'Phone Number',
  (CASE WHEN fp.phone_number IS NOT NULL
          THEN 'Frank ' ELSE '' END)+<a name="1041"></a><a name="IDX-555"></a>
     (CASE WHEN rp.phone_number IS NOT NULL
             THEN 'Rodger ' ELSE '' END)+
     (CASE WHEN sp.phone_number IS NOT NULL
             THEN 'Susan' ELSE '' END) AS 'Being Called By'
   FROM ((frank.prospects fp FULL JOIN rodger.prospects rp
    ON fp.phone_number = rp.phone_number)
   FULL JOIN susan.prospects sp
     ON fp.phone_number = sp.phone_number
     OR rp.phone_number = sp.phone_number)
   WHERE fp.phone_number = rp.phone_number
      OR fp.phone_number = sp.phone_number
      OR rp.phone_number = sp.phone_number
   ORDER BY "Being Called By", 'Prospect'

_____________________________________________________________________________________________________________________________________________________________________
  SELECT symbol, current_price FROM portfolio
  WHERE current_price >= ANY
    (SELECT closing_price 1.5 FROM price_history<a name="1043"></a><a name="IDX-556"></a>
  WHERE price_history.symbol = portfolio.symbol
    AND price_history.trade_date >= (GETDATE() - 180))

_____________________________________________________________________________________________________________________________________________________________________
 SELECT symbol, current_price FROM portfolio
 WHERE current_price >= SOME
   (SELECT closing_price * 1.5 FROM price_history
    WHERE price_history.symbol = portfolio.symbol AND
          price_history.date >= (GETDATE() - 180))

_____________________________________________________________________________________________________________________________________________________________________
 SELECT cust_ID, f_name, l_name FROM customers
 WHERE 0 < (SELECT COUNT(*) FROM claims
            WHERE claims.date_of_claim >= (GETDATE() - 365)
              AND claims.cust_ID = customers.cust_ID)

_____________________________________________________________________________________________________________________________________________________________________
 SELECT cust_ID, f_name, l_name FROM customers
 WHERE
   EXISTS (SELECT * FROM claims
           WHERE claims.date_of_claim >= (GETDATE() - 365)
           AND claims.cust_ID = customers.cust_ID)

_____________________________________________________________________________________________________________________________________________________________________
 WHERE 0 < (SELECT COUNT(*) FROM <table name>
            WHERE <search condition(s)>)

_____________________________________________________________________________________________________________________________________________________________________
WHERE EXISTS (SELECT * FROM <table name>
              WHERE <search condition>)

_____________________________________________________________________________________________________________________________________________________________________
 NULL = NULL

_____________________________________________________________________________________________________________________________________________________________________
 NULL = NULL

_____________________________________________________________________________________________________________________________________________________________________
 SELECT * FROM customers
 WHERE salesperson = NULL

_____________________________________________________________________________________________________________________________________________________________________
SELECT * FROM customers
WHERE salesperson IS NULL

_____________________________________________________________________________________________________________________________________________________________________
 SELECT course_ID, description,
   RTRIM(f_name)+' '+l_name AS Instructor
 FROM classes JOIN teachers
 ON classes.professor_ID = teachers.PID

_____________________________________________________________________________________________________________________________________________________________________
 SELECT course_ID, description,
   RTRIM(f_name)+' '+l_name AS Instructor
 FROM classes, teachers
 WHERE classes.professor_ID = teachers.PID

_____________________________________________________________________________________________________________________________________________________________________
 SELECT course_ID, description,
   RTRIM(f_name)+' '+l_name AS Instructor
 FROM teachers LEFT JOIN classes
 ON    teachers.PID = classes.professor_ID
 WHERE teachers.PID = classes.professor_ID

_____________________________________________________________________________________________________________________________________________________________________
course_ID  description                       Instructor
---------  --------------------------------  -----------
CS-101     Introduction To Computer Science  Kris Jamsa
COMP101    Beginning Composition             Grady Booch

_____________________________________________________________________________________________________________________________________________________________________
 SELECT CID AS 'Cust ID',
   RTRIM(f_name)+' '+l_name AS 'Customer'
 FROM customers
 WHERE EXISTS (SELECT * FROM trades
               WHERE trade_date >= GETDATE() - 365
                 AND cust_ID = CID

_____________________________________________________________________________________________________________________________________________________________________
 SELECT trade_date, symbol, shares * price AS 'Total Trade',
   (SELECT COUNT(*) FROM trades
    WHERE trade_date > GETDATE() - 365
      AND cust_ID = CID) AS 'Count'
   (SELECT SUM(price) * SUM(shares),
    FROM trades
    WHERE trades.trade_date >= GETDATE() - 365
      AND cust_ID = CID) AS 'Total $ Volume),
    CID AS 'Cust ID'-, TRIM(f_name)+' '+l_name AS 'Customer'
 FROM customers JOIN trades
 ON CID = cust_CID
 WHERE shares * price >= 100000
   AND trade_date >= GETDATE() -365
 ORDER BY Customer

_____________________________________________________________________________________________________________________________________________________________________
SELECT trade_date, symbol, shares * price AS 'Total Trade',
  CID, RTRIM(f_name)+' '+l_name AS 'Customer'
FROM customers JOIN trades
  ON CID = cust_ID
WHERE shares * price > 100000
  AND trade_date >= GETDATE() -365
ORDER BY Customer

_____________________________________________________________________________________________________________________________________________________________________
   INSERT INTO cust_cars_inventory
     SELECT c.*, VIN, price
     FROM customers c, auto_inventory I
     WHERE (c.model_year+c.make+c.model) =
              (i.model_year+i.make+i.model)<a name="1057"></a><a name="IDX-564"></a>

_____________________________________________________________________________________________________________________________________________________________________
 SELECT * FROM customers
 WHERE (model_year, make, model)
    IN (SELECT model_year, make, model
        FROM auto_inventory)

_____________________________________________________________________________________________________________________________________________________________________
 SELECT * FROM customers
 WHERE (model_year+make+model)
    IN (SELECT model_year+make+model FROM auto_inventory)

_____________________________________________________________________________________________________________________________________________________________________
 TRUNCATE TABLE cust_cars_inventory

_____________________________________________________________________________________________________________________________________________________________________
CREATE VIEW vw_cust_cars_inventory AS
  SELECT c.*, VIN, price
  FROM customers c, auto_inventory I
  WHERE (c.model_year+c.make+c.model) =
           (i.model_year+i.make+i.model)

_____________________________________________________________________________________________________________________________________________________________________
SELECT (SELECT RTRIM(f_name)+' '+l_name FROM employees
        WHERE emp_ID = e.manager_ID) AS 'Manager',
  RTRIM(f_name)+' '+l_name AS 'Employee',
  (SELECT SUM(invoice_total) FROM invoices
   WHERE salesperson = emp_ID) AS 'Total Sales'
FROM employees e
WHERE manager_ID IS NOT NULL
ORDER BY manager, employee

_____________________________________________________________________________________________________________________________________________________________________
SELECT RTRIM(m.f_name)+' '+m.l_name AS 'Manager',
  RTRIM(e.f_name)+' '+e.l_name AS 'Employee',
  SUM(invoice_total) AS 'Total Sales'
FROM employees m JOIN employees e
ON m.emp_ID = e.emp_ID
JOIN invoices ON salesperson = e.emp_ID
GROUP BY m.f_name, 1.f_name, e.f_name, e.l_name
ORDER BY manager, employee

_____________________________________________________________________________________________________________________________________________________________________
 (SELECT SUM(invoice_total) FROM invoices
  WHERE salesperson = emp_ID)

_____________________________________________________________________________________________________________________________________________________________________
 SELECT emp_ID, RTRIM(f_name)+' +l_name AS 'Name'
 FROM employees WHERE dept = 'Sales'

_____________________________________________________________________________________________________________________________________________________________________
SELECT emp_ID, RTRIM(f_name)+' +l_name AS 'Name',
  (SELECT SUM(invoice_total) FROM invoices
   WHERE salesperson = emp_ID) AS 'Sales Volume'
FROM employees WHERE dept = 'Sales'

_____________________________________________________________________________________________________________________________________________________________________
 {<expression>|<subquery>| {=|<>|>|>=|<|<=}
   {<expression>|<subquery>

_____________________________________________________________________________________________________________________________________________________________________
 SELECT emp_ID, RTRIM(f_name)+' '+l_name) AS 'Name',
   (SELECT sum(invoice_total) FROM invoices
    WHERE salesperson = emp_ID) AS 'Sales Volume'
 FROM employees
 WHERE dept = 'Sales'
   AND (SELECT SUM(invoice_total) FROM invoices
        WHERE salesperson = emp_ID) > 5000.00

_____________________________________________________________________________________________________________________________________________________________________
(SELECT SUM(invoice_total) FROM invoices
 WHERE salesperson = emp_ID) > 5000.00

_____________________________________________________________________________________________________________________________________________________________________
SELECT emp_ID, RTRIM(f_name)+' '+l_name) AS 'Name',
FROM employees
WHERE dept = 'Sales'
  AND (SELECT AVG(invoice_total) FROM invoices
       WHERE salesperson = emp_ID) <
      (SELECT AVG(invoice_total) FROM invoices)

_____________________________________________________________________________________________________________________________________________________________________
Server: Msg 512, Level 16, State 1, Line 1
Subquery returned more than 1 value. This is not permitted
  when the subquery follows =, !=, <, <=, >, >= or when the
  subquery is used as an expression.

_____________________________________________________________________________________________________________________________________________________________________
 SELECT emp_ID, f_name, l_name
 FROM employees
 WHERE EXISTS (SELECT * FROM customers
               WHERE salesperson = emp_ID
                 AND (total_purchases > 100000
                  OR (SELECT SUM(total_purchases)
                      FROM customers
                      WHERE salesperson = emp_ID) > 500000))

_____________________________________________________________________________________________________________________________________________________________________
 SELECT emp_ID, RTRIM(f_name)+' '+l_name AS 'Employee Name'
 FROM employees<a name="1067"></a><a name="IDX-570"></a>
 WHERE NOT EXISTS (SELECT * FROM customers
                   WHERE salesperson = emp_ID
                     AND total_purchases > 0)

_____________________________________________________________________________________________________________________________________________________________________
 SELECT c.cust_ID, f_name, l_name,
   SUM(order_total) AS 'Total Purchases'
 FROM customers c, orders o
 WHERE c.cust_ID = o.cust_ID
 GROUP BY cust_ID, f_name, l_name

_____________________________________________________________________________________________________________________________________________________________________
 SELECT cust_ID, f_name, l_name FROM customers
 WHERE cust_ID IN
         (SELECT cust_ID FROM orders
          WHERE ship_to_state IN ('AZ','CA','NV','OR','WA')<a name="1069"></a><a name="IDX-571"></a>

_____________________________________________________________________________________________________________________________________________________________________
 SELECT DISTINCT c.cust_ID, f_name, l_name
 FROM customers c, orders o
 WHERE c.cust_ID = o.cust_ID
   AND ship_to_state IN ('AZ','CA','NV','OR','WA')

_____________________________________________________________________________________________________________________________________________________________________
SELECT SID, f_name, l_name FROM students s
WHERE (SELECT AVG(grade_received) FROM grades g
       WHERE g.student_ID = s.SID)
    > (SELECT AVG(grade_received) FROM grades)

_____________________________________________________________________________________________________________________________________________________________________
SELECT cust_ID, f_name, l_name, phone_number
FROM customers
WHERE state IN ('CA','NV','OR')

_____________________________________________________________________________________________________________________________________________________________________
SELECT cust_ID, f_name, l_name, state
FROM customers
WHERE state IN (SELECT state FROM offices)

_____________________________________________________________________________________________________________________________________________________________________
 SELECT <column name list> FROM <table list>
 WHERE <test expression> IN <subquery>

_____________________________________________________________________________________________________________________________________________________________________
 SELECT SID, f_name, l_name FROM students
 WHERE SID IN (SELECT student_ID FROM enrollment
               WHERE course_ID = 'ENGLISH-101')

_____________________________________________________________________________________________________________________________________________________________________
 SELECT class_ID, title, instructor_ID
 FROM classes
 WHERE class_ID NOT IN (SELECT course_ID FROM enrollment)

_____________________________________________________________________________________________________________________________________________________________________
DELETE FROM classes
WHERE date_class_added < GETDATE() - 1825
  AND class_ID
        NOT IN (SELECT course_ID FROM enrollment
                WHERE date_enrolled >= GETDATE() - 1825)

_____________________________________________________________________________________________________________________________________________________________________
 SELECT policy_number, f_name, l_name, make, model
 FROM auto_policies p
 WHERE (SELECT COUNT(*) FROM accidents a
        WHERE (description LIKE '%rollover%' AND mph <= 35)
          AND a.make  = p.make
          AND a.model = p.model)
      > ALL<a name="1080"></a><a name="IDX-577"></a>
       (SELECT COUNT(*) FROM accidents a
        WHERE (description LIKE '%rollover%' AND mph <= 35)
          AND (a.make <> p.make OR a.model <> p.model)
        GROUP BY make, model)

_____________________________________________________________________________________________________________________________________________________________________
 SELECT policy_number, make, model FROM auto_policies p
 WHERE (SELECT COUNT(*) FROM accidents a
        WHERE (description LIKE '%rollover%' AND mph <= 35)
          AND a.make  = p.make
          AND a.model = p.model) > 0

_____________________________________________________________________________________________________________________________________________________________________
   SELECT emp_ID, f_name, l_name, sales_quota
   FROM employees
   WHERE dept = 'SALES'
     AND (sales_quota * 1.50) <= ANY
            (SELECT SUM(order_total) FROM orders
             WHERE salesperson = emp_ID
               AND order_date >= GETDATE() - 14
             GROUP BY order_date)

_____________________________________________________________________________________________________________________________________________________________________
 SELECT <column name list> FROM <table>
 WHERE <expression> {=|<>|>|>=|<|<=} <subquery>

_____________________________________________________________________________________________________________________________________________________________________
 SELECT <column name list> FROM <table>
 WHERE <expression> {=|<>i>|>=|<|<=} {SOME|ANY|ALL}
          <subquery>

_____________________________________________________________________________________________________________________________________________________________________
Server: Msg 512, Level 16, State 1, Line 1
Subquery returned more than 1 value. This is not permitted
  when the subquery follows =, !=, <, <=, >, >= or when the
  subquery is used as an expression.

_____________________________________________________________________________________________________________________________________________________________________
  SELECT COUNT(*) FROM employees

_____________________________________________________________________________________________________________________________________________________________________
  SELECT MAX(item_cost) AS 'Max Item Cost' FROM products

_____________________________________________________________________________________________________________________________________________________________________
 SELECT emp_ID, f_name, l_name FROM employees e
 WHERE (SELECT AVG(order_total) FROM orders o
        WHERE o.salesperson = e.emp_ID) >
   (SELECT AVG(order_total) FROM orders)

_____________________________________________________________________________________________________________________________________________________________________
SELECT product_ID, description, item_cost
FROM products
WHERE item_cost = (SELECT MAX(item_cost) FROM products)

_____________________________________________________________________________________________________________________________________________________________________
  SELECT f_name, l_name, ticker, rating_date, rating,
    employer AS 'underwriter' FROM stock_picks sp, analysts a
  WHERE sp.analyst_ID = a.analyst_ID
    AND a.analyst_ID IN
           (SELECT analyst_ID FROM analysts
            WHERE employer IN (SELECT underwriter
                               FROM IPO_list i
                               WHERE i.ticker = sp.ticker))

_____________________________________________________________________________________________________________________________________________________________________
  WHERE employer IN (SELECT underwriter FROM IPO_list i
                     WHERE i.ticker = sp.ticker)

_____________________________________________________________________________________________________________________________________________________________________
 (SELECT analyst_ID FROM analysts
  WHERE employer IN (<second-level subquery>)

_____________________________________________________________________________________________________________________________________________________________________
SELECT f_name, l_name, symbol, rating_date, rating,
  employer AS 'underwriter' FROM stock_picks sp, analysts a
WHERE sp.analyst_ID = a.analyst_ID
AND analyst_ID IN (<first-level> subquery)

_____________________________________________________________________________________________________________________________________________________________________
 SELECT f_name, l_name FROM employees
 WHERE dept = 'Sales' AND gross_sales_ytd > 227500.50

_____________________________________________________________________________________________________________________________________________________________________
 SELECT f_name, l_name FROM employees
 WHERE dept = 'Sales'
   AND (SELECT AVG(order_total) FROM orders
        WHERE salesperson = emp_ID
          AND order_date >= '01/01/2000')
     > (SELECT AVG(order_total) FROM orders
        WHERE order_date >= '01/01/2000')

_____________________________________________________________________________________________________________________________________________________________________
SELECT f_name, l_name FROM employees
WHERE dept = 'Sales'
  AND gross sales_ytd > (SELECT AVG(gross_sales_ytd)
                         FROM employees WHERE dept='Sales')

_____________________________________________________________________________________________________________________________________________________________________
SELECT SUM(order_total) FROM orders WHERE salesperson = 11

_____________________________________________________________________________________________________________________________________________________________________
 SELECT policy_number, RTRIM(f_name)+' '+l_name AS 'Name',
   cost * .10 AS 'Surcharge'
 FROM auto_policies ap
 WHERE EXISTS (SELECT * FROM claims_paid c
               WHERE c.policy_number = ap.policy_number
                 AND claim_date > GETDATE() - 365)

_____________________________________________________________________________________________________________________________________________________________________
 UPDATE auto_policies ap
   SET discount = .1 * cost, discount = 0.00
 WHERE NOT EXISTS (SELECT * FROM claims_paid c
                   WHERE c.policy_number =
                             auto_policies.policy_number
                   AND claim_date > GETDATE() - 365)

_____________________________________________________________________________________________________________________________________________________________________
 UPDATE auto_policies
   SET surcharge = .1 * cost, discount = 0.00
 WHERE EXISTS (SELECT * FROM claims_paid c
               WHERE c.policy_number =
                         auto_policies.policy_number
                 AND claim_date > GETDATE() - 365)

_____________________________________________________________________________________________________________________________________________________________________
  (SELECT SUM(amt_due) FROM invoices
   WHERE invoices.cust_ID = c.cust_ID) > 5000.00<a name="1095"></a><a name="IDX-586"></a>

_____________________________________________________________________________________________________________________________________________________________________
  SELECT c.cust_ID, f_name, l_name, inv_date,
    SUM(amt_due) AS 'Total Due'
  FROM customers c, invoices i
  WHERE amt_due <> 0 AND c.cust_ID = i.cust_ID
    AND (
      (SELECT SUM(amt_due) FROM invoices
       WHERE invoices.cust_ID = c.cust_ID) > 5000.00
     OR
       EXISTS (SELECT inv_date FROM invoices
               WHERE invoices.cust_ID = c.cust_id
                 AND amt_due > 0
                 AND inv_date < GETDATE() - 30)
        )
  GROUP BY c.cust_ID, f_name, l_name, inv_date
  ORDER by "Total Due"

_____________________________________________________________________________________________________________________________________________________________________
  SELECT RTRIM(f_name)+' 'l_name AS 'Employee', sales_YTD
  FROM employees
  WHERE dept = 'Sales'
    AND sales_YTD > (SELECT AVG(sales_YTD) FROM employees)

_____________________________________________________________________________________________________________________________________________________________________
 EXISTS (SELECT inv_date FROM invoices
         WHERE invoices.cust_ID = c.cust_id AND amt_due > 0
           AND inv_date < GETDATE() - 30)

_____________________________________________________________________________________________________________________________________________________________________
 SELECT RTRIM(f_name)+' 'l_name AS 'Employee', sales_YTD
 FROM employees WHERE sales_YTD > 50000.00

_____________________________________________________________________________________________________________________________________________________________________
  SELECT f_name, l_name, SUM(order_total) AS 'Total Orders'
  FROM employees, orders
  WHERE employees.emp_ID = orders.salesperson
    AND order_date BETWEEN '10/01/2000' AND '10/31/2000'
  GROUP BY f_name, l_name<a name="1097"></a><a name="IDX-587"></a>
  HAVING SUM(order_total) > .25 *
     (SELECT SUM(order_total) FROM orders
      WHERE order_date BETWEEN '10/01/2000' AND '10/31/2000')

_____________________________________________________________________________________________________________________________________________________________________
 SELECT f_name, l_name, SUM(order_total) AS 'Total Orders'
 FROM employees, orders, emp_ID
 WHERE employees.emp_ID = orders.salesperson
   AND order_date BETWEEN '10/01/2000' AND '10/31/2000'
 GROUP BY f_name, l_name, emp_ID
 HAVING SUM(order_total) >= 1.5 *
    (SELECT SUM(order_total) FROM orders
     WHERE salesperson = emp_ID
       AND order_date BETWEEN '09/01/2000' AND '09/30/2000')

_____________________________________________________________________________________________________________________________________________________________________
  SELECT RTRIM(c.f_name)+' '+c.l_name AS 'Customer',
    RTRIM(e.f_name)+' '+e.l_name AS 'Salesperson'
  FROM customers c JOIN employees e
  ON salesperson = emp_ID
  WHERE cust_ID IN
    (SELECT cust_ID FROM orders
     WHERE order_date BETWEEN '01/01/2000' AND '12/31/2000'
     GROUP BY cust_ID
     HAVING SUM(order_total) > 100000.00)

_____________________________________________________________________________________________________________________________________________________________________
 SELECT RTRIM(c.f_name)+' '+c.l_name AS 'Customer',
   RTRIM(e.f_name)+' '+e.l_name AS 'Salesperson'
 FROM customers c JOIN employees e
 ON salesperson = emp_ID
 WHERE (SELECT SUM(order_total) FROM orders o
        WHERE o.cust_ID = c.cust_ID
          AND order_date
                BETWEEN '01/01/2000' AND '12/31/2000')
     > 100000.00

_____________________________________________________________________________________________________________________________________________________________________
  SELECT cust_ID, f_name, l_name, street_address, state,
    zip_code
  FROM customers
  WHERE 'NV' IN (SELECT ship_to_state FROM orders o
                 WHERE o.cust_ID = c.cust_ID)<a name="1102"></a><a name="IDX-590"></a>

_____________________________________________________________________________________________________________________________________________________________________
SELECT DISTINCT c.cust_ID, f_name, l_name, street_address,
  state, zip_code
FROM customers c JOIN orders o
ON o.cust_ID = c.cust_ID
WHERE ship_to_state = 'NV'

_____________________________________________________________________________________________________________________________________________________________________
SELECT DISTINCT cust_ID, f_name, l_name, street_address,
  state, zip_code
FROM customers c, orders o
WHERE c.cust_ID = o.cust_ID
  AND ship_to_state = 'NV'

_____________________________________________________________________________________________________________________________________________________________________
   SELECT cust_ID, RTRIM(f_name)+' '+l-name AS 'Customer',
     (SELECT discount FROM discount_schedule
      WHERE (SELECT SUM(order_total) FROM orders
             WHERE orders.cust_ID = c.cust_ID
               AND order_date >= GETDATE() - 30
               AND order_date < GETDATE())
        BETWEEN lower_limit AND upper_limit) AS 'Pct_Discount'
   FROM customers c
   WHERE c.cust_ID IN (SELECT cust_ID FROM orders
                       WHERE order_date >= GETDATE() - 30
                         AND order_date < GETDATE())<a name="1105"></a><a name="IDX-592"></a>

_____________________________________________________________________________________________________________________________________________________________________
 lower_limit   upper_limit   discount
 -----------   -----------   --------
       0.00      9,999.99       0%
  10,000.00     19,999.99       1%
  20,000.00     29,999.99       2%
  30,000.00     39,999.99       3%
  40,000.00     49,999.99       4%<a name="1104"></a><a name="IDX-591"></a>
  50,000.00     59,999.99       5%
  60,000.00     999,999.99      6%

_____________________________________________________________________________________________________________________________________________________________________
 SELECT cust_ID, RTRIM(f_name)+' '+l_name AS 'Customer',
   (SELECT discount FROM discount_schedule
    WHERE lower_limit <= (SELECT SUM(order_total) FROM orders
                          WHERE orders.cust_ID = c.cust_ID
                            AND order_date >= GETDATE() - 30
                            AND order_date < GETDATE())
      AND upper_limit >= (SELECT SUM(order_total) FROM orders
                          WHERE orders.cust_ID = c.cust_ID
                            AND order_date >- GETDATE() - 30
                            AND order_date < GETDATE()))
   AS 'Pct_Discount'
 FROM customers <i class="emphasis">c</i>
 WHERE c.cust_ID IN (SELECT cust_ID FROM orders
                     WHERE order_date >= GETDATE() - 30
                       AND order_date < GETDATE())

_____________________________________________________________________________________________________________________________________________________________________
    SELECT dept FROM employees e
    GROUP BY dept
    HAVING (SELECT COUNT(*) FROM employees cs_e
            WHERE e.dept = cs_e.dept
              AND(position LIKE '%Manager%' OR
                  position LIKE '%Supervisor%' OR
                  position LIKE '%President%')) >
           (SELECT COUNT(*) FROM employees cs_e
            WHERE e.dept = cs_e.dept
              AND(position NOT LIKE '%Manager%' AND
                  position NOT LIKE '%Supervisor%' AND
                  position NOT LIKE 'President%'))
    ORDER BY dept<a name="1107"></a><a name="IDX-593"></a>

_____________________________________________________________________________________________________________________________________________________________________
  UPDATE inventory SET price = price * .75
  WHERE NOT EXISTS
            (SELECT * FROM invoice_details i
             WHERE inventory.item_no = i.item_number
               AND inv_no IN
                     (SELECT inv_no FROM invoices
                      WHERE inv_date >= GETDATE() - 30))

_____________________________________________________________________________________________________________________________________________________________________
 UPDATE inventory SET price = price * .75

_____________________________________________________________________________________________________________________________________________________________________
 UPDATE orders SET shipping_and_handling = 0
 WHERE (SELECT SUM(order_total) FROM orders o
        WHERE o.order_number = orders.order_number)
      > 1000.00

_____________________________________________________________________________________________________________________________________________________________________
   UPDATE item_master SET item_no = 17002
   WHERE item_no = 7002<a name="1115"></a><a name="IDX-596"></a>

_____________________________________________________________________________________________________________________________________________________________________
 DELETE FROM invoice_details WHERE inv_no = 1002

_____________________________________________________________________________________________________________________________________________________________________
DELETE FROM invoices WHERE inv_no = 1002

_____________________________________________________________________________________________________________________________________________________________________
INSERT INTO INVOICE_DETAILS VALUES (1009,7005,5,2500)

_____________________________________________________________________________________________________________________________________________________________________
INSERT INTO item_master VALUES(17002,'Widget',500.00)
UPDATE invoice_details SET item_no = 17002
  WHERE item_no = 7002
DELETE FROM item_master WHERE item_no = 7002

_____________________________________________________________________________________________________________________________________________________________________
  INSERT INTO price_list (product_code, description, price)
   (SELECT item_number, description, ROUND(cost * 1.20,2)
    FROM item_master)

_____________________________________________________________________________________________________________________________________________________________________
 INSERT INTO inventory_10_31_2000 (SELECT * FROM inventory)

_____________________________________________________________________________________________________________________________________________________________________
 INSERT INTO table2 (SELECT * FROM table1)

_____________________________________________________________________________________________________________________________________________________________________
INSERT INTO orders_Oct_2000
  (SELECT * FROM orders
   WHERE order_date BETWEEN '10/01/2000' AND '10/31/2000')

_____________________________________________________________________________________________________________________________________________________________________
INSERT INTO XYZ_orders_Oct_2000
  (SELECT * FROM orders
   WHERE order_date BETWEEN '10/01/2000' AND '10/31/2000'
     AND product_code = 'XYZ')

_____________________________________________________________________________________________________________________________________________________________________
   GRANT DELETE ON customers TO sue, bill WITH GRANT OPTION

_____________________________________________________________________________________________________________________________________________________________________
 GRANT DELETE ON <table name>|<view_name> TO <username|role>
   [...,<last username|role>][WITH GRANT OPTION]

_____________________________________________________________________________________________________________________________________________________________________
 GRANT DELETE ON employees TO mary, sue, frank

_____________________________________________________________________________________________________________________________________________________________________
DELETE timecards WHERE card_date < GETDATE() - 1460

_____________________________________________________________________________________________________________________________________________________________________
DELETE timecards

_____________________________________________________________________________________________________________________________________________________________________
GRANT DELETE ON timecards TO personnel

_____________________________________________________________________________________________________________________________________________________________________
Server: Msg229, level 14, State 5, Line 1
SELECT permission denied on object 'timecards', database
  'SQLTips', owner 'dbo'.

_____________________________________________________________________________________________________________________________________________________________________
  CREATE DOMAIN qty_on_hand_domain AS INTEGER
    CONSTRAINT value_range CHECK (VALUE BETWEEN 0 AND 500)

_____________________________________________________________________________________________________________________________________________________________________
 CREATE DOMAIN executive_salary AS REAL
   CONSTRAINT salary_range
     CHECK (VALUE BETWEEN 10000.00 AND 25000.00)

_____________________________________________________________________________________________________________________________________________________________________
 CREATE DOMAIN product_code_domain AS CHARACTER(5)
   CONSTRAINT first_character
     CHECK (SUBSTRING (VALUE, 1, 1) BETWEEN 'A' AND 'Z')
   CONSTRAINT last_character
     CHECK (SUBSTRING (VALUE IN ('5','7','9'))

_____________________________________________________________________________________________________________________________________________________________________
 CREATE TABLE find_executive_salary_range
 (executive_pay executive_salary)

_____________________________________________________________________________________________________________________________________________________________________
 GRANT USAGE ON qty_on_hand_domain TO warehouse_staff

_____________________________________________________________________________________________________________________________________________________________________
CREATE TABLE inventory
  (product_code     product_code_domain,
   qty_on_hand      qty_on_hand_domain,
   qty_on_backorder INTEGER)

_____________________________________________________________________________________________________________________________________________________________________
 GRANT INSERT ON employees TO frank, mary WITH GRANT OPTION

_____________________________________________________________________________________________________________________________________________________________________
 GRANT INSERT ON employees TO sue WITH GRANT OPTION

_____________________________________________________________________________________________________________________________________________________________________
 REVOKE [GRANT OPTION FOR] <privilege list> ON <object>
   FROM <username|role>[..., <last username|role>]
    [RESTRICT|CASCADE]

_____________________________________________________________________________________________________________________________________________________________________
 REVOKE GRANT OPTION FOR INSERT ON employees FROM sue
   CASCADE

_____________________________________________________________________________________________________________________________________________________________________
 REVOKE GRANT OPTION FOR INSERT ON employees FROM sue

_____________________________________________________________________________________________________________________________________________________________________
 Server: Msg 4611, Level 16, State 1, Line 1
 To revoke grantable privileges, specify the CASCADE option
   with REVOKE.

_____________________________________________________________________________________________________________________________________________________________________
  GRANT INSERT, DELETE, SELECT ON employees
    TO linda, doreen, fred
  GRANT UPDATE ON employees
    (f_name, l_name, address, city, SSAN, state, zip_code,
     phone1, phone2, email_address, emergency_contact,
     sheriff_card, bond_amount, bond_number)
    TO linda, doreen, fred
  GRANT UPDATE ON employees
    (quota, bonus_rate, weekly_salary) <a name="1132"></a><a name="IDX-606"></a>   TO robert, richard, linda, julie
 GRANT SELECT ON employees
   TO lori, samantha, helen, william, james, joyce, nick,
      donna, karen, amber, vivian, george

_____________________________________________________________________________________________________________________________________________________________________
 GRANT SELECT ON employees TO public
 GRANT INSERT, DELETE, UPDATE ON employees
   TO linda,  doreen, fred
 REVOKE UPDATE ON employees
   (emp_ID, quota, bonus_rate, weekly_salary)
   FROM doreen, linda, fred
 GRANT UPDATE ON employees
   (quota, bonus_rate, weekly_salary)
   TO robert, richard, linda, Julie

_____________________________________________________________________________________________________________________________________________________________________
 SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED

_____________________________________________________________________________________________________________________________________________________________________
 DELETE FROM timecards
 WHERE card_date BETWEEN @period_start and @period_end

_____________________________________________________________________________________________________________________________________________________________________
 SELECT qty FROM inventory WHERE description = 'hammer'

_____________________________________________________________________________________________________________________________________________________________________
 SET TRANSACTION ISOLATION LEVEL READ COMMITTED

_____________________________________________________________________________________________________________________________________________________________________
 UPDATE inventory SET qty = qty - 10
 WHERE description = 'hammer'

_____________________________________________________________________________________________________________________________________________________________________
 SET TRANSACTION ISOLATION LEVEL REPEATABLE READ
 SELECT SUM(order_total) FROM orders WHERE cust_ID = 101
 SELECT * FROM orders WHERE cust_ID = 101

_____________________________________________________________________________________________________________________________________________________________________
  SELECT * FROM orders
  WHERE order_date BETWEEN '01/01/2000' AND '12/31/2000'

_____________________________________________________________________________________________________________________________________________________________________
  UPDATE employees SET hourly_rate = hourly_rate * 1.2
  WHERE office = 1

_____________________________________________________________________________________________________________________________________________________________________
 SELECT * FROM customers

_____________________________________________________________________________________________________________________________________________________________________
 SET TRANSACTION ISOLATION LEVEL SERIALIZABLE

_____________________________________________________________________________________________________________________________________________________________________
  SELECT * FROM orders WHERE cust_ID = 2002

_____________________________________________________________________________________________________________________________________________________________________
 SELECT COUNT(*) FROM orders WHERE cust_ID = 4004

_____________________________________________________________________________________________________________________________________________________________________
 SELECT cust_ID, total_orders FROM customers
 WHERE cust_ID = 3003

_____________________________________________________________________________________________________________________________________________________________________
   SELECT item_number, qty_on_hand inventory<a name="1162"></a><a name="IDX-620"></a>

_____________________________________________________________________________________________________________________________________________________________________
 BEGIN TRANSACTION
 SELECT * FROM auto_inventory
 UPDATE auto_inventory SET MODEL = 'Model 2'
   WHERE year = 1999 AND make = 'Camero'

_____________________________________________________________________________________________________________________________________________________________________
 KILL  <SPID>

_____________________________________________________________________________________________________________________________________________________________________
 SET TRANSACTION [{READ ONLY|READ WRITE}]
   ISOLATION LEVEL {READ UNCOMMITED|READ COMMITTED|
                    REPEATABLE READ|SERIALIZABLE}
   [DIAGNOSTICS SIZE <number of error messages>]

_____________________________________________________________________________________________________________________________________________________________________
 SET TRANSACTION ISOLATION LEVEL {READ UNCOMMITTED|
   READ COMMITTED|REPEATABLE READ|SERIALIZABLE}

_____________________________________________________________________________________________________________________________________________________________________
 SET TRANSACTION READ ONLY ISOLATION LEVEL READ UNCOMMITTED

_____________________________________________________________________________________________________________________________________________________________________
 SET TRANSACTION READ WRITE ISOLATION LEVEL SERIALIZABLE
   DIAGNOSTICS SIZE 3

_____________________________________________________________________________________________________________________________________________________________________
  BEGIN TRAN
    UPDATE employees SET salary = salary * 1.5
    DELETE employees WHERE office = 1
    UPDATE employees SET manager = NULL WHERE manager = 102

_____________________________________________________________________________________________________________________________________________________________________
  COMMIT
  ROLLBACK

_____________________________________________________________________________________________________________________________________________________________________
  ROLLBACK

_____________________________________________________________________________________________________________________________________________________________________
 BEGIN TRAN outermost_tran
   UPDATE employees SET salary = salary * 1.5

   BEGIN TRAN nested_tran1
     DELETE employees WHERE office = 1
       BEGIN TRAN nested_tran2
         UPDATE employees SET manager = NULL
         WHERE manager = 102
       COMMIT TRAN nested_tran2  - the DBMS commits no work

   COMMIT TRAN nested_tran1 - the DBMS commits no work

 COMMIT  outermost_tran - the DBMS  commits  ALL work

_____________________________________________________________________________________________________________________________________________________________________
DELETE employees

_____________________________________________________________________________________________________________________________________________________________________
ROLLBACK

_____________________________________________________________________________________________________________________________________________________________________
 CREATE ASSERTION office_employee_count
   CHECK ((offices.employee_count = COUNT(employees.emp_ID))
     AND  (employees.office_ID = offices.office_ID)
     AND  (employees.status = 'A'))

_____________________________________________________________________________________________________________________________________________________________________
 CREATE TABLE offices
   (office_ID     INTEGER  PRIMARY KEY,
   manager_ID     INTEGER,
   manager_count  INTEGER,
   employee_count INTEGER
   sales_quota    MONEY)

_____________________________________________________________________________________________________________________________________________________________________
  CREATE TABLE inventory
    (item_number INTEGER UNIQUE DEFERRABLE,
     item_cost   MONEY,
     description VARCHAR(30),
     CONSTRAINT non_zero_cost
       CHECK (item_cost > 0) DEFERRABLE)

_____________________________________________________________________________________________________________________________________________________________________
 SET CONSTRAINTS ALL DEFERRED

_____________________________________________________________________________________________________________________________________________________________________
 SET CONSTRAINTS non_zero_cost  DEFERRED

_____________________________________________________________________________________________________________________________________________________________________
 SET CONSTRAINTS
   {<constraint_name>|ALL} {DEFERRED | IMMEDIATE}

_____________________________________________________________________________________________________________________________________________________________________
 UPDATE inventory SET item_number = item_number + 500

_____________________________________________________________________________________________________________________________________________________________________
 UPDATE inventory SET item_number = item_number + 500

_____________________________________________________________________________________________________________________________________________________________________
SET CONSTRAINTS ALL IMMEDIATE

_____________________________________________________________________________________________________________________________________________________________________
ODBC;UID=<username>;PWD=<password>;DATABASE=<database name>

_____________________________________________________________________________________________________________________________________________________________________
ODBC;UID=KONRAD;PWD=KING;DATABASE=NORTHWIND

_____________________________________________________________________________________________________________________________________________________________________
 Private Sub CloseButton_Click()
 Unload Me
 End Sub

_____________________________________________________________________________________________________________________________________________________________________
 SELECT productid 'Product ID', productname 'Description',
   companyname 'Supplier', s.supplierid 'ID'
 FROM products p, suppliers s
 WHERE p.supplierid = s.supplierid
 AND companyname LIKE '%:SupplierName%'
 ORDER BY supplier, description

_____________________________________________________________________________________________________________________________________________________________________
 #include <stdio.h>
 void main()
 {  printf ("Hello world!\n");
    return;  }<a name="1215"></a><a name="IDX-645"></a>

_____________________________________________________________________________________________________________________________________________________________________
 #include <windows.h>
 int WINAPI WinMain(HINSTANCE hInstance,
                    HINSTANCE hPrevInstance,
                    LPSTR     lpCmdLine,
                    int       iCmdShow)
 {
  MessageBox (0,"Hello World!","1001 SQL Tips - Tip 372",
      MB_OK)
  return 0;
 }

_____________________________________________________________________________________________________________________________________________________________________
 MessageBox  (0,"Hello World!","1001 SQL Tips - Tip 372",
      MB_OK)

_____________________________________________________________________________________________________________________________________________________________________
 TIP372 Parameters for startup

_____________________________________________________________________________________________________________________________________________________________________
 #INCLUDE <stdio.h>
 #include <windows.h>
 #INCLUDE <sqlext.h>
 int WINAPI WinMain(HINSTANCE hInstance,
                    HINSTANCE hPrevInstance,
                    LPSTR     lpCmdLine,
                    int       iCmdShow)
 {
  HENV    henv;              //pointer to a memory location
  RETCODE retcode;           //signed short (16-Bit) integer
  LPSTR retcode_text = " ";  //character string

  retcode = SQLAllocEnv(&amp;henv);//allocate environment handle
  if (retcode == SQL_SUCCESS)
    {
        /* CONNECT TO SQL SERVER &amp; PERFORM WORK HERE */

     SQLFreeEnv(henv);//free environment handle &amp; its memory
     }
  else
    sprintf(retcode_text,"Error on SQLAllocEnv = %d",
      retcode);

 /* display any error messages */
  if (strcmp{retcode_text," ") != 0)
    MessageBox (0, retcode_text, "Connect to MSSQLServer",
      MB_OK|MB_ICONERROR);

  return 0;
 }<a name="1219"></a><a name="IDX-648"></a>

_____________________________________________________________________________________________________________________________________________________________________
 #INCLUDE <stdio.h>
 #include <windows.h>
 #INCLUDE <sqlext.h>
 int WINAPI WinMain(HINSTANCE hInstance,
                    HINSTANCE hPrevInstance,
                    LPSTR     lpCmdLine,
                    int       iCmdShow)
 {
  HENV    henv;              //HENV is data type: void*
  HDBC    hdbc;              //HDBC is data type: void*<a name="1222"></a><a name="IDX-650"></a>
  RETCODE retcode;           //signed short (16-Bit) integer
  LPSTR retcode_text = " "; //character string

  retcode = SQLAllocEnv(&amp;henv);
  if (retcode == SQL_SUCCESS)
    {                           //allocate connection handle
     retcode = SQLAllocConnect(henv,&amp;hdbc);
     If (retcode == SQL_SUCCESS)
       {
        /* CONNECT TO SQL SERVER &amp; PERFORM WORK HERE */

        SQLFreeConnect(hdbc);
       }
     else
       sprintf(retcode_text,"Error on SQLAllocConnect = %d",
         retcode);

     SQLFreeEnv(henv);
     }
  else
    sprintf(retcode_text,"Error on SQLAllocEnv = %d",
      retcode);

 /* display any error messages */
  if (strcmp(retcode_text," ") != 0)
    MessageBox (0, retcode_text, "Connect to MSSQLServer",
      MB_OK|MB_ICONERROR);

  return 0;
 }

_____________________________________________________________________________________________________________________________________________________________________
 retcode = SQLAllocConnect(henv, &amp;hdbc);

_____________________________________________________________________________________________________________________________________________________________________
 RETCODE SQLAllocConnect(henv,   phdbc)

_____________________________________________________________________________________________________________________________________________________________________
RETCODE SQLFreeConnect(hdbc)

_____________________________________________________________________________________________________________________________________________________________________
 retcode = SQLSetConnectOption(hdbc, SQL_AUTOCOMMIT,
             SQL_AUTOCOMMIT_ON);

_____________________________________________________________________________________________________________________________________________________________________
 RETCODE SQLSetConnectOption(hdbc, wOption, dwOpVal)<a name="1224"></a><a name="IDX-651"></a>

_____________________________________________________________________________________________________________________________________________________________________
 #INCLUDE <stdio.h>
 #include <windows.h>
 #INCLUDE <sqlext.h>
 int WINAPI WinMain(HINSTANCE hInstance,
                    HINSTANCE hPrevInstance,
                    LPSTR     IpCmdLine,
                    int       iCmdShow)
 {
  HENV    henv;              //HENV is data type: void*
  HDBC    hdbc;              //HDBC is data type: void*
  RETCODE retcode;           //signed short (16-Bit) integer
  LPSTR retcode_text = " "; //character string
  unsigned char data_source_name[]="MSSQLServer";
  unsigned char user_ID[]="konrad";
  unsigned char password[]="king";

  retcode = SQLAllocEnv(&amp;henv);
  if (retcode == SQL_SUCCESS)
    {
     retcode = SQLAllocConnect(henv, &amp;hdbc);
     If (retcode == SQL_SUCCESS)
       {                                 //connect to a DBMS
        retcode = SQLConnect(hdbc,data_source_name,SQL_NTS,
                    user_ID,SQL_NTS,password,SQL_NTS);

        if (retcode == SQL_SUCCESS ||
            retcode == SQL_SUCCESS_WITH_INFO)
          {
   /* SEND STATEMENTS FOR EXECUTION BY DBMS HERE(Tip 377) */

           MessageBox(0,"Connection to MSSQLServer, OK!",
             "Connect to MSSQLServer", MB_OK);

           SQLDisconnect(hdbc); //disconnect from DBMS
          }
        else
          sprintf(retcode_text,"Error on SQLConnect = %d",
            retcode)

        SQLFreeConnect(hdbc);
       }
     else
       sprintf(retcode_text,"Error on SQLAllocConnect = %d",
         retcode);

     SQLFreeEnv(henv);<a name="1230"></a><a name="IDX-655"></a>
     }
  else
    sprintf(retcode_text,"Error on SQLAllocEnv = %d",
      retcode);

 /* display any error messages */
  if (strcmp(retcode_text," ") != 0)
    MessageBox (0, retcode_text, "Connect to MSSQLServer",
      MB_OKIMB_ICONERROR);

  return 0;
 }

_____________________________________________________________________________________________________________________________________________________________________
 retcode = SQLConnect(hdbc, data_source_name, <i class="emphasis">SQL_NTS,</i>
             user_ID, SQL_NTS, password, SQL_NTS);

_____________________________________________________________________________________________________________________________________________________________________
 unsigned char data_source_name[]="MSSQLServer";
 unsigned char user_ID[]="konrad";
 unsigned char password[]="king";

_____________________________________________________________________________________________________________________________________________________________________
RETCODE SQLConnect(hdbc, szDSN, cbDSN, szUID, cbUID,
          szAUthStr, cbAuthStr)

_____________________________________________________________________________________________________________________________________________________________________
 retcode = SQLAllocStmt (hdbc, &amp;hstmt);

_____________________________________________________________________________________________________________________________________________________________________
 RETCODE SQLAllocStmt (hdbc, phstmt)

_____________________________________________________________________________________________________________________________________________________________________
 SQLFreeStmt(hstmt,uioption)

_____________________________________________________________________________________________________________________________________________________________________
   if (retcode !=SQL_SUCCESS &amp;&amp;
       retcode != SQL_SUCCESS_WITH_INFO)
     sprintf(retcode_text,"Error on SQLExecDirect = %d",
             retcode);

   else
     MessageBox (0,"Sucessful action",
       "Send statements to MSSQLServer in Raise_Prices",
                 MB_OK);

   SQLFreeStmt (hStatement_handle, SQL_DROP);}
  else
    sprintf(retcode_text,"Error on SQLAllocStmt = %d",
            retcode);
 if (strcmp(retcode_text, " ") != 0)
   MessageBox (0,retcode_text, "In Raise_Prices",
               MB_OK|MB_ICONERROR);}

_____________________________________________________________________________________________________________________________________________________________________
 RETCODE SQLExecDirect(hstmt, szSQLStmt, cbSQLStmt)

_____________________________________________________________________________________________________________________________________________________________________
 UPDATE products SET unitprice = unitprice * 1.20

_____________________________________________________________________________________________________________________________________________________________________
 RETCODE SQLFetch(hstmt)

_____________________________________________________________________________________________________________________________________________________________________
void Get_Cust_Info(HDBC hDb_connection_handle)
{#define COMPANYNAME_LEN 40
 #define CONTACTNAME_LEN 30
 #define PHONE_LEN       24
 UCHAR  szCompanyName[COMPANYNAME_LEN],
        szContactName[CONTACTNAME_LEN],
        szPhoneNumber[PHONE_LEN];
 SDWORD cbCompanyName, cbContactName, cbPhoneNumber;
 HSTMT hstatement_handle;  //data type void*
 RETCODE retcode;          //signed short (16-Bit Integer)
 LPSTR retcode_text = " "; //character string
 LPSTR szCustomerString = " ";

 retcode = SQLAllocStmt(hDb_connection_handle,
                        &amp;hStatement_handle);
 if (retcode == SQL_SUCCESS)
 {retcode = SQLExecDirect(hStatement_handle,(UCHAR *)
    "SELECT companyname, contactname, phone FROM customers"
    " WHERE customerid LIKE  'B%'"
    " ORDER BY companyname",SQL_NTS);

  if (retcode !=SQL_SUCCESS &amp;&amp; retcode !=
      SQL_SUCCESS_WITH_INFO)
    sprintf(retcode_text,"Error on SQLExecDirect = %d",
            retcode);
  else
  {/* Bind columns CompanyName (SELECT statement column 1),
      ContactName(SELECT statement column 2), and
      Phone(SELECT statement column 3) */<a name="1238"></a><a name="IDX-660"></a>
     SQLBindCol(hStatement_handle, 1, SQL_C_CHAR,
            szCompanyName, COMPANYNAME_LEN, &amp;cbCompanyName);
    SQLBindCol(hStatement_handle, 2, SQL_C_CHAR,
            szContactName, CONTACTNAME_LEN, &amp;cbContactName);
    SQLBindCol(hStatement_handle, 3, SQL_C_CHAR,
            szPhoneNumber, PHONE_LEN, &amp;cbPhoneNumber);
     /* Fetch and display each row of data.
        On an error, display a message and exit. */
    while (TRUE)
    {retcode = SQLFetch(hStatement_handle);

     if (retcode == SQL_ERROR || retcode ==
         SQL_SUCCESS_WITH_INFO)
       sprintf(retcode_text,"Error on SQLExecDirect = %d",
               retcode);
      if (retcode == SQL_SUCCESS || retcode ==
          SQL_SUCCESS_WITH_INFO)
     (strcpy(szCustomerString,"Company: ");
      strcat(szCustomerString,(const char *)szCompanyName);
      strcat (szCustomerString,"\nContact:*");
      strcat(szCustomerString,(const char *)szContactName);
      strcat(szCustomerString,"\nPhone:   *);
      strcat(szCustomerString,(const char *)szPhoneNumber);
      MessageBox (0,(const char *)szCustomerString,
                   "In Get_Cust_Info",MB_OK);}
     else break;}}

  SQLFreeStmt (hStatement_handle, SQL_DROP);}
 else
   sprintf(retcode_text,"Error on SQLAllocStmt = %d",
            retcode);

 if (strcmp(retcode_text, " ") != 0)
   MessageBox (0,retcode_text,"In Raise_Prices",
               MB_OK|MB_ICONERROR);}

_____________________________________________________________________________________________________________________________________________________________________
 retcode = SQLExtendedFetch(hstmt, SQL_FETCH_ABSOLUTE, 10,
                            &amp;pcrow,rgfRowStatus)

_____________________________________________________________________________________________________________________________________________________________________
 retcode = SQLExtendedFetch(hstmt, SQL_FETCH_FIRST, 1,
                            &amp;pcrow,rgfRowStatus)

_____________________________________________________________________________________________________________________________________________________________________
 retcode = SQLExtendedFetch(hstmt, SQL_FETCH_LAST, 1,
                            &amp;pcrow,rgfRowStatus)

_____________________________________________________________________________________________________________________________________________________________________
 retcode = SQLExtendedFetch(hstmt, SQL_FETCH_RELATIVE, -4,
                            &amp;pcrow,rgfRowStatus)

_____________________________________________________________________________________________________________________________________________________________________
 RETCODE retcode  //signed short  (defined in SQLTypes.h)
 HSTMT   hstmt    //void*  (defined in SQLTypes.h)
 UDWORD  pcrow
 UWORD   rgfRowStatus

_____________________________________________________________________________________________________________________________________________________________________
 RETCODE SQLExtendedFetch(hstmt, fFetchType, irow, pcrow,
                          rgfRowStatus

_____________________________________________________________________________________________________________________________________________________________________
  #define CMPNYNAME_LEN   40
  #define CONTACTNAME_LEN 30
  #define PHONE_LEN       24

  typedef struct(UCHAR  szCmpnyName[CMPNYNAME_LEN],
                 SDWORD cbCmpnyName;
                 UCHAR  szContactName[CONTACTNAME_LEN],
                 SDWORD cbContactName;
                 UCHAR  szPhoneNumber[PHONE_LEN];
                 SDWORD cbPhoneNumber;}
          CustInfoTable;

  CustInfoTable citCustInfo;

  SQLSetStmtOption(hStatementHandle, SQL_BIND_TYPE,
                   sizeof(CustInfoTable));

  SQLBindCol(hStatement_handle,  1, SQL_C_CHAR,
             citCustInfo.szCmpnyName, CMPNYNAME_LEN,
             &amp;citCustInfo,cbCmpnyName);
  SQLBindCol(hStatement_handle,  2, SQL_C_CHAR,
             citCustInfo.szContactName, CONTACTNAME_LEN,
             citCustInfo.&amp;cbContactName);
  SQLBindCol(hStatement_handle,  3, SQL_C_CHAR,
             citCustInfo.szPhoneNumber, PHONE_LEN,
             citCustInfo.&amp;cbPhoneNumber);

_____________________________________________________________________________________________________________________________________________________________________
  #define TEN_ROWS        10
  #define CMPNY_LEN       40
  #define CONTACTNAME_LEN 30
  #define PHONE_LEN       24
  UCHAR  szCmpnyName[CMPNY_LEN],
         szContactName[CONTACTNAME_LEN],
         szPhoneNumber[PHONE_LEN];
  SDWORD cbCmpyName, cbContactName,cbPhoneNumber;

  SQLBindCol(hStatementHandle,  1, SQL_C_CHAR,
            szCmpnyName, CMPNY_LEN, &amp;cbCmpnyName);
  SQLBindCol(hStatementHandle,  2, SQL_C_CHAR,
            szContactName, CONTACTNAME_LEN, &amp;cbContactName);
  SQLBindCol(hStatementHandle,  3, SQL_C_CHAR,
            szPhoneNumber, PHONE_LEN, &amp;cbPhoneNumber);

_____________________________________________________________________________________________________________________________________________________________________
 SQLSetStmtOption(hStatementHandle, SQL_BIND_TYPE,
                   sizeof(name_of_structure));

_____________________________________________________________________________________________________________________________________________________________________
 SQLSetStmtOption(hStatementHandle, SQL_BIND_TYPE,
                   SQL_BIND_BY_COLUMN));

_____________________________________________________________________________________________________________________________________________________________________
 HDBC    hdbc;
 LPSTR   szDatabaseToUse = " ";
 RETCODE retcode;

_____________________________________________________________________________________________________________________________________________________________________
 retcode = SQLGetGonnectOption(hDb_connection_handle,
             SQL_CURRENT_QUALIFIER, szDatabaseToUse);

_____________________________________________________________________________________________________________________________________________________________________
 retcode = SQLSetConnectOption(hDb_connection_handle,
             SQL_CURRENT_QUALIFIER, (UDWORD) "SQLTips");

_____________________________________________________________________________________________________________________________________________________________________
 RETCODE SQLGetConnectOption(hdbc, fOption, vParam)

_____________________________________________________________________________________________________________________________________________________________________
 RETCODE SQLSetPos(hstmt, irow, fOption, fLock)<a name="1249"></a><a name="IDX-667"></a>

_____________________________________________________________________________________________________________________________________________________________________
retcode = SQLSetPos(hstmt, 5, SQL_POSITION,
                    SQL_LOCK_NO_CHANGE)

_____________________________________________________________________________________________________________________________________________________________________
 retcode =  SQLExtendedFetch(hStatementHandle,
              SQL_FETCH_ABSOLUTE, 12, &amp;pcrow, rgfRowStatus);

 if (rgfRowStatus[0]  != SQL_ROW_DELETED &amp;&amp;
     rgfRowStatus[0]  != SQL_ROW_ERROR)
 {
   strcpy(citCustInfoRecord[0].szFirstName,"Konrad");
   strcpy(citCustInfoRecord[0].szLastName,"King");
   SQLSetPos(hStatementHandle, 1, SQL_UPDATE,
             SQL_LOCK_NO_CHANGE)
 }

_____________________________________________________________________________________________________________________________________________________________________
 SELECT cust_ID, f_name, l_name, phone_number
 FROM customers384

_____________________________________________________________________________________________________________________________________________________________________
   SQLSetPos(hstmt, 0, SQL_DELETE, SQL_LOCK_NO_CHANGE)<a name="1254"></a><a name="IDX-670"></a>

_____________________________________________________________________________________________________________________________________________________________________
   SQLSetPos(hstmt, 2, SQL_DELETE, SQL_LOCK_NO_CHANGE)

_____________________________________________________________________________________________________________________________________________________________________
 retcode = SQLExtendedFetch(hStatementHandle,
             SQL_FETCH_ABSOLUTE, 9, &amp;pcrow, rgfRowStatus);

 if (rgfRowStatus[0] != SQL_ROW_DELETED &amp;&amp;
     rgfRowStatus[0] != SQL_ROW_ERROR)
   SQLSetPos(hStatementHandle, 1, SQL_DELETE,
             SQL_LOCK_NO_CHANGE)

_____________________________________________________________________________________________________________________________________________________________________
 RETCODE SQLSetPos(hstmt, irow, fOption, fLock)

_____________________________________________________________________________________________________________________________________________________________________
 DELETE FROM customers WHERE cust_id = 9

_____________________________________________________________________________________________________________________________________________________________________
 strcpy(szSQLStatement,
        "DELETE FROM customers WHERE tstamp = 0x");
 strcat(szStatementstring, citCustinfoRecord(0].szTimeStamp
 retcode = SQLExecDirect(hDeleteStmtHandle,
             (UCHAR *)szSQLStatement,SQL_NTS)

_____________________________________________________________________________________________________________________________________________________________________
 UPDATE customers SET f_name = 'Konrad', l_name = 'king'
 WHERE cust_id = 9

_____________________________________________________________________________________________________________________________________________________________________
 retcode = SQLExecDirect(hQueryStmtHandle, (UCHAR *)
   "SELECT tstamp, cust_ID, f_name, l_name, phone_number"
   " FROM customers", SQL_NTS);

_____________________________________________________________________________________________________________________________________________________________________
 retcode = SQLExtendedFetch(hQueryStmtHandle, SQL_FETCH_ABSOLUTE, 5,
 &amp;pcrow, rgfRowStatus);
 strcpy(citCustInfoRecord[O].szFirstName,"Sally");
 strcpy(citCustInfoRecord[0].szLastName,"Wells");

_____________________________________________________________________________________________________________________________________________________________________
 strcpy(szStmtString,"UPDATE customers SET f_name = ' "');
 strcat(szStmtstring,citCustInfoRecord[0].szFirstName);
 strcat(szStmtString,"', l_name = '"
 strcat(szStmtString,citCustInfoRecord[0].szLastName);
 strcat(szStmtString,"' WHERE tstamp = 0x");
 strcat(szStmtString, citCustInfoRecord(0].szTimeStamp);

 retcode = SQLExecDirect(hUpdateStmtHandle,
                         (UCHAR *)szStmtString,SQLNTS);

_____________________________________________________________________________________________________________________________________________________________________
 strcpy(szStmtString,"UPDATE customers SET f_name = '");
 strcat(szStmtString,citCustInfoRecord[0].szFirstName);
 strcat(szStmtString,"', l_name = '"
 strcat(szStmtstring,citCustInfoRecord[0].szLastName);
 strcat(szStmtString,"' WHERE cust_ID = ");
 strcat(szStmtString, citCustInfoRecord[0].szCust_ID);<a name="1259"></a><a name="IDX-673"></a>
 retcode = SQLExecDirect(hUpdateStmtHandle,
                         (UCHAR *)szStmtString,SQLNTS);

_____________________________________________________________________________________________________________________________________________________________________
 retcode = SQLError(henv, SQL_NULL_HDBC, SQL_NULL_HSTMT,
             szSQLState, &amp;pfNativeError, szErrorMessage,
             MSG_BUFF_SIZE, &amp;cbErrorMsg);

_____________________________________________________________________________________________________________________________________________________________________
 retcode = SQLError(SQL_NULL_HENV, henv, SQL_NULL_HSTMT,
             szSQLState, &amp;pfNativeError, szErrorMessage,
             MSG_BUFF_SIZE, &amp;cbErrorMsg);

_____________________________________________________________________________________________________________________________________________________________________
 retcode = SQLError(SQL_NULL_HENV, SQL_NULL_ENV, hstmt,
             szSQLState, &amp;pfNativeError, szErrorMessage,
             MSG_BUFF_SIZE, &amp;cbErrorMsg);<a name="1262"></a><a name="IDX-675"></a>

_____________________________________________________________________________________________________________________________________________________________________
 RETCODE SQLError(henv, hdbc, hstmt, szSQLState,
           pfNativeError, szErrorMessage, cbErrorMsgMax,
           pcbErrorMsg);<a name="1261"></a><a name="IDX-674"></a>

_____________________________________________________________________________________________________________________________________________________________________
 if (cbSalespersonID != SQL_NULL_DATA)
   sprintf((char *)szsalerspersonID,
           "\nsalesperson ID: %d",sSalespersonID);
 else
   strcpy((char *)szSalespersonID,
          "\nSalesperson ID: **UNASSIGNED **");

_____________________________________________________________________________________________________________________________________________________________________
 SQLBindCol(hStatementHandle, 4, SQL_C_SSHORT,
            &amp;sSalespersonID, 0, &amp;cbSalespersonlD);<a name="1265"></a><a name="IDX-676"></a>

_____________________________________________________________________________________________________________________________________________________________________
 SQLBindCol(hstmt, icol, fCType, rgbvalue, cbValueMax,
            pcbValue)

_____________________________________________________________________________________________________________________________________________________________________
 SWORD sSalespersonID

_____________________________________________________________________________________________________________________________________________________________________
 Sub main()

 DIM sDBLIBVersion AS String

 sDBLIBVersion = SqlInit()
 If sDBLIBVersion = vbNULLString Then
   MsgBox "Error!  Failed to initialize the DB-Library!"
   Exit Sub
 Else
   'Make subroutine calls and start the main program<a name="1279"></a><a name="IDX-683"></a>
  'loop here
   MsgBox sDBLIBVersion

  'Exit the DB-Library and free its memory resources
  SqlWinExit
End If

End Sub

_____________________________________________________________________________________________________________________________________________________________________
 hConnHandle = SqlOpenConnection (sServerName, sLoginID,
                sPassword, sWsName,  sAppName)

_____________________________________________________________________________________________________________________________________________________________________
 hConnHandle = SqlOpenConnection("NVBizNet2", _
                 "konrad", "king","myworkstation", _
                 App.EXEName)

_____________________________________________________________________________________________________________________________________________________________________
 hConnHandlel = SqlOpenConnection("NVBizNet2", _
                  "konrad", "king","my_ws-1", App.EXEName)
 hConnHandle2 = SqlOpenConnection("NVBizNet2", _
                  "konrad", "king","my_ws-2", App.EXEName)
 hConnHandle3 = SqlOpenConnection("NVBizNet2", _
                  "konrad", "king","my_ws-3", App.EXEName)

_____________________________________________________________________________________________________________________________________________________________________
 SqlClose (hConnHandle)

_____________________________________________________________________________________________________________________________________________________________________
 SqlClose(hConnHandle2)

_____________________________________________________________________________________________________________________________________________________________________
 SqlExit

_____________________________________________________________________________________________________________________________________________________________________
 nRetCode = SqlSendCmd(hConnHandle, sSQLStatement)

_____________________________________________________________________________________________________________________________________________________________________
 nRetCode = SqlSendCmd{hConnHandle,  "USE Northwind")
 nRetCode = SqlSendCmd(hConnHandle,  _
   "UPDATE PRODUCTS  SET unitprice = unitprice * 1.20")<a name="1286"></a><a name="IDX-687"></a>

_____________________________________________________________________________________________________________________________________________________________________
 SELECT * FROM products

_____________________________________________________________________________________________________________________________________________________________________
 SqlNumCols (nConnHandle)

_____________________________________________________________________________________________________________________________________________________________________
 Sub main()

 Dim sDBLIBVersion As String
 Dim nConnHandle As Long
 Dim nRetCode As Long
 sDBLIBVersion = SqlInit()
 nConnHandle = SqlOpenConnection("NVBizNet2", "konrad", _
                 "king", "my_ws-1", App.EXEName)
 nRetCode = SqlSendCmd(nConnHandle, "USE Northwind")
 nRetCode = SqlSendCmd(nConnHandle,"SELECT * FROM products")

 MsgBox "Cursor column count = " &amp; SqlNumCols(nConnHandle)

 SqlExit
 SqlWinExit
 End Sub

_____________________________________________________________________________________________________________________________________________________________________
 Private Sub GetColumnNames _
   (nConnHandle As Long, FlexGrid As MSFlexGrid)
 Dim i As Integer

 FlexGrid.Cols = SqlNumCols(nConnHandle)
 FlexGrid.Rows = 1
 FlexGrid.Row = 0
 FlexGrid.Col = 0

 For i = 1 To FlexGrid.Cols
   FlexGrid.Text = SqlColName(nConnHandle, i)
   FlexGrid.ColWidth(FlexGrid.Col) = _
     Forml.TextWidth(FlexGrid.Text) + 120
   If FlexGrid.Col < FlexGrid.Cols - 1 Then
     FlexGrid..Col = FlexGrid.Col + 1
   End If
 Next i

 FlexGrid.Redraw = True
 End Sub

_____________________________________________________________________________________________________________________________________________________________________
 SqlColName(nConnHandle, iColNo)

_____________________________________________________________________________________________________________________________________________________________________
 FlexGrid.col = 0
 For i = 1 to SqlNumCols(nConnHandle)
   FlexGrid.text = SqlData(nConnHandle,i)

   If FlexGrid.col < FlexGrid.cols - 1 Then
     FlexGrid.col = FlexGrid.col + 1
   End If
 Next  i

_____________________________________________________________________________________________________________________________________________________________________
 SqlData(nConnHandle, iColNo)

_____________________________________________________________________________________________________________________________________________________________________
 sUnitPrice = SqlData(nConnHandle,6)

_____________________________________________________________________________________________________________________________________________________________________
 Private Sub GetResultsSet _
   (nConnHandle As Long, FlexGrid As MSFlexGrid)
 Dim i As Integer

 FlexGrid.Redraw = False
 FlexGrid.AllowUserResizing = FlexResizeColumns
 FlexGrid.FixedCols = 0
 FlexGrid.Row = 0
 Do Until NOMOREROWS = SqlNextRow(nConnHandle)
   FlexGrid.Col = 0
   FlexGrid.Rows = FlexGrid.Rows + 1
   FlexGrid.Row = FlexGrid.Row - 1

   For i = 1 To FlexGrid.Cols
     FlexGrid.Text = SqlData(nConnHandle,i)
     If FlexGrid.Col < (FlexGrid.Cols - 1) Then
       FlexGrid.Col = FlexGrid.Col + 1
     End If
   Next i
 Loop

 FlexGrid.Redraw = True
 End Sub

_____________________________________________________________________________________________________________________________________________________________________
 SqlNextRow (nConnHandle)

_____________________________________________________________________________________________________________________________________________________________________
 nRetCode = SqlCmd(nConnHandle, "USE Northwind")
 nRetCode = SqlCmd(nConnHandle, " SELECT * FROM products")
 nRetCode = SqlCmd(nConnHandle, " USE Pubs")
 nRetCode = SqlCmd{nConnHandle, " SELECT * FROM authors")

_____________________________________________________________________________________________________________________________________________________________________
 nRetCode = SqlCmd(nConnHandle, sSQLStatement)

_____________________________________________________________________________________________________________________________________________________________________
 nRetCode = SqlExec(nConnHandle)

_____________________________________________________________________________________________________________________________________________________________________
 nRetCode = SqlExec(nConnHandle)

_____________________________________________________________________________________________________________________________________________________________________
 USE Northwind SELECT * FROM products USE Pubs SELECT * FROM authors

_____________________________________________________________________________________________________________________________________________________________________
 Do Until NOMORERESULTS = SqlResults(nConnHandle)
   If SqlNumCols(nConnHandle) > 0 Then
 'Routines that retrieve and work with query results<a name="1302"></a><a name="IDX-696"></a>
     GetColumnNames nConnHandle, Forml.QueryResults
     GetResultsSet nConnHandle, Form1.QueryResults

     MsgBox  "Click your mouse pointer on the OK button " _
       &amp; "to process the next  set of results."
   End If
 Loop

_____________________________________________________________________________________________________________________________________________________________________
 nRetCode = SqlResults(nConnHandle)

_____________________________________________________________________________________________________________________________________________________________________
 nRetCode = SqlExec(nConnHandle)

_____________________________________________________________________________________________________________________________________________________________________
 nRetCode = SqlSend(nConnHandle)
 nRetCode = SqlOk(nConnHandle)

_____________________________________________________________________________________________________________________________________________________________________
 nRetCode = SqlSend(nConnHandle)

_____________________________________________________________________________________________________________________________________________________________________
 'SqlCmd() function calls to build the SQL batch
 SqlSend(nConnHandle)

 Do Until SUCCEED = SqlDataReady(nConnHandle)
   'VB statements that perform work you want the application
   'to do while waiting for the DBMS to finish processing
   'the SQL statements in the "nConnHandle" command buffer
 Loop<a name="1305"></a><a name="IDX-698"></a>
 If SqlOk(nConnHandle) = SUCCESS Then
   'VB statements that process the results sets (one for
   'each statement in the batch) for the SQL statement batch
   'submitted to the MS-SQL Server by the SqlSend() function
   'call
 End If

_____________________________________________________________________________________________________________________________________________________________________
nRetCode = SqlSend(nConnHandle)

_____________________________________________________________________________________________________________________________________________________________________
 nRetCode = SqlSend(nConnHandle)

_____________________________________________________________________________________________________________________________________________________________________
 Private Sub DataReady_Click()
 If SqlDataReady(nConnHandle) = SUCCEED Then
   If SqlOk(nConnHandle) = SUCCEED Then
     GetBatchResults (nConnHandle)
   Else
     MsgBox "The statement batch failed to execute."
   End If
 Else
   MsgBox "The DBMS is still processing the batch."
 End If
 End Sub

_____________________________________________________________________________________________________________________________________________________________________
 nRetCode = SqlCancel(nConnHandle)

_____________________________________________________________________________________________________________________________________________________________________
 nRetCode = SqlCancel(nConnNVBizNet2)

_____________________________________________________________________________________________________________________________________________________________________
 nRetCode = SqlCanQuery{nConnHandle)

_____________________________________________________________________________________________________________________________________________________________________
 nRetCode = SqlSendCmd(nConnHandle, "USE Northwind" _
   &amp; " SELECT * FROM products USE Pubs " _
   &amp; " SELECT * FROM authors "

_____________________________________________________________________________________________________________________________________________________________________
 SELECT * FROM products

_____________________________________________________________________________________________________________________________________________________________________
 nRetCode = (nConnHandle, "PUBS")
 nRetCode = SqlSendCmd(nConnHandle, "SELECT * FROM authors")

_____________________________________________________________________________________________________________________________________________________________________
 nRetCode = SqlUse(nConnHandle)

_____________________________________________________________________________________________________________________________________________________________________
 SELECT * FROM authors

_____________________________________________________________________________________________________________________________________________________________________
 SELECT * FROM products

_____________________________________________________________________________________________________________________________________________________________________
 SELECT * FROM pubs.dbo.authors

_____________________________________________________________________________________________________________________________________________________________________
 Server: Msg 208, Level 16, State 1, Line1
 Invalid object name 'authors'.

_____________________________________________________________________________________________________________________________________________________________________
 USE pubs
 SELECT * from authors

_____________________________________________________________________________________________________________________________________________________________________
 Private Sub Vbsql1_Error(ByVal SqlConn As Long, _
   ByVal Severity As Long, ByVal ErrorNum As Long, _
   ByVal ErrorStr As String, ByVal OSErrorNum As Long, _
   ByVal OSErrorStr As String, RetCode As Long)

 Select Case ErrorNum
   Case 10007: 'Do not display non-error (info) messages
   Case Else
     MsgBox "Error Code: " &amp; ErrorNum &amp; vbCrLf &amp; _
        "Severity: " &amp; Severity &amp; vbCrLf &amp; _
        "Message: " &amp; ErrorStr, vbOKOnly, _
        "DBLib Error In - " &amp; App.EXEName
 End Select
 End Sub<a name="1318"></a><a name="IDX-705"></a>

_____________________________________________________________________________________________________________________________________________________________________
 Private Sub Vbsql1_Error(ByVal SqlConn As Long, _
   ByVal Message As Long, ByVal State As Long, _
   ByVal Severity As Long, ByVal MsgStr As String, _
   ByVal ServerNameStr As String, ProcNameStr As String, _
   ByVal Line As Long)

 Select Case Message
   Case 5701: 'Do not display non-error (info) messages
   Case Else
     MsgBox "Error reported by MS-SQL Server: " &amp; _
       ServerNameStr &amp; "." &amp; vbCrLf &amp; "Msg: " &amp; _
       Message &amp; ", Severity: " &amp; Severity &amp; _
       ", State: " &amp; State &amp; ", Line: " &amp; _
       Line &amp; vbCrLf &amp; "Message: " &amp; MsgStr, vbOKOnly, _
       "MS-SQL Server Reported Error In - " &amp; App.EXEName
 End Select
 End Sub

_____________________________________________________________________________________________________________________________________________________________________
 iColType = SqlColType(nConnHandle, iColNo)<a name="1322"></a><a name="IDX-707"></a>

_____________________________________________________________________________________________________________________________________________________________________
 If SqlColType (nConnHandle, 3) = SQLIMAGE
   MsgBox "Use Image App. to display image in Col 3."
 End If

_____________________________________________________________________________________________________________________________________________________________________
  MsgBox "The number of letters in""" &amp; _
    SglData(nConnHandle,1) &amp; """""" &amp; _
    " is " &amp; SqlDatLen(nConnHandle, 1) &amp; "."

_____________________________________________________________________________________________________________________________________________________________________
 iColLen = SqlDatLen(nConnHandle, iColNo)

_____________________________________________________________________________________________________________________________________________________________________
 MsgBox "The number of bytes used to store the decimal" &amp; _
    " DISCOUNT value: " &amp; SqlData(nConnHandle, 5) &amp; _
    " is " &amp; SqlDatLen(nConnHandle, 5) &amp; "." &amp; vbCrLf &amp; _
    "The number of digits retrieved by SqlData() is " &amp; _
    Len (SqlData(nConnHandle, 5)) &amp; ".", vbOKOnly, _
    "SqlDatLen() Value vs. Len() Value for Numeric Data"

_____________________________________________________________________________________________________________________________________________________________________
 DIM iHighQty

_____________________________________________________________________________________________________________________________________________________________________
 iHighQty = Null

_____________________________________________________________________________________________________________________________________________________________________
For i = 1 To FlexGrid.Cols
  If SqlDataLen(nConnHandle, I) <> 0 Then
    FlexGrid.Text = SqlData(nConnHandle, i)
  Else
    FlexGrid.Text = "** NULL **"
  End If
Next  i

_____________________________________________________________________________________________________________________________________________________________________
If SqlDataLen(nConnHandle,3) = 0 Then
  iHighQty = NULL
End If

If IsNull(iHighQty) Then
  MsgBox "The HIGHQTY column for the discount type " &amp; _
    SqlData(nConnHandle,3) &amp; " is NULL."
End If

_____________________________________________________________________________________________________________________________________________________________________
 nRetCode = SqlSetOpt(nConnHandle,SQLBUFFER,iBuffRowCt)

_____________________________________________________________________________________________________________________________________________________________________
For iRow = 1 To 3
  nRetCode = SqlNextRow(nConnHandle)

  If (nRetCode <> NOMOREROWS) And
     (nRetCode <> BUFFULL) Then

    'Call SqlData() to retrieve specific data value from
    'columns in the "current" row of the query results set
  End If
Loop

_____________________________________________________________________________________________________________________________________________________________________
NRetCode = SqlSetOpt (nConnHandle, SQLBUFFER, 10)

_____________________________________________________________________________________________________________________________________________________________________
    'Read 6 rows of query results into the DBLIB buffer
 For i = 1 to 6
   nRetCode = SqlNextRow(nConnHandle, i)
 Next i
    'Clear the DBLIB buffer to make room for more results
 SqlClrBuf nConnHandle,6
    'Read rows 7 - 12 of query results into the DBLIB buffer
 For i = 1 to 6
   nRetCode = SqlNextRow(nConnHandle, i)
 Next i
    'Select the 12th row of query results
 nRetCode = SqlGetRow(nConnHandle,12)

_____________________________________________________________________________________________________________________________________________________________________
   'Set the DBLIB buffer to 6 rows
nRetCode = SqlSetOpt(nConnHandle, SQLBUFFER, 6)
   'Read 6 rows of data from the query results set into the
   'DBLIB buffer
For i = 1 to 6
  nRetCode = SqlNextRow(nConnHandle, i)
Next i<a name="1337"></a><a name="IDX-715"></a>

_____________________________________________________________________________________________________________________________________________________________________
nRetCode =  SqlGetRow(nConnHandle,   4)

_____________________________________________________________________________________________________________________________________________________________________
nRetCode = SqlGetRow (nConnHandle, iRowNo)

_____________________________________________________________________________________________________________________________________________________________________
 nRetCode = SqlSetOpt(nConnHandle, SQLBUFFER, 10)

_____________________________________________________________________________________________________________________________________________________________________
 SqlClrBuf nConnHandle, 5

_____________________________________________________________________________________________________________________________________________________________________
 SqlClrBuf nConnHandle, iRowCt

_____________________________________________________________________________________________________________________________________________________________________
 SELECT *  FROM employees FOR BROWSE

_____________________________________________________________________________________________________________________________________________________________________
 SELECT * FROM employees

_____________________________________________________________________________________________________________________________________________________________________
iCanBeUpdated = SqlTabBrowse(nConnHandle,1)

_____________________________________________________________________________________________________________________________________________________________________
sTableName = SqlTabName(nConnHandle,2)

_____________________________________________________________________________________________________________________________________________________________________
sTableName = SqlTabSource(nConnHandle,4,iTabNum)

_____________________________________________________________________________________________________________________________________________________________________
 SqlGetRow(nQueryConnHandle,5)

_____________________________________________________________________________________________________________________________________________________________________
 sWhereClause = SqlQual(nConnHandle,iTabNum,sTabName)

_____________________________________________________________________________________________________________________________________________________________________
 sWhereClause = SqlQual(nQueryConnHandle,-1,"employees422")<a name="1350"></a><a name="IDX-722"></a>

_____________________________________________________________________________________________________________________________________________________________________
where (emp_ID=5) and tsequal(tstamp,0x00000000000006fc)

_____________________________________________________________________________________________________________________________________________________________________
 nRetCode = SqlCmd(nQueryCortnHandle, " USE SQLTips")
 nRetCode = SqlCmd(nQueryConnHandle,
   " SELECT * FROM employees423 FOR BROWSE")
 nRetCode = SqlSend (nQueryConnHandle)

_____________________________________________________________________________________________________________________________________________________________________
 nRetCode = SqlGetRow(nQueryConnHandle,10)

_____________________________________________________________________________________________________________________________________________________________________
 nRetCode = SqlOk(nQueryConnHandle)
 nRetCode = SqlResults(nQueryConnHandle) 'Get USE results
 nRetCode = SqlResults(nQueryConnHandle) 'Get SELECT results
 nRetCode = SqlSetOpt(nQueryConnHandle, SQLBUFFER, 100)
 Do Until NOMOREROWS = SqlNextRow(nQueryConnHandle)
 Loop

_____________________________________________________________________________________________________________________________________________________________________
 nRetCode = SqlSendCmd(nDelConnHandle,sDelStmt)

_____________________________________________________________________________________________________________________________________________________________________
 sDelStmt = "DELETE FROM employees423 " &amp; _
               SqlQua1(nQueryConnHandle,-1,"employees423")

_____________________________________________________________________________________________________________________________________________________________________
Dim sDelStmt As  String
Dim nRetCode As Long
Dim nQueryConnHandle As Long
Dim nDelConnHandle As Long
nQueryConnHandle=SqlOpenConnection("NVBizNet2","konrad",_
  "king","ws-query",App.EXEName)
nDelConnHandle=SqlOpenConnection("NVBizNet2","konrad",_
  "king","ws-delete",App.EXEName)

_____________________________________________________________________________________________________________________________________________________________________
 nRetCode = SqlCmd(nQueryConnHandle," USE SQLTips")
 nRetCode = SqlCmd(nQueryConnHandle,
   " SELECT * FROM employees424 FOR BROWSE")
 nRetCode = SqlSend(nQueryConnHandle)

_____________________________________________________________________________________________________________________________________________________________________
 nRetCode = SqlGetRow(nQueryConnHandle,7)

_____________________________________________________________________________________________________________________________________________________________________
Dim sUpdtStmt As String
Dim nRetCode As Long
Dim nQueryConnHandle As Long
Dim nUpdtConnHandle As Long
nQueryConnHandle=SqlOpenConnection("NVBizNet2","konrad",_
  "king","ws-query",App.EXEName)
nUpdtConnHandle=SqlOpenConnection("NVBizNet2","konrad",_
  "king","ws-update",App.EXEName)

_____________________________________________________________________________________________________________________________________________________________________
nRetCode = SqlOk(nQueryConnHandle)
nRetCode = SqlResults(nQueryConnHandle) 'Get USE results
nRetCode = SqlResults(nQueryConnHandle) 'Get SELECT results
nRetCode = SqlSetOpt(nQueryConnHandle, SQLBUFFER, 100)
Do Until NOMOREROWS = SqlNextRow(nQueryConnHandle)
Loop

_____________________________________________________________________________________________________________________________________________________________________
sUpdtStmt = "UPDATE employees423 SET position = NULL " &amp; _
              SqlQual(nQueryConnHandle,-1,"employees423")
nRetCode = SqlSendCmd(nUpdtConnHandle,sUpdtStmt)

_____________________________________________________________________________________________________________________________________________________________________
 Dim i As Integer
 FlexGrid.Cols = SqlNumCols(nQueryConnHandle)
 FlexGrid.Rows = 1
 FlexGrid.Row = 0
 FlexGrid.Col = 0<a name="1359"></a><a name="IDX-726"></a>
For i = 1 To FlexGrid.Cols
   FlexGrid.Text = SqlColName(nQueryConnHandle,i)
   If FlexGrid.Col < FlexGrid.Cols - 1 Then
     FlexGrid.Col = FlexGrid.Col + 1
   End If
 Next i

_____________________________________________________________________________________________________________________________________________________________________
 nRetCode = SqlSendCmd(nQueryConnHandle,Forml.textl.Text)

_____________________________________________________________________________________________________________________________________________________________________
Sub GetResultsSet (nConnHandle As Long, _
                     FlexGrid As MSFlexGrid)
Dim iCol As Integer
Dim nRetCode As Long

Do Until NOMOREROWS = SqlNextRow(nConnHandle)
  FlexGrid.Col = 0
  FlexGrid.Rows = FlexGrid.Rows + 1
  FlexGrid.Row = FlexGrid.Rows - 1

  For iCol = 1 To FlexGrid.Cols
    If SqlDatLen(nConnHandle, iCol) <> 0 Then
      FlexGrid.Text = SqlData(nConnHandle, iCol)
    Else
      FlexGrid.Text = "** NULL **"
    End If

    If FlexGrid.Col < (FlexGrid.Cols - 1) Then
      FlexGrid.Col = FlexGrid.Col + 1
    End If
  Next iCol
Loop
End Sub

_____________________________________________________________________________________________________________________________________________________________________
 UPDATE customers SET rebate =
   (SELECT SUM(order_total) FROM orders
    WHERE order_date BETWEEN '12/01/2000'  AND '12/31/2000'
    GROUP BY cust_no
    HAVING cust_no = cust_ID)  * .01

_____________________________________________________________________________________________________________________________________________________________________
  DECLARE  cur_payroll_work CURSOR
  FOR SELECT emp_num, dept, hourly_rate, ot_rate,
             monthly_salary, time_in, time_out, project,
             tcard_hourly_rate, tcard_labor_cost
      FROM timecards, employees
      WHERE timecards.emp_ID = employees.emp_num

_____________________________________________________________________________________________________________________________________________________________________
DECLARE <cursor name> [INSENSITIVE][SCROLL] CURSOR
FOR <SELECT statement>
[FOR {READ ONLY | UPDATE[OF <column list>]}]

_____________________________________________________________________________________________________________________________________________________________________
 OPEN cur_payroll_work

_____________________________________________________________________________________________________________________________________________________________________
OPEN <cursor name>

_____________________________________________________________________________________________________________________________________________________________________
 DECLARE cur_payroll_work CURSOR
 FOR SELECT emp_num, dept, hourly_rate, ot_rate,
            monthly_salary, time_in, time_out, project,
            tcard_hourly_rate, tcard_labor_cost
     FROM timecards, employees
     WHERE timecards.emp_ID = employees.emp_num
     ORDER BY emp_ID, time_in, time_out

_____________________________________________________________________________________________________________________________________________________________________
ORDER BY <column name> [ASC | DESC]
  [,...<last column name> [ASC | DESC]]

_____________________________________________________________________________________________________________________________________________________________________
 DECLARE cur_payroll_work CURSOR
 FOR SELECT emp_num, dept, ot_rate, monthly_salary,
            time_in, time_out, project,
            tcard_hourly_rate, tcard_labor_cost,
            COALESCE(hourly_rate,
              (monthly_salary * 12) / 2080) hrly_rate
            (CONVERT(REAL,(time_out - time_in),8) * 24)
              hours_worked
     FROM timecards, employees
     WHERE timecards.emp_ID = employees.emp_num
     ORDER BY emp_ID,    time_in, time_out

_____________________________________________________________________________________________________________________________________________________________________
(<monthly salary> * 12) / (40 hours * 52 weeks)

_____________________________________________________________________________________________________________________________________________________________________
 DECLARE <cursor name> CURSOR
 FOR <SELECT statement> FOR UPDATE

_____________________________________________________________________________________________________________________________________________________________________
 DECLARE <cursor name> CURSOR
 FOR <SELECT statement> READ ONLY

_____________________________________________________________________________________________________________________________________________________________________
 DECLARE cur_payroll_work CURSOR
 FOR SELECT emp_num, dept, ot_rate, monthly_salary,
            time_in, time_out, project,
            tcard_hourly_rate, tcard_labor_cost,
            COALESCE(hourly_rate,
              (monthly_salary * 12) / 2080) hrly_rate
            (CONVERT(REAL,(time_out - time_in),8) * 24)
              hours_worked<a name="1372"></a><a name="IDX-733"></a>
     FROM timecards, employees
     WHERE timecards.emp_ID = employees.emp_num
     FOR UPDATE OF tcard_hourly_rate, tcard_labor_cost

_____________________________________________________________________________________________________________________________________________________________________
DECLARE <cursor name> CURSOR
FOR <SELECT statement>

_____________________________________________________________________________________________________________________________________________________________________
 DECLARE @au_ID CHAR(11),
         @au_fname VARCHAR(30), @au_lname VARCHAR(30)
 OPEN cur_authors
 FETCH cur_authors INTO @au_ID, @au_fname, @au_lname
 PRINT 'ID: ' + @au_ID+' Name: '+@au_fname +' '+@au_lname<a name="1374"></a><a name="IDX-734"></a>

_____________________________________________________________________________________________________________________________________________________________________
 ID: 172-32-1176  Name: Johnson White
 ID: 213-46-8915  Name: Marjorie Green

_____________________________________________________________________________________________________________________________________________________________________
 USE pubs
 DECLARE cur_authors CURSOR
 FOR SELECT au_ID, au_fname, au_lname FROM authors

_____________________________________________________________________________________________________________________________________________________________________
FETCH [NEXT | PRIOR | FIRST | LAST |
      {ABSOLUTE <row number>}|{(RELATIVE <row number>}]
      FROM <cursor name>
      [INTO <variable name>[,...<last variable name>]]

_____________________________________________________________________________________________________________________________________________________________________
 DECLARE <cursor name> SCROLL CURSOR
 FOR <SELECT statement>

_____________________________________________________________________________________________________________________________________________________________________
 FETCH  RELATIVE -3 FROM cur_authors
 INTO @au_fname, @au_lname

_____________________________________________________________________________________________________________________________________________________________________
 FETCH ABSOLUTE -3 FROM cur_authors
 INTO @au_fname, @au_lname

_____________________________________________________________________________________________________________________________________________________________________
 FETCH FROM <cursor name> INTO <variable list>

_____________________________________________________________________________________________________________________________________________________________________
 FETCH NEXT FROM cur_authors INTO @au_fname, @au_lname

_____________________________________________________________________________________________________________________________________________________________________
 FETCH PRIOR FROM cur_authors INTO @au_fname, @au_lname

_____________________________________________________________________________________________________________________________________________________________________
 FETCH RELATIVE 1 FROM cur_authors INTO @au_fname, @au_lname

_____________________________________________________________________________________________________________________________________________________________________
 FETCH RELATIVE -1 FROM cur_authors
 INTO @au_fname, @au_lname

_____________________________________________________________________________________________________________________________________________________________________
 FETCH RELATIVE 10 FROM cur_authors
 INTO @au_fname, @au_lname

_____________________________________________________________________________________________________________________________________________________________________
DECLARE cur_authors SCROLL CURSOR
FOR SELECT au_fname, au_lname FROM authors

_____________________________________________________________________________________________________________________________________________________________________
FETCH ABSOLUTE 10 FROM cur_authors
INTO @au_fname, @au_lname<a name="1377"></a><a name="IDX-736"></a>

_____________________________________________________________________________________________________________________________________________________________________
 DELETE FROM <table name> WHERE CURRENT OF <cursor name>

_____________________________________________________________________________________________________________________________________________________________________
 DELETE FROM orders
 WHERE date_shipped = NULL AND order_date < GetDate() - 30

_____________________________________________________________________________________________________________________________________________________________________
 OPEN cur_timecards CURSOR
 FETCH FROM cur_timecards<a name="1379"></a><a name="IDX-737"></a>
 FETCH FROM cur_timecards
 FETCH FROM cur_timecards
 DELETE FROM timecards WHERE CURRENT OF cur_timecards

_____________________________________________________________________________________________________________________________________________________________________
 OPEN cur_payroll_work CURSOR
 FETCH FROM cur_payroll_work
 FETCH FROM cur_payroll_work INTO @emp_num, @dept, @ot_rate,<a name="1381"></a><a name="IDX-738"></a>
   @time_in, @time_out, @project, @tcard_hourly_rate,
   @tcard_labor_cost, @hrly_payrate, @hours_worked
 UPDATE timecards SET tcard_hourly_rate = @hrly_payrate,
   tcard_labor_cost = @hrly_payrate * @hours_worked
 WHERE CURRENT OF cur_timecards

_____________________________________________________________________________________________________________________________________________________________________
 UPDATE employees SET ot_payrate = 1.5
 WHERE monthly_salary IS NULL

_____________________________________________________________________________________________________________________________________________________________________
UPDATE <table name> SET <column name> = <value>
  [,.,.<last column name> = <last value>]
<i class="emphasis">WHERE CURRENT OF <cursor name></i>

_____________________________________________________________________________________________________________________________________________________________________
 DECLARE cur_payroll_work CURSOR
 FOR SELECT emp_num, dept, ot_rate, time_in, time_out,
   project, tcard_hourly_rate, tcard_labor_cost,
   COALESCE(hourly_rate, (monthly_salary * 12) / 2080)
   hrly_payrate, (CONVERT(REAL(time_out - time_in),8>* 24)
   hours_worked
 FROM timecards WITH (INDEX(tc_emp_ID_date)), employees<a name="1383"></a><a name="IDX-739"></a>
 WHERE timecards.emp_ID = employees.emp_ID
 FOR UPDATE OF tccard_hourly_rate, tcard.labor_cost

_____________________________________________________________________________________________________________________________________________________________________
CREATE [UNIQUE][CLUSTERED |NONCLUSTERED] INDEX <index name>
ON <table name|view name>
(<column name>[< column name>[, . . .<last column name>])

_____________________________________________________________________________________________________________________________________________________________________
CREATE INDEX tc_emp_ID_date
ON timecards (emp_ID, time_in, time_out)

_____________________________________________________________________________________________________________________________________________________________________
 SET NOCOUNT ON
 DECLARE cur_authors CURSOR
 FOR SELECT * FROM pubs.dbo.authors
 -DECLARE temporary variables here

 OPEN cur_authors

 FETCH FROM cur_authors
 WHILE @@FETCH_STATUS = 0
 BEGIN

 -Add statements to process individual rows of the cursor
 -here

 -A FETCH statement without an INTO clause tells the DBMS
 -to display the contents of the cursor row's columns to
 -the screen.
 -If you are processing the rows in a cursor, you will
 -normally FETCH cursor row column values INTO temporary
 -variables vs. just displaying them.<a name="1385"></a><a name="IDX-740"></a>
   FETCH FROM cur_authors
 END

 DEALLOCATE cur_authors
 SET NOCOUNT OFF

_____________________________________________________________________________________________________________________________________________________________________
 DECLARE cur_employees CURSOR
 FOR  SELECT * FROM employees<a name="1387"></a><a name="IDX-741"></a>
 WHERE hrly_rate < 10.00 AND status = 'Active'
 OPEN cur_employees

_____________________________________________________________________________________________________________________________________________________________________
DECLARE cur_employees INSENSITIVE CURSOR
FOR SELECT * FROM employees
WHERE hrly_rate < 10.00 AND status = 'Active'
OPEN cur_employees

_____________________________________________________________________________________________________________________________________________________________________
 CLOSE <cursor name><a name="1389"></a><a name="IDX-742"></a>

_____________________________________________________________________________________________________________________________________________________________________
 OPEN <cursor name>

_____________________________________________________________________________________________________________________________________________________________________
DEALLOCATE <cursor name><a name="1391"></a><a name="IDX-743"></a>

_____________________________________________________________________________________________________________________________________________________________________
 DECLARE <cursor name> CURSOR [GLOBAL I LOCAL]
 [FORWARD_ONLY|SCROLL][STATIC | KEYSET | DYNAMIC | FAST_FORWARD]
 [READ_QNLY|SCROLL_LOCKS|OPTOMISTIC][TYPE_WARNING]
 FOR <SELECT statement>
 [FOR UPDATE[OF <column list>]}]

_____________________________________________________________________________________________________________________________________________________________________
DECLARE <cursor name> [INSENSITIVE] [SCROLL] CURSOR
FOR <SELECT statement>
[FOR {READ ONLY|UPDATE [OF <column list>]}]

_____________________________________________________________________________________________________________________________________________________________________
 EXEC SP_CONFIGURE 'CURSOR THRESHOLD', 500
 RECONFIGURE<a name="1396"></a><a name="IDX-746"></a>

_____________________________________________________________________________________________________________________________________________________________________
 DECLARE cur_authors SCROLL CURSOR
 FOR SELECT * FROM pubs.dbo.authors
 PRINT 'There are ' + CAST(@@CURSOR_ROWS AS VARCHAR(6) +
       ' rows in the cursor.'

_____________________________________________________________________________________________________________________________________________________________________
 SELECT * FROM pubs.dbo.authors

_____________________________________________________________________________________________________________________________________________________________________
There are 23 rows in the cursor.

_____________________________________________________________________________________________________________________________________________________________________
 CREATE TABLE orders
   (cust_ID INTEGER,
    order_date DATETIME,
    shipped_date DATETIME,
    salesperson_ID INTEGER,
    order_total MONEY,
    total_paid MONEY,
    CONSTRAINT order_total_over_100000
      CHECK (order_total <= 100000))

_____________________________________________________________________________________________________________________________________________________________________
 CREATE trigger order_total_over_100000
 ON orders
 FOR INSERT, UPDATE
 AS IF ((SELECT order_total FROM inserted) > 100000)
      BEGIN
        PRINT 'Order rejected. Total order > 100000.'
        ROLLBACK
      END<a name="1402"></a><a name="IDX-748"></a>

_____________________________________________________________________________________________________________________________________________________________________
CREATE PROCEDURE Show_Sales AS
DECLARE @avg_sale  MONEY,       @emp_fname    VARCHAR(20),
        @emp_lname VARCHAR(20), @manager      INT,<a name="1405"></a><a name="IDX-749"></a>
        @max_sale  MONEY        @manager_name VARCHAR(50),
        @office_ID INT,         @total_sales  MONEY

/* cursor used to display the office cursor information,
   arranged in ascending order by total sales */
DECLARE cur_office_sales CURSOR
FOR SELECT office, SUM(order_total) total_sales,
           AVG(order_total) avg_sale
    FROM orders GROUP BY office ORDER BY total_sales DESC
OPEN cur_office_sales

/* work through the office cursor fetching rows until there
   are no more rows to display (@@FETCH_STATUS <> 0) */

FETCH cur_office_sales INTO @office_ID, @total_sales,
      @avg_sale
WHILE @@FETCH_STATUS = 0
BEGIN
  PRINT 'Office ' + CAST(@office_ID AS CHAR(1)) +
    ' Total sales: ' + CAST(@total_sales AS VARCHAR(11)) +
    ' Avg sale: ' + CAST(@avg_sale AS VARCHAR(11))

/* the cursor used to list managers for each office is
   nested, because it uses the value of @office_ID from the
   outer cursor in its SELECT statement */

  DECLARE cur_office_manager CURSOR
  FOR SELECT emp_ID,office, f_name+' 'l_name office_manager
      FROM employees, offices
      WHERE emp_ID = manager AND office = @office_ID
  OPEN cur_office_manager

/* the cursor used to list the top employee for each office
   is also nested, because it too uses the @office_ID value
   from the outer cursor */
  DECLARE cur_office_employees CURSOR
  FOR SELECT f_name, 1 _name, MAX(order_total) max_order,
             AVG(order_total) avg_order
      FROM orders, employees
      WHERE orders.office = @office_ID AND
            salesperson = emp_ID
      GROUP BY f_name, l_name ORDER BY max_order DESC
  OPEN cur_office_employees

/*work through the (embedded) office manager cursor,
  displaying the name and ID of the managers for the
  office in the current row in the (outer) office cursor*/<a name="1406"></a><a name="IDX-750"></a>
  FETCH cur_office_manager INTO @manager, @office_ID,
          @manager_name
  WHILE @@FETCH_STATUS = 0
  BEGIN
    PRINT '  Manager: ' + @manager_name +
          ' (ID: ' + CAST(@manager AS VARCHAR (4)) +')'

/* retrieve and display the "top" employee from the
  (embedded) office employees cursor for the office in the
  current (outer) row of the offices cursor */

    FETCH cur_office_employees INTO @emp_fname, @emp_lname,
          @max_sale, @avg_sale
    PRINT '    Top Salesperson: ' @emp_fname + ' ' +
          @emp_lname + ' Avg sale: ' +
          CAST(@avg_sale AS VARCHAR (11))
    PRINT ' '
    FETCH cur_office_manager INTO @manager, @office_ID,
          @manager_name
  END

  DEALLOCATE cur_office_manager
  DEALLOCATE cur_office_employees

  FETCH cur_office_sales INTO @office_ID, @total_sales,
        @avg_sales
END

DEALLOCATE cur_office_sales
RETURN 0

_____________________________________________________________________________________________________________________________________________________________________
CREATE PROCEDURE add_title @ISBN CHAR(13), @auth_ID TNT,
                           @title VARCHAR(40) AS
DECLARE @result_code TNT<a name="1409"></a><a name="IDX-752"></a>
INSERT INTO titles VALUES (@ISBN, @auth_ID, @title)

SET @result_code = @@ERROR
IF @result_code <> 0
  BEGIN
    IF @result_code = 515
      PRINT 'ERROR!  ISBN, author ID, or title is NULL.'
    ELSE IF @result_code = 547
      PRINT 'ERROR!  Author ID is not in AUTHORS table.'
    ELSE IF @result_code = 2627
      PRINT 'ERROR!  Duplicate ISBN is not allowed.'
    ELSE PRINT 'ERROR! Unable to add new title.'
  END

RETURN @result_code

_____________________________________________________________________________________________________________________________________________________________________
SELECT * FROM master.dbo.sysmessages

_____________________________________________________________________________________________________________________________________________________________________
SELECT * FROM master.dbo.sysmessages
WHERE error = @@ERROR

_____________________________________________________________________________________________________________________________________________________________________
 UPDATE orders
   SET late_fee = (late_fee +
                   ((order_total - amount_paid) * 0.10)),
       date_fee_assessed = GETDATE()
 WHERE CONVERT(CHAR(9),date_due,6) =
         CONVERT(CHAR(9), GETDATE() - 1,6) AND
       (order_total - amount_paid) > 0

_____________________________________________________________________________________________________________________________________________________________________
 CREATE TRIGGER <trigger name>
 ON {<table name>|<view name>}
 [WITH ENCRYPTION]
 {{FOR | AFTER I INSTEAD OF}{[INSERT], [UPDATE], [INSERT]}
  [NOT FOR REPLICATION]
  AS [{IF UPDATE (<column name>)
            [{AND | OR} UPDATE  (...<last column name>)]
      |IF (COLUMNS_UPDATED()
             {<bitwise operator>}<column bitmask>)
                {...<last comparison operator>
                       <last column bitmask>}
     }]
  <SQL statements>
 }

_____________________________________________________________________________________________________________________________________________________________________
IF (COLUMNS)_UPDATED() &amp; 42) > 0

_____________________________________________________________________________________________________________________________________________________________________
IF (COLUMNS)_UPDATED() &amp; 42) = 42

_____________________________________________________________________________________________________________________________________________________________________
 CREATE TRIGGER tri_ins_order ON orders
 AFTER INSERT AS
   SET NOCOUNT ON
   UPDATE offices SET total_sales = total_sales +
                        (SELECT order_total FROM INSERTED)
     WHERE offices.office_ID =
             (SELECT office_ID FROM INSERTED)
   UPDATE employees SET total_sales = total_sales +
                          (SELECT order_total FROM INSERTED)
     WHERE employees.emp_ID =
             (SELECT salesperson FROM INSERTED)

_____________________________________________________________________________________________________________________________________________________________________
CREATE TRIGGER tri_check_delivery_date ON orders
FOR INSERT AS
SET NOCOUNT ON
IF (SELECT expected_del_date FROM INSERTED) <
      (GETDATE() + 3)
BEGIN
  ROLLBACK TRAN
  RAISERROR('You cannot take an order to be delivered less
than three days from now.',16,1)
END

_____________________________________________________________________________________________________________________________________________________________________
CREATE TRIGGER tri_del_order ON orders AFTER DELETE AS
IF @@ROWCOUNT > 1
  BEGIN
    ROLLBACK TRAN
    RAISERROR('Each DELETE statement must remove only a single
order.',16,2)
  END
ELSE BEGIN
  SET NOCOUNT ON
  UPDATE offices SET total_sales = total_sales -
                       (SELECT order_total FROM DELETED)
    WHERE offices.office_ID =
            (SELECT office_ID FROM INSERTED)
  UPDATE employees SET total_sales = total_sales -
                         (SELECT order_total FROM DELETED)
    WHERE employees.emp_ID =
            (SELECT salesperson FROM DELETED)
END

_____________________________________________________________________________________________________________________________________________________________________
 CREATE TRIGGER tri_del_customer ON customers
 INSTEAD OF DELETE AS
 IF @@ROWCOUNT > 1
   BEGIN
     ROLLBACK TRAN
     RAISERROR('You can DELETE only one customer at a time.',16,3)
   END
 ELSE BEGIN
   SET NOCOUNT ON
   DECLARE @timestamp AS TIMESTAMP

 /* Create a cursor and populate it with all of the
    customer's orders */

   DECLARE cur_del_orders CURSOR
   FOR SELECT order_timestamp FROM orders
       WHERE cust_ID = (SELECT cust_ID FROM DELETED)
   OPEN cur_del_orders

 /* Go through the cursor one row at a time, deleting each
    of the customer's orders in turn */

   FETCH NEXT FROM cur_del_orders INTO @timestamp
   WHILE @@FETCH_STATUS = 0
   BEGIN
     DELETE FROM orders WHERE order_timestamp = @timestamp
     FETCH NEXT FROM cur_del_orders
   END

   DEALLOCATE cur_del_orders

 /* Remove the customer record from the CUSTOMERS table */<a name="1423"></a><a name="IDX-760"></a>
   DELETE FROM customers
   WHERE cust_ID = (SELECT cust_ID FROM DELETED)
 END

_____________________________________________________________________________________________________________________________________________________________________
CREATE TRIGGER tri_update_order ON orders AFTER UPDATE AS
DECLARE @rowcount INT
SET @rowcount = @@rowcount

IF UPDATE (order_total) OR UPDATE (office_ID) OR
     UPDATE(salesperson) BEGIN
  IF @@ROWCOUNT > 1
    BEGIN
      ROLLBACK TRAN
      RAISERROR('Each UPDATE must change only one order at a time.',16,2)
    END<a name="1425"></a><a name="IDX-761"></a>
  ELSE BEGIN
    SET NOCOUNT ON
    UPDATE offices SET total_sales = total_sales -
                         (SELECT order_total FROM DELETED)
      WHERE offices.office_ID =
              (SELECT office_ID FROM DELETED)
    UPDATE offices SET total_sales = total_sales +
                         (SELECT order_total FROM INSERTED)
      WHERE offices.office_ID =
              (SELECT office_ID FROM INSERTED)

    UPDATE employees SET total_sales = total_sales -
                          (SELECT order_total FROM DELETED)
      WHERE employees.emp_ID =
              (SELECT salesperson FROM DELETED)
    UPDATE employees SET total_sales = total_sales +
                         (SELECT order_total FROM INSERTED)
      WHERE employees.emp_ID =
              (SELECT salesperson FROM INSERTED)
  END
END

_____________________________________________________________________________________________________________________________________________________________________
UPDATE orders Set salesperson = salesperson
WHERE customer_ID = 1001 AND order_date = '01/06/2001'<a name="1426"></a><a name="IDX-762"></a>

_____________________________________________________________________________________________________________________________________________________________________
 CREATE TRIGGER tri_change_phone_number ON customers
 INSTEAD OF UPDATE AS
 IF @@ROWCOUNT > 1
   BEGIN
     ROLLBACK
     RAISERROR('You must UPDATE customer columns one row at a time.',16,4)
   END
 ELSE BEGIN
   SET NOCOUNT ON
   DECLARE @new_phone_num CHAR(7), @old_phone_num CHAR(7)
   SET @new_phone_num = (SELECT phone_number FROM INSERTED)
   SET @old_phone_num = (SELECT phone_number FROM DELETED)

   IF @new_phone_num <> @old_phone_num
     BEGIN

 /*INSERT duplicate customer record with new phone number*/

       INSERT INTO customers SELECT * FROM INSERTED

 /*Change phone number in child rows*/

       UPDATE payments SET phone_number = @new_phone_num
       WHERE phone_number = @old_phone_num

       UPDATE orders SET phone_number = @new_phone_num
       WHERE phone_number = @old_phone_num<a name="1429"></a><a name="IDX-764"></a>
   /*DELETE original customer record*/

         DELETE FROM customers
         WHERE phone_number = @old_phone_num
       END

   /*If not changing the primary key then update the remaining
     columns in the customers table as normal*/

     ELSE BEGIN
       UPDATE customers SET
         f_name = (SELECT f_name FROM INSERTED),
         l_name  = (SELECT l_name FROM INSERTED)
       WHERE customers.phone_number = @old_phone_num
     END
   END

_____________________________________________________________________________________________________________________________________________________________________
 CREATE TRIGGER tri_cust_del ON customers FOR DELETE AS
 DECLARE @child_count INT
 SET @child_count = 0
 IF ((SELECT COUNT(*) FROM payments, DELETED
      WHERE payments.cust_ID = DELETED.cust_ID) > 0)
   BEGIN
     PRINT 'You must DELETE the customer''s payments from
 the PAYMENTS table before deleting the customer.'

     SET @child_count = 1
   END

 IF ((SELECT COUNT(*) FROM orders, DELETED
      WHERE orders.cust_ID = DELETED.cust<u class="underline">_</u>ID) > 0)
   BEGIN
     PRINT 'You must DELETE the customer''s orders from the
 ORDERS table before deleting the customer.'
     SET @child_count = 1<a name="1432"></a><a name="IDX-766"></a>
   END

 IF @child_count > 0
   BEGIN
     ROLLBACK

     RAISERROR('The DELETE statement has been terminated
 without deleting any rows.',16,547)
   END

_____________________________________________________________________________________________________________________________________________________________________
 CREATE TRIGGER tri_order_ins_updt ON payments
 FOR INSERT, UPDATE AS
 IF ((SELECT COUNT(*) FROM customers, INSERTED
      WHERE customers.cust_ID = INSERTED.cust_ID) = 0)
   BEGIN
     ROLLBACK

     PRINT 'The customer ID (CUST_ID) is invalid.'
     PRINT 'The CUST_ID in a payment record must match one
 of the CUST_ID values in the CUSTOMERS table.'

     RAISERROR('The statement has been terminated.',16,547).
   END

_____________________________________________________________________________________________________________________________________________________________________
 Server: Msg 547, Level 16, State 1, Line 1
 DELETE statement conflicted with COLUMN REFERENCE
   constraint fk_pay_cust. The conflict occurred in database
   'SQLTips', table 'payments', column 'cust_ID'.
 The statement has been terminated

_____________________________________________________________________________________________________________________________________________________________________
 CREATE TRIGGER tri_email_re_new_item ON products
 FOR INSERT AS
 DECLARE @product_code  VARCHAR(10),
         @description   VARCHAR(30),
         @email_message VARCHAR(75)
 SET NOCOUNT ON

 /* Get the product code and description of the new product
    from the row being inserted into the PRODUCTS table */

 SELECT @product_code = INSERTED.product_code,
        @description = INSERTED.description
 FROM INSERTED

 /* Form the e-mail message to send */

 SELECT @email_message = 'PRODUCT CODE: (' + @product_code +
         ')  DESCRIPTION: ' + @description

 /* Formulate and send the e-mail message */<a name="1434"></a><a name="IDX-767"></a>
 EXEC master.dbo.xp_sendmail
       @recipients = 'SalesManager, Salespeople',
       @message = @email_message,
       @subject = 'NEW PRODUCT Availability Alert'

_____________________________________________________________________________________________________________________________________________________________________
 CREATE TRIGGER tri_archive_del_cust ON customers FOR DELETE
 AS INSERT archive customers SELECT * FROM DELETED

_____________________________________________________________________________________________________________________________________________________________________
CREATE TRIGGER tri_del_customer ON customers
INSTEAD OF DELETE AS
IF @@ROWCOUNT > 1 BEGIN
    ROLLBACK TRAN
    RAISERROR('You can DELETE only one customer at a time.',16,3)
  END
ELSE BEGIN

/*                 .
   Statements which remove PAYMENTS and ORDERS table
   rows go here- see Tip 454 for details --
                   .
/* Remove the customer record from the CUSTOMERS table */

  DELETE FROM customers
  WHERE cust_ID = (SELECT cust_ID FROM DELETED)
END<a name="1436"></a><a name="IDX-768"></a>

_____________________________________________________________________________________________________________________________________________________________________
 SP_HELPTEXT <object name>

_____________________________________________________________________________________________________________________________________________________________________
SP_HELPTEXT TRI_DEL_CUSTOMER<a name="1438"></a><a name="IDX-769"></a>

_____________________________________________________________________________________________________________________________________________________________________
 DROP TRIGGER <trigger name>[...,<last trigger name>]

_____________________________________________________________________________________________________________________________________________________________________
 DROP TRIGGER tri_archive_del_cust, tri_archive_del_order

_____________________________________________________________________________________________________________________________________________________________________
 SP_HELPTRIGGER <table name>

_____________________________________________________________________________________________________________________________________________________________________
 SP_HELPTRIGGER customers

_____________________________________________________________________________________________________________________________________________________________________
 ALTER VIEW [<database name>.][<view owner>.]<view name>
   [(<column name>[...,<last column name>])]
 [WITH ENCRYPTION | SCHEMABINDING | VIEW_METADATA)
 AS <SELECT statement>
 [WITH CHECK OPTION]

_____________________________________________________________________________________________________________________________________________________________________
 ALTER VIEW vw_student_name_list
   (student_ID, first_name, last_name, major)
 AS SELECT SID, first_name, last_name, major FROM students

_____________________________________________________________________________________________________________________________________________________________________
 CREATE VIEW vw_student_name_list
   (student_ID, first_name, last_name)
 AS SELECT SID, first_name, last_name FROM students<a name="1444"></a><a name="IDX-772"></a>

_____________________________________________________________________________________________________________________________________________________________________
 ALTER TABLE customers ALTER COLUMN phone_number NUMERIC

_____________________________________________________________________________________________________________________________________________________________________
ALTER TABLE <table name>
  ALTER COLUMN <new data type>[(precision[,scale])]<a name="1446"></a><a name="IDX-773"></a>

_____________________________________________________________________________________________________________________________________________________________________
 SELECT notes FROM EMPLOYEES

_____________________________________________________________________________________________________________________________________________________________________
 CREATE TABLE customers
   (cust_ID INTEGER,
    f_name  VARCHAR(15),
    l_name  VARCHAR(20),
    notes   TEXT,
    remarks TEXT,
    photo   IMAGE)

_____________________________________________________________________________________________________________________________________________________________________
 INSERT INTO customers VALUES (1, 'Konrad', 'King','
   'Notes on the customer', 'No Photo as yet', '010')

_____________________________________________________________________________________________________________________________________________________________________
 UPDATE customers SET remarks = 'The PHOTO column has no
 photo. It has only example data used to show the binary
 conversion of character string data placed into an IMAGE
 column.

 WHERE cust_ID = 1

_____________________________________________________________________________________________________________________________________________________________________
photo
-----------------------------
0x303130<a name="1455"></a><a name="IDX-778"></a>

_____________________________________________________________________________________________________________________________________________________________________
SELECT photo FROM customers

_____________________________________________________________________________________________________________________________________________________________________
 WRITETEXT <table.column> <text pointer> <data>

_____________________________________________________________________________________________________________________________________________________________________
UPDATE customers SET remarks = '' WHERE cust_ID = 1

DECLARE @text_pointer BINARY(16)

SELECT @text_pointer = TEXTPTR(remarks)
FROM customers WHERE cust_ID = 1

WRITETEXT customers.remarks @text_pointer
  'These are the remarks to write into the REMARKS column'

_____________________________________________________________________________________________________________________________________________________________________
DECLARE @dest_text_pointer BINARY(16)
SELECT @dest_text_pointer = TEXTPTR(remarks)
FROM customers WHERE cust_ID = 1

IF @dest_text_pointer IS NULL
  BEGIN
    UPDATE customers SET remarks = '' WHERE cust_ID = 1
    SELECT @dest_text_pointer = TEXTPTR(remarks)
    FROM customers WHERE cust_ID = 1
  END

IF @dest_text_pointer IS NOT NULL
  UPDATETEXT customers.remarks @dest_text_pointer 0 0
    '  This is an additional remark.'

_____________________________________________________________________________________________________________________________________________________________________
UPDATETEXT <target table.column> <target text pointer>
  {NULL|<insert offset>} {NULL | <data length>}
  {<data> | {<source table.column> <source text pointer>}}

_____________________________________________________________________________________________________________________________________________________________________
 DECLARE @text_pointer BINARY(16)

 SELECT @text_pointer = TEXTPTR(remarks)<a name="1462"></a><a name="IDX-782"></a>
 FROM customers WHERE cust_ID = 1

 IF @text_pointer IS NOT NULL
   READTEXT customers.remarks @text_pointer 14 21

_____________________________________________________________________________________________________________________________________________________________________
 READTEXT <table.column> <text pointer> <offset> <size>
   [HOLDLOCK]

_____________________________________________________________________________________________________________________________________________________________________
 EXTVALID('<table.column>',<text pointer>) where:

_____________________________________________________________________________________________________________________________________________________________________
 UPDATE customers SET remarks = ''
 WHERE TEXTVALID('customers.remarks', TEXTPTR(remarks)} <> 1

_____________________________________________________________________________________________________________________________________________________________________
 PATINDEX('<pattern>',<expression>)

_____________________________________________________________________________________________________________________________________________________________________
 SELECT cust_ID, f_name + ' ' + l_name 'Customer Name',
   complaints
 FROM customers WHERE PATINDEX('%chicken%', complaints) >= 1

_____________________________________________________________________________________________________________________________________________________________________
 SELECT cust_ID, f_name + ' ' + l_name 'Customer Name',
   complaints
 FROM customers WHERE PATINDEX('%chicken', complaints) >= 1

_____________________________________________________________________________________________________________________________________________________________________
 SELECT cust_ID, f_name + ' ' + l_name 'Customer Name',
   complaints
 FROM customers WHERE PATINDEX('chicken%', complaints) >= 1<a name="1466"></a><a name="IDX-784"></a>

_____________________________________________________________________________________________________________________________________________________________________
 DATALENGTH(<expression>)

_____________________________________________________________________________________________________________________________________________________________________
 USE pubs
 SET TEXTSIZE 45
 SELECT DATALENGTH(logo) 'Logo Size',
   DATALENGTH(pr_info) 'PR Info Size',
   pr_info 'Public Relations Info Text' FROM pub_info

_____________________________________________________________________________________________________________________________________________________________________
 PRINT @@TEXTSIZE

_____________________________________________________________________________________________________________________________________________________________________
SET TEXTSIZE 20<a name="1471"></a><a name="IDX-786"></a>

_____________________________________________________________________________________________________________________________________________________________________
 SELECT * FROM INFORMATION_SCHEMA.CHECK_CONSTRAINTS

_____________________________________________________________________________________________________________________________________________________________________
 SELECT db_name()                 'Database/Catalog',
        user_name(sysobjects.UID) 'Constraint Owner',
        sysobjects.name           'Constraint Name',
        syscomments.text          'Constraint Text'
 FROM sysobjects, syscomments
 WHERE sysobjects.ID = syscomments.ID
   AND sysobjects.xtype = 'C'

_____________________________________________________________________________________________________________________________________________________________________
 SELECT * FROM INFORMATION_SCHEMA.COLUMN_DOMAIN_USAGE

_____________________________________________________________________________________________________________________________________________________________________
 SELECT db_name()                 'Domain Database/Catalog',
        user_name(systypes.UID)   'Domain Owner',
        systypes.name             'Domain Name',
        db_name()                 'Table Database/Catalog'
        user_name(sysobjects.UID) 'Table Owner',
        sysobjects.name           'Table Name',
        syscolumns.name           'Column Name'
 FROM sysobjects, syscolumns, systypes
 WHERE sysobjects.ID = syscolumns.ID
   AND syscolumns.xusertype = systypes.xusertype
   AND systypes.xusertype > 256

_____________________________________________________________________________________________________________________________________________________________________
 SELECT * FROM INFORMATTON_SCHEMA.COLUMN_PRIVILEGES

_____________________________________________________________________________________________________________________________________________________________________
 SELECT * FROM INFORMATION_SCHEMA.COLUMNS<a name="1485"></a><a name="IDX-791"></a>

_____________________________________________________________________________________________________________________________________________________________________
   SELECT iskcu.table_catalog        'Table Database',
          iskcu.table_schema         'Table Owner ID',
          iskcu.table_name           'Table Name',
          iskcu.column_name          'Column Name',
          iskcu.constraint_catalog   'Constraint Database',
          iskcu.constraint_schema    'Constraint Owner  ID',<a name="1491"></a><a name="IDX-794"></a>
          iskcu.constraint_name      'Constraint Name'
   FROM information_schema.key_column_usage iskcu
 UNION
   SELECT db_name(),
          user_name(tableobj.UID),
          tableobj.name,
          syscolumns.name,
          db_name(),
          user_name(constraintobj.UID),
          constraintobj.name
   FROM sysobjects tableobj, sysobjects constraintobj,
        syscolumns
   WHERE tableobj.ID         = constraintobj.parent_obj
     AND constraintobj.xtype = 'C'
     AND constraintobj.info  = syscolumns.colid
     AND syscolumns.ID       = constraintobj.parent_obj
 UNION
   SELECT db_name(),
          user_name(tableobj.UID),
          tableobj.name,
          syscolumns.name,
          db_name(),
          user_name(constraintobj.UID),
          constraintobj.name
   FROM sysobjects tableobj, sysobjects constraintobj,
        syscolumns, systypes
   WHERE tableobj.ID          = syscolumns.ID
     AND syscolumns.xusertype = systypes.xusertype
     AND systypes.xusertype   > 256
     AND systypes.domain      = constraintobj.ID
     AND constraintobj.xtype  = 'R'

_____________________________________________________________________________________________________________________________________________________________________
 SELECT * FROM INFORMATION_SCHEMA.CONSTRAINT_COLUMN_USAGE

_____________________________________________________________________________________________________________________________________________________________________
 SELECT * FROM INFORMATION_SCHEMA.CONSTRAINT_TABLE_USAGE

_____________________________________________________________________________________________________________________________________________________________________
 SELECT db_name()                    'Table Database',
        user_name(tableobj.UID)      'Table Owner',
        tableobj.name                'Table Name',
        db_name()                    'Constraint Database',
        user_name(constraintobj.UID) 'Constraint Owner",
        constraintobj.name           'Constraint Name'
 FROM sysobjects tableobj, sysobjects constraintobj
 WHERE tableobj.ID         =  constraintobj.parent_obj
   AND constraintobj.xtype IN ('C','UQ','PK','F')

_____________________________________________________________________________________________________________________________________________________________________
 SELECT * FROM INFORMATION_SCHEMA.DOMAIN_CONSTRAINTS<a name="1496"></a><a name="IDX-796"></a>

_____________________________________________________________________________________________________________________________________________________________________
 SELECT db_name()                  'Rule Database/Catalog',
        user_name(sysobjects.UID)  'Rule Owner',
        sysobjects.name            'Rule Name',
        db_name()                  'User Data Type Database',
        user_name(systypes.UID)    'User Data Type Owner',
        systypes.name              'User Data Type Name',
        'NO'                       'Is Deferrable',
        'NO'                       'Initially Deferred'
 FROM sysobjects, systypes
 WHERE sysobjects.xtype   = 'R'
   AND sysobjects.ID      = systypes.domain
   AND systypes.xusertype > 256

_____________________________________________________________________________________________________________________________________________________________________
 SELECT * FROM INFORMATION_SCHEMA.DOMAINS

_____________________________________________________________________________________________________________________________________________________________________
 SELECT * FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE

_____________________________________________________________________________________________________________________________________________________________________
 SELECT * FROM INFORMATION_SCHEMA.PARAMETERS

_____________________________________________________________________________________________________________________________________________________________________
 SELECT * FROM INFORMATION_SCHEMA.REFERENTIAL_CONSTRAINTS

_____________________________________________________________________________________________________________________________________________________________________
 SELECT db_name()                    'FOREIGN KEY Database',
        user_name(foreignkey_obj.UID)'FOREIGN KEY Owner',
        foreign_obj.name             'FOREIGN KEY Table',
        db_name()                    'PRIMARY KEY Database',
        user_name(primarykey_obj.UID)'PRIMARY KEY Owner',
        sysindexes.name              'FK INDEX Name',
        'NONE'                       'Match',
        CASE WHEN (OBJECTPROPERTY
          (sysreferences.constid,'CnstIsUpdateCascade')=1)
        THEN 'CASCADE'
        ELSE 'NO ACTION' END         'UPDATE Rule',
        CASE WHEN (OBJECTPROPERTY
          (sysreferences.constid,'CnstIsDeleteCascade')=1)
          THEN 'CASCADE'
        ELSE 'NO ACTION' END         'DELETE Rule'
 FROM sysobjects foreignkey_obj, sysreferences, sysindexes,
      sysobjects primarykey_obj
 WHERE foreignkey_obj.xtype    = 'F'
   AND sysreferences.constID   = foreignkey_obj.ID
   AND sysreferences.rkeyID    = sysindexes.ID
   AND sysreferences.rkeyindID = sysindexes.indID
   AND sysreferences.rkeyID    = primarykey_obj.ID

_____________________________________________________________________________________________________________________________________________________________________
 SELECT * FROM INFORMATION_SCHEMA.ROUTINES

_____________________________________________________________________________________________________________________________________________________________________
 SELECT * FROM INFORMATION_SCHEMA.SCHEMATA<a name="1520"></a><a name="IDX-808"></a>

_____________________________________________________________________________________________________________________________________________________________________
 SELECT * FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS

_____________________________________________________________________________________________________________________________________________________________________
SELECT db_name()                    'Constraint Database',
       user_name(constraintobj.UID) 'Constraint Owner',
       constraintobj.name           'Constraint Name',
       db_name()                    'Table Database',
       user_name(tableobj.UID)      'Table Owner',
       tableobj.name                'Table Name',
       CASE constraintobj.xtype
         WHEN 'C'  THEN 'CHECK'
         WHEN 'UQ' THEN 'UNIQUE'
         WHEN 'PK' THEN 'PRIMARY KEY'
         WHEN 'F'  THEN 'FOREIGN KEY'
       END                          'Constraint Type',
       'NO'                         'Is Deferrable',
       'NO'                         'Initially Deferred'
FROM sysobjects constraintobj, sysobjects tableobj
WHERE tableobj.ID = constraintobj.parent_obj
  AND constraintobj.xtype IN ('C','UQ','PK','F')

_____________________________________________________________________________________________________________________________________________________________________
 SELECT * FROM INFORMATION_SCHEMA.TABLE_PRIVILEGES

_____________________________________________________________________________________________________________________________________________________________________
 SELECT * FROM INFORMATION_SCHEMA.TABLES

_____________________________________________________________________________________________________________________________________________________________________
 SELECT db_name()                 'Database/Catalog Name',
        user_name(sysobjects.UID) 'Table Owner',
        sysobjects.name           'Table Name',
        CASE sysobjects.xtype
          WHEN 'U' THEN 'BASE TABLE'
          WHEN 'V' THEN 'VIEW'
        END                       'Table Type'
 FROM sysobjects
 WHERE sysobjects,xtype IN ('U','V')

_____________________________________________________________________________________________________________________________________________________________________
 SELECT * FROM INFORMATION_SCHEMA.VIEW_COLUMN_USAGE

_____________________________________________________________________________________________________________________________________________________________________
SELECT db_name()               'View Database/Catalog',
       user_name(viewobj.UID)  'View Owner',
       viewobj.name            'View Name',
       db_name()               'Table Database/Catalog',
       user_name(tableobj.UID) 'Table Owner',
       tableobj.name           'Table Name',
       syscolumns.name         'Column Name'
FROM sysobjects viewobj, sysobjects tableobj, sysdepends,
     syscolumns
WHERE viewobj.xtype        = 'V'
  AND sysdepends.ID        = viewobj.ID
  AND sysdepends.depID     = tableobj.ID
  AND tableobj.ID          = syscolumns.ID
  AND sysdepends.depnumber = syscolumns.colID

_____________________________________________________________________________________________________________________________________________________________________
 SELECT * FROM INFORMATION_SCHEMA.VIEW_TABLE_USAGE

_____________________________________________________________________________________________________________________________________________________________________
 SELECT db_name()               'View Database/Catalog',
        user_name(viewobj.UID)  'View Owner',
        viewobj.name            'View Name',
        db_name()               'Table Database/Catalog',
        user_name(tableobj.UID) 'Table Owner',
        tableobj.name           'Table Name'
 FROM sysobjects viewobj, sysobjects tableobj, sysdepends
 WHERE viewobj.xtype    = 'V'
   AND sysdepends.ID    = viewobj.ID
   AND sysdepends.depID = tableobj.ID

_____________________________________________________________________________________________________________________________________________________________________
 SELECT * FROM INFORMATION_SCHEMA.ROUTINE_COLUMNS

_____________________________________________________________________________________________________________________________________________________________________
 SELECT * FROM INFORMATION_SCHEMA.VIEWS

_____________________________________________________________________________________________________________________________________________________________________
SELECT db_name()                 'Database/Catalog Name',
       user_name(sysobjects.UID) 'View Owner',
       sysobjects.name           'View Name',
       CASE WHEN EXISTS
                   (SELECT * FROM syscomments
                    WHERE syscomments.ID = sysobjects.ID
                      AND syscomments.colID > 1) THEN
         CONVERT(NVARCHAR(4000),NULL)
       ELSE syscomments.text
       END                        'View Definition',
       CASE WHEN EXISTS
                 (SELECT * FROM syscomments
                  WHERE syscomments.ID = sysobjects.ID
                    AND CHARINDEX('WITH CHECK OPTION',
                          UPPER(syscomments.text)) > 0 THEN
         'CASCADE'
       ELSE 'NONE'
       END                        'Check Option',
       'NO'                       'Is Updateable'
FROM sysobjects, syscomments
WHERE sysobjects.xtype = 'V'
  AND sysobjects.ID = syscomments.ID
  AND syscomments.colID = 1

_____________________________________________________________________________________________________________________________________________________________________
 CREATE DATABASE SQLTips
 ON     (NAME       = SQLTips_data,
         FILENAME   = 'c:\mssql7\data\SQLTips_data.mdf',
         SIZE       = 10, FILEGROWTH = 1MB)
 LOG ON (NAME = 'SQLTips_log',<a name="1555"></a><a name="IDX-822"></a>
         FILENAME = 'c:\mssql7\data\SQLTips_log.ldf',
         SIZE = 3, FILEGROWTH = 1MB)

_____________________________________________________________________________________________________________________________________________________________________
CREATE DATABASE company_db
ON PRIMARY (NAME       = company_data,
            FILENAME   = 'c:\mssql\data\co_data.mdf',
            SIZE       = 10, FILEGROWTH = 1MB),
FILEGROUP marketing (NAME   = marketing data,
                   FILENAME = 'c:\mssql\data\mkt_data.mdf,
                   SIZE     = 10, FILEGROWTH = 1MB),
FILEGROUP office (NAME     = office_data,
                  FILENAME = 'd:\mssql\data\ofce_data.mdf',
                  SIZE     = 10, FILEGROWTH = 1MB)
LOG ON (NAME     = 'co_db_log',
        FILENAME = 'c:\mssgl\data\db_log.ldf',
        SIZE     = 3, FILEGROWTH = 1MB)

_____________________________________________________________________________________________________________________________________________________________________
CREATE TABLE call_history
(call_time   DATETIME,
 hangup_time DATETIME,
 called_by   VARCHAR(3),
 disposition VARCHAR(4)) ON marketing

_____________________________________________________________________________________________________________________________________________________________________
CREATE TABLE orders
(customer_ID  INTEGER,
 order_date   DATETIME,
 order_total  MONEY,
 date_shipped DATETIME) ON office

_____________________________________________________________________________________________________________________________________________________________________
 ALTER DATABASE company_db
   ADD FILE (NAME     = marketing_data2,
             FILENAME = 'e:\mssql\data\mkt_data.mdf',
             SIZE     = 10, FILEGROWTH = 1MB)
     TO FILEGROUP marketing
 ALTER DATABASE company_db ADD FILEGROUP multimedia
 ALTER DATABASE company_db
   ADD FILE (NAME     = blobs,
             FILENAME = 'i:\mssql\data\blob_data.mdf',
             SIZE     = 100, FILEGROWTH = 25MB)
     TO FILEGROUP multimedia

_____________________________________________________________________________________________________________________________________________________________________
 ALTER DATABASE SQLTips
   ADD FILE (NAME     = SQLTips_data2,
             FILENAME = 'd:\mssql\data\SQLTips_data2.mdf',
             SIZE     = 30, FILEGROWTH = 5MB)
 ALTER DATABASE SQLTips
   ADD LOG FILE (NAME    = 'SQLTips_log2',
                FILENAME = 'd:\mssql\data\SQLTips_log2.ldf',
                SIZE     = 3, FILEGROWTH = 1MB)

_____________________________________________________________________________________________________________________________________________________________________
 SELECT c.f_name, c.l_name, c.salesperson, e.f_name, e.l_name
 FROM office.customers c, linda.employees e
 WHERE c.salesperson = e.emp_ID<a name="1566"></a><a name="IDX-828"></a>

_____________________________________________________________________________________________________________________________________________________________________
SELECT c.f_name, c.l_name, c.salesperson, e.f_name, e.l_name
FROM office.office.customers c, hr.linda.employees e
WHERE c.salesperson = e.emp_ID

_____________________________________________________________________________________________________________________________________________________________________
 CREATE VIEW vw_productivity (ID, Phone_Rep_Name,
     Appointments, Sales, Sales_Volume, Deliveries,
     Total_Revenue) AS
 SELECT emp_ID, f_name + ' ' + l_name,
   (SELECT COUNT(*) FROM appointments
    WHERE phone_rep = emp_ID),
   (SELECT COUNT(*) FROM appointments
    WHERE phone_rep = emp_ID AND disposition = 'Sold')
   COALESCE((SELECT SUM(order_total)
    FROM appointments WHERE phone_rep = emp_ID),0),
   (SELECT COUNT(*)
    FROM customers WHERE phone_rep = emp_ID),
   COALESCE((SELECT SUM(contract_total)
    FROM customers WHERE phone_rep = emp_ID),0)
 FROM employees
 WHERE department = 'Marketing' AND status = 'A'

_____________________________________________________________________________________________________________________________________________________________________
SELECT * FROM vw_productivity ORDER BY total_revenue DESC

_____________________________________________________________________________________________________________________________________________________________________
 ALTER TABLE customers DROP COLUMN contract_total

_____________________________________________________________________________________________________________________________________________________________________
CREATE VIEW vw_sales (ID, Phone_Rep_Name, Appointments,
    Sales, Sales_Volume) WITH SCHEMABINDING AS
SELECT emp_ID, f_name + ' ' + l_name,
  (SELECT COUNT(*) FROM frank.appointments
   WHERE phone_rep = emp_ID),
  (SELECT COUNT(*) FROM frank.appointments
   WHERE phone_rep = emp_ID AND disposition = 'Sold')
  COALESCE((SELECT SUM(order_total)
    FROM frank.appointments WHERE phone_rep = emp_ID),0)
FROM linda.employees
WHERE department = 'Marketing' AND status = 'A'

_____________________________________________________________________________________________________________________________________________________________________
Server: Msg 207, Level 16, State 3, Procedure Productivity,
  Line 4.
Invalid column name 'contract total'.
Server: Msg 4413, Level 16, State 1, Linel
Could not use view or function 'vw_productivity' because of
  binding errors.

_____________________________________________________________________________________________________________________________________________________________________
 CREATE SCHEMA AUTHORIZATION frank
   CREATE VIEW vw_offices AS
     SELECT offices.office_ID, manager_ID,
            f_name + l_name manager_name
     FROM offices, employees
     WHERE manager_ID = emp_ID

   CREATE TABLE employees
   (emp_ID      INTEGER,
    f_name      VARCHAR(15),
    l_name      VARCHAR(15),
    total_sales MONEY,
    office_ID   SMALLINT)

   CREATE TABLE offices
   (office_ID      SMALLINT,
    street_address VARCHAR(30),
    manager_ID     INTEGER)

   GRANT SELECT ON vw_offices        TO PUBLIC
   GRANT ALL PRIVILEGES ON offices   TO sally
   GRANT ALL PRIVILEGES ON employees TO sally

_____________________________________________________________________________________________________________________________________________________________________
CREATE SCHEMA AUTHORIZATION <account ID>
[<table definition(s)>|<view definition(s)>|
 <grant  statement(s)>]

_____________________________________________________________________________________________________________________________________________________________________
  sqlservr -<master database>
<drive>:\<directory>\master.mdf

_____________________________________________________________________________________________________________________________________________________________________
DELETE [FROM] <table name> WITH (<optimizer hints>) ...
          or
DELETE [FROM] <table name>
       [<WHERE clause>] OPTION (<optimizer hints>)

INSERT [INTO] <table name> WITH (<optimizer hints>) ...

SELECT <query expression> [<ORDER BY clause>]
       [<COMPUTE clause>] [<FOR clause>]
       OPTION (<optimizer hints>)

UPDATE <table name> WITH (<optimizer hints>) ...
          or
UPDATE <table name> [<FROM clause>]
       OPTION (<optimizer hints>)

_____________________________________________________________________________________________________________________________________________________________________
 SELECT a.au_lname, a.au_fname, t.title, t.ytd_sales
 FROM authors a, titles t, titleauthor ta
 WHERE a.au_id = t.au_ID AND t.title_ID = ta.title_ID

_____________________________________________________________________________________________________________________________________________________________________
 SET SHOWPLAN_TEXT OFF

_____________________________________________________________________________________________________________________________________________________________________
 SET SHOWPLAN_TEXT OFF

_____________________________________________________________________________________________________________________________________________________________________
 SET SHOWPLAN_TEXT ON

_____________________________________________________________________________________________________________________________________________________________________
 SET SHOWPLAN_TEXT ON

_____________________________________________________________________________________________________________________________________________________________________
 SET  SHOWPLAN_TEXT OFF

_____________________________________________________________________________________________________________________________________________________________________
 SETUSER <username> [WITH NORESET]

_____________________________________________________________________________________________________________________________________________________________________
 SETUSER MARY NORESET<a name="1717"></a><a name="IDX-901"></a>

_____________________________________________________________________________________________________________________________________________________________________
 SETUSER MARY

_____________________________________________________________________________________________________________________________________________________________________
CREATE RULE valid_empnum
AS @employee_number BETWEEN 1000 AND 1999

_____________________________________________________________________________________________________________________________________________________________________
 CREATE PROCEDURE usp_show_all_employees
 AS SELECT * FROM employees

_____________________________________________________________________________________________________________________________________________________________________
CREATE PROCEDURE <procedure name> [; <version number>]
  [{@<parameter name> <data type> [VARYING]
   [=<default value>][OUTPUT]
   [...,n]}]
  [WITH {RECOMPILE|ENCRYPTION|RECOMPILE,ENCRYPTION}]
  [FOR REPLICATION]
AS <Transact-SQL statement(s)><a name="1725"></a><a name="IDX-905"></a>

_____________________________________________________________________________________________________________________________________________________________________
GRANT CREATE PROCEDURE <username>

_____________________________________________________________________________________________________________________________________________________________________
 CREATE PROCEDURE usp_add_employee @first_name VARCHAR(30),
                                   @last_name  VARCHAR(30),
                                   @address    VARCHAR(30),
                                   @office     INTEGER = 1,
                                   @manager    INTEGER = 1
 AS INSERT INTO employees
      (first_name, last_name, address, office, manager)
    VALUES
      (@first_name, @last_name, @address, @office, @manager)

_____________________________________________________________________________________________________________________________________________________________________
 EXEC frank.usp_show_all_employees

_____________________________________________________________________________________________________________________________________________________________________
 EXEC usp_add_employee 'Wally', 'Wallberg',
       '777 Sunset Strip', 5

_____________________________________________________________________________________________________________________________________________________________________
 EXEC usp_show_all_employees

_____________________________________________________________________________________________________________________________________________________________________
 EXECUTE usp_show_all_employees

_____________________________________________________________________________________________________________________________________________________________________
EXEC usp_add_employee @office = 5,
       @address = '777 Sunset Strip',
       @first_name = 'Wally', @last_name = 'Wallberg'

_____________________________________________________________________________________________________________________________________________________________________
 CREATE PROCEDURE usp_compare_author_sales @author_ID ID
 AS
 /*** DECLARE local variables ***/
   DECLARE @auth_count     INTEGER,
           @tot_sales      MONEY,
           @auth_tot_sales MONEY

 /*** Count the number of authors ***/
   SELECT @auth_count = COUNT(*) FROM authors

 /*** Compute the total sales YTD for all authors ***/
   SELECT @tot_sales = SUM(ytd_sales) FROM titles
                       WHERE ytd_sales IS NOT NULL

 /*** Compute the total sales YTD for a specific author ***/
   SELECT @auth_tot_sales = SUM(ytd_sales)
                           FROM  titles t, titleauthor ta
                           WHERE t.title_ID = ta.title_ID
                           AND   au_ID =      @author_ID
 /*** Display the results ***/
   SELECT @auth_count 'authors',
          @tot_sales / @auth_count 'avg YTD sales / author',
          au_ID, @auth_tot_sales 'Total Sales',
          (au_lname + ', ' + au_fname) 'Name'
   FROM authors WHERE au_ID = @author_ID

_____________________________________________________________________________________________________________________________________________________________________
 DECLARE @<variable name> <data type>
         [   , @<last variable name> <last data type>]

_____________________________________________________________________________________________________________________________________________________________________
 CREATE PROCEDURE usp_process_check
                    @account_number   INTEGER,
                    @check_number     INTEGER,
                    @check_amount     REAL,
                    @checking_balance REAL OUTPUT,
                    @loc_used         REAL OUTPUT,
                    @loc_balance      REAL OUTPUT
 AS
   SET @loc_used = 0

 /* Retrieve current account balances */

   SELECT @checking_balance =
     (SELECT checking_balance FROM customers
      WHERE account_number = @account_number)

   SELECT @loc_balance =
     (SELECT loc_balance FROM customers
      WHERE account_number = @account_number)

 /* If check amount would overdraw the checking balance,
    tap the line of credit */<a name="1734"></a><a name="IDX-911"></a>
   IF @checking_balance < @check_amount
     SET @loc_used = (@check_amount - @checking_balance)

 /* Store the check within the CHECKS table and update the
    customer's balance(s) */

   SET @loc_balance = @loc_balance + @loc_used
   SET @checking_balance =
         @checking_balance - @check_amount + @loc_used

   INSERT INTO checks
     VALUES (@account_number, @check_number, @check_amount)

   UPDATE customers
      SET loc_balance = @loc_balance,
          checking_balance = @checking_balance
    WHERE account_number = @account_number

_____________________________________________________________________________________________________________________________________________________________________
 EXEC usp_process_check 112233, 123, 258.59,
        @checking_balance OUTPUT, @loc_balance OUTPUT,
        @loc_used OUTPUT

_____________________________________________________________________________________________________________________________________________________________________
CREATE PROCEDURE usp_process_check @account_number INTEGER,
                                   @check_number   INTEGER,
                                   @check_amount   REAL
AS
  INSERT INTO checks (@account_number, @check_number,
                      @check_amount)

_____________________________________________________________________________________________________________________________________________________________________
EXEC usp_process_check 112233, 123, 258.59

_____________________________________________________________________________________________________________________________________________________________________
 CREATE FUNCTION [owner_name.]<function name>
   ([{@<parameter name> [AS]
      <data type>[=<default value>]}[...,n]])
 RETURNS <scalar data type>
 [AS]
 BEGIN
   <Transact-SQL statement(s)>
   RETURN <scalar expression>
 END

_____________________________________________________________________________________________________________________________________________________________________
 SELECT  *   FROM ufn_cust_trns(123456)

_____________________________________________________________________________________________________________________________________________________________________
CREATE FUNCTION ufn_cust_trans(@cust_ID INTEGER)
RETURNS @trans_list TABLE
  (trans_date   DATETIME,
   trans_ID     INTEGER,
   trans_type   CHAR(1),
   trans_amount REAL)
BEGIN
  INSERT @trans_list
    SELECT deposit_date, deposit_ID, 'D', deposit_amount
      FROM deposits
     WHERE deposits.cust_ID = @cust_ID
     ORDER BY deposit_date

  INSERT @trans_list
    SELECT check_date, check_number, 'C', check_amount
      FROM checks
     WHERE checks.cust_ID = @cust_ID
     ORDER BY check_date

  RETURN
END

_____________________________________________________________________________________________________________________________________________________________________
CREATE FUNCTION ufn_get_total_sales(@salesrep_ID INTEGER)
RETURNS REAL
BEGIN
  RETURN (SELECT  SUM(order_total)
          FROM cust_orders
          WHERE cust_orders.salesrep_ID = @salesrep_ID)
END

_____________________________________________________________________________________________________________________________________________________________________
PRINT ufn_get_total_sales(1)

_____________________________________________________________________________________________________________________________________________________________________
SELECT first_name, last_name,
       dbo.ufn_get_total_sales(salesrep_ID)
FROM employees
WHERE dbo.ufn_get_total_sales(salesrep_ID) > 100000.0<a name="1738"></a><a name="IDX-914"></a>

_____________________________________________________________________________________________________________________________________________________________________
SELECT trans_type, COUNT(*), SUM(trans_amount)
FROM ufn_cust_trans(123456)
GROUP BY trans_type

_____________________________________________________________________________________________________________________________________________________________________
'ufn_get_total_sales' is not a recognized function name'

_____________________________________________________________________________________________________________________________________________________________________
CREATE PROCEDURE usp_clear_checks
                   @account_no       INTEGER,
                   @date_processed   DATETIME,
                   @checking_balance MONEY OUTPUT
AS
/* Create temporary variables into which to FETCH values
   with the columns values from a table row */

  DECLARE @check_amt  MONEY
  DECLARE @check_date DATETIME
  DECLARE @check_no   INTEGER

/* Declare the cursor in which to store the query results
   temporarily during row-by-row processing */

  DECLARE  cur_unproc_checks CURSOR FOR
    SELECT check_date, check_no, check_amount
      FROM unprocessed_checks
     WHERE account_no = @account_no
    ORDER BY check_amount

/* OPEN the cursor and then FETCH the first row within the
   results set */

  OPEN  cur_unproc_checks
  FETCH cur_unproc_checks
   INTO @check_date, @check no, @check_amt

/* If no rows within the results set (because the customer
   has no outstanding checks) CLOSE the cursor and RETURN
   to the caller */

  IF (@@fetch_status <> 0)
    BEGIN
      CLOSE cur_unproc_checks
      DEALLOCATE cur_unproc_checks
      RETURN
    END<a name="1742"></a><a name="IDX-917"></a>
  SET NOCOUNT ON

/* Work through the cursor one row (check) at a time. Check
   to make sure the last FETCH was successful, then process
   the row of results. After processing, FETCH the next row
   and repeat the process until the FETCH is unsuccessful-
   meaning there are no more rows to process. */

  WHILE (@@fetch_status = 0)
  BEGIN
    IF @checking_balance - @check_amt >= 0
      BEGIN
        SET @checking_balance =
              @checking_balance - @check_amt

        INSERT INTO cleared_items
          VALUES (@date_processed, @account_no,
                  @check_date, @check_no, @check_amt)
      END
    ELSE
      BEGIN
        INSERT INTO overdraft_items
          VALUES (@date_processed, @account_no,
                  @check_date, @check_no, @check_amt)

        INSERT INTO fees
          VALUES ('OD', @date_processed, @account_no,
                  @check_date, @check_no, @check_amt,
                  10.00)
      END

/* FETCH the next row from the results set */

    FETCH cur_unproc_checks
     INTO @check_date, @check_no, @check_amt
  END

  CLOSE cur_unproc_checks
  DEALLOCATE cur_unproc_checks
 RETURN

_____________________________________________________________________________________________________________________________________________________________________
 CREATE FUNCTION [<owner name>.]<function name>
   ([{@<parameter name> [AS] <scalar data type>
    [=<default value>]}[...,n]])
 RETURNS TABLE
 [WITH {ENCRYPTION|SCHEMABINDING)]
 [AS]
 RETURN [(] <SELECT statement> [)]

_____________________________________________________________________________________________________________________________________________________________________
 CREATE FUNCTION ufn_composite_customer_list ()
 RETURNS @composite_customer_list TABLE
   (cust_ID      INTEGER,
    first_name   VARCHAR(30),
    last_name    VARCHAR(30),
    sales_office SMALLINT,
    salesperson  INTEGER)
 AS
 BEGIN
 /* Build the consolidated list from office 1 customers */

   INSERT @composite_customer_list
     SELECT cust_ID, first_name, last_name, 1, salesperson
       FROM Office1_Customers

 /* Add office 2 customers to the consolidated list */

   INSERT @composite_customer_list
     SELECT cust_ID, first_name, last_name, 2, salesperson
       FROM Office2_Customers

 /* Add office 3 customers to the consolidated list */

   INSERT @composite_customer_list
     SELECT cust_ID, first_name, last_name, 3, salesperson
       FROM Office3_Customers

   RETURN
 END<a name="1748"></a><a name="IDX-922"></a>

_____________________________________________________________________________________________________________________________________________________________________
 CREATE FUNCTION ufn_employee_customer_list
          (@salesrep_ID INTEGER)
 RETURNS TABLE
 AS
 RETURN SELECT * FROM customers
        WHERE customers.salesperson = @salesrep_ID<a name="1747"></a><a name="IDX-921"></a>

_____________________________________________________________________________________________________________________________________________________________________
 CREATE FUNCTION ufn_employee_total_sales
          (@salesrep_ID INTEGER)
 RETURNS REAL
 BEGIN
   RETURN (SELECT  SUM(order_total)
           FROM cust_orders
           WHERE cust_orders.salesrep_ID = @salesrep_ID)
 END

_____________________________________________________________________________________________________________________________________________________________________
CREATE FUNCTION [<owner name>.]<function name>
  ([{@<parameter name> [AS] <scalar data type>
   [=<default value>]}[...,n]])
RETURNS <scalar return data type>
[WITH {ENCRYPTION |SCHEMABINDING}]
[AS]<a name="1745"></a><a name="IDX-919"></a>
BEGIN
  <Transact-SQL statements>
  RETURN <scalar expression>
END

_____________________________________________________________________________________________________________________________________________________________________
CREATE FUNCTION [<owner name>.]<function name>
  ([{@<parameter name> [AS] <scalar data type>
   [=<default value>]}[...,nl])
RETURNS @<table name> TABLE <table definition>
[WITH {ENCRYPTION|SCHEMABINDING}]
[AS]
BEGIN
  <Transact-SQL statements>
  RETURN
END

_____________________________________________________________________________________________________________________________________________________________________
GRANT CREATE FUNCTION <username>

_____________________________________________________________________________________________________________________________________________________________________
 SP_HELPTEXT <object name>

_____________________________________________________________________________________________________________________________________________________________________
 SP_HELPTEXT usp_process_check

_____________________________________________________________________________________________________________________________________________________________________
 DECLARE @<variable name> <data type>
         [...,@<last variable name> <last data type>]

_____________________________________________________________________________________________________________________________________________________________________
 DECLARE @customer_count INTEGER, @total_sales REAL,
         @best_sales_date DATETIME

_____________________________________________________________________________________________________________________________________________________________________
 SELECT @variable_name = {expression | SELECT statement}
   [...{, @<last variable name> =
   {expression | SELECT statement}}
 [FROM <list of tables>]
 [WHERE expression]
 [GROUP BY <column names>]
 [HAVING expression]
 [ORDER BY <column names>]

_____________________________________________________________________________________________________________________________________________________________________
DECLARE
  @customer_count INTEGER   /* number of customers serviced
                               by  the salesperson */
  @total_sales REAL         /* grand total sales made */
  @best_sales_date DATETIME /* date most sales made */

_____________________________________________________________________________________________________________________________________________________________________
DECLARE
  @customer_name VARCHAR(26)
  @largest_order MONEY      /* largest order placed by a
                               single customer */
  @total_sales MONEY        /* grand total sales made */
  @salesperson_ID

SELECT @customer_name =
         RTRIM(first_name) + ' ' + RTRIM(last_name),
       @largest_order = order_total,
       @salesperson_ID = salesperson_ID
FROM customers
ORDER BY order_total

SELECT @total_sales = SUM(order__total)
FROM customers
WHERE salesperson_ID = @salesperson_ID

PRINT 'Largest order ('+CONVERT(VARCHAR(10),@largest_order)
  + ') placed by' +@customer_name+' Sales Rep: '
  +CONVERT (VARCHAR(6),@salesperson_ID)
PRINT  'Total  sales  for rep: '
  +CONVERT(VARCHAR(6),@salesperson_ID)+' = '
  +CONVERT(VARCHAR(10),@total_sales)

_____________________________________________________________________________________________________________________________________________________________________
SELECT @customer_count =  0, @total_sales = 0.00,
  @best_sales_date = ''<a name="1755"></a><a name="IDX-926"></a>

_____________________________________________________________________________________________________________________________________________________________________
SET @customer_count = 0
SET @total_sales = 0.00
SET @best_sales_date = ''

_____________________________________________________________________________________________________________________________________________________________________
DROP FUNCTION <function name>
       [..., <last function name>]<a name="1758"></a><a name="IDX-928"></a>

_____________________________________________________________________________________________________________________________________________________________________
DROP FUNCTION ufn_rep_total_sales

_____________________________________________________________________________________________________________________________________________________________________
DROP PROCEDURE <procedure name>
       [..., <last procedure name>)

_____________________________________________________________________________________________________________________________________________________________________
DROP PROCEDURE Konrad.usp_increase_my_pay

_____________________________________________________________________________________________________________________________________________________________________
DROP PROCEDURE usp_process_check, usp_add_item

_____________________________________________________________________________________________________________________________________________________________________
 sp_dboption SQLTips, 'single user', FALSE

_____________________________________________________________________________________________________________________________________________________________________
 sp_dboption SQLTips, 'single user', TRUE

_____________________________________________________________________________________________________________________________________________________________________
use SQLTips

_____________________________________________________________________________________________________________________________________________________________________
 DBCC DBREINDEX (['database.owner.<table name>'
       [,<index name> (,<fill factor>]]]) [WITH NO_INFOMSGS]

_____________________________________________________________________________________________________________________________________________________________________
 DBCC DBREINDEX('northwind.dbo.products','' ,50)

_____________________________________________________________________________________________________________________________________________________________________
 DBCC SHRINKDATABASE ( <database name> [,<target percent>]
        [, {NOTRUNCATE|TRUNCATEONLY}])

_____________________________________________________________________________________________________________________________________________________________________
 DBCC SHRINKDATABASE (SQLTips, 20)

_____________________________________________________________________________________________________________________________________________________________________
 DBCC SHRINKDATABASE (SQLTips, TRUNCATEONLY)

_____________________________________________________________________________________________________________________________________________________________________
DBCC INDEXDEFRAG (
  {<database name>|<database ID>|0}
   ,{<table name>|<table ID>|'<view name>'|<view ID>}
   ,{<index name> | <index ID>} ) [WITH NO_INFOMSGS]

_____________________________________________________________________________________________________________________________________________________________________
DBCC SHRINKDATABASE (SQLTips, NOTRUNCATE)<a name="1766"></a><a name="IDX-933"></a>

_____________________________________________________________________________________________________________________________________________________________________
DBCC SHRINKFILE ( {<file name>|<file ID>
  {[,<target size>]|[,{EMPTYFILE|NOTKUNCATE|TRUNCATEONLY}]}
)

_____________________________________________________________________________________________________________________________________________________________________
DBCC UPDATEUSAGE ( {'<database name>'|0}
  [,{'<table name>'|'<view name>'}
   [,{'<index name>'|'<index ID>'}]] )
  [WITH {[COUNT_ROWS[,NO_INFOMSGS]]|NO_INFOMSGS}]

_____________________________________________________________________________________________________________________________________________________________________
 DBCC HELP ( '<DBCC statement>'|@<variable name>|'?' )

_____________________________________________________________________________________________________________________________________________________________________
 DBCC HELP ('UPDATEUSAGE')

_____________________________________________________________________________________________________________________________________________________________________
 DBCC UNPINTABLE ( <database ID>,<table ID>] )<a name="1771"></a><a name="IDX-937"></a>

_____________________________________________________________________________________________________________________________________________________________________
DBCC <DLL name> (FREE)

_____________________________________________________________________________________________________________________________________________________________________
DBCC PINTABLE ( <database ID>,<table ID>] )

_____________________________________________________________________________________________________________________________________________________________________
DBCC xp_sendmail (FREE)

_____________________________________________________________________________________________________________________________________________________________________
DECLARE @DBCC_statement SYSNAME
SET @DBCC_statement = 'UPDATEUSAGE'
DBCC HELP (@DBCC statement)

_____________________________________________________________________________________________________________________________________________________________________
  SP_WHO

_____________________________________________________________________________________________________________________________________________________________________
 DBCC INPUTBUFFER(13)

_____________________________________________________________________________________________________________________________________________________________________
 DBCC SHOWCONTIG WITH ALL_INDEXES<a name="1775"></a><a name="IDX-940"></a>

_____________________________________________________________________________________________________________________________________________________________________
 DBCC SQLPERF (LOGSPACE)

_____________________________________________________________________________________________________________________________________________________________________
 DBCC USEROPTIONS

_____________________________________________________________________________________________________________________________________________________________________
DBCC INPUTBUFFER ( <system process ID> )<a name="1773"></a><a name="IDX-938"></a>

_____________________________________________________________________________________________________________________________________________________________________
DBCC OPENTRAN ( {'<database name>'|<database ID>} )
  [WITH TABLERESULTS [,NO_INFOMSGS]]

_____________________________________________________________________________________________________________________________________________________________________
DBCC OUTPUTBUFFER   (20)

_____________________________________________________________________________________________________________________________________________________________________
DBCC OUTPUTBUFFER ( <system process ID>)

_____________________________________________________________________________________________________________________________________________________________________
DBCC SHOWCONTIG
  [( {<table name>|<table ID>|<view name>|<view ID>}
     [,<index name>|<index ID>] )]
  [WITH {ALL_INDEXES|FAST[,ALLINDEXES]|
    TABLERESULTS[,{ALL_INDEXES}][,{FAST|ALL_LEVELS}] }]<a name="1774"></a><a name="IDX-939"></a>

_____________________________________________________________________________________________________________________________________________________________________
USE NORTHWIND
DBCC SHOWCONTIG('order details') WITH ALL_INDEXES

_____________________________________________________________________________________________________________________________________________________________________
 DBCC CHECKIDENT ('<table name>',NORESEED)

_____________________________________________________________________________________________________________________________________________________________________
 DBCC CHECKIDENT ('<table name>',RESEED)

_____________________________________________________________________________________________________________________________________________________________________
 DBCC CHECKIDENT ('<table name>',RESEED,<new reseed value>)

_____________________________________________________________________________________________________________________________________________________________________
 DBCC CHECKIDENT ('<table name>',RESEED,0)
 DBCC CHECKIDENT ('<table name>',RESEED)

_____________________________________________________________________________________________________________________________________________________________________
 DBCC CHECTABLE ( '<table name>'|'<view name>'
   [,NOINDEX|<index ID>|
     (REPAIR_ALLOW_DATA_LOSS|REPAIR_FAST|REPAIR_REBUILD}] )
     [WITH {[ALL_ERRORMSGS][, [NO_INFOMSGS]][,[TABLOCK]]
              [,[ESTIMATEONLY]][,[PHYSICAL_ONLY]] }]

_____________________________________________________________________________________________________________________________________________________________________
DBCC CHECKALLOC ( '<database name>'
  [,{REPAIR_ALLOW_DATA_LOSS|REPAIR_FAST|REPAIR_REBUILD}] )
  [WITH
    {[ALL_ERRORMSGS|NOINFOMSGS][,[ESTIMATEONLY]]} ]

_____________________________________________________________________________________________________________________________________________________________________
DBCC CHECKCATALOG ( '<database name>' ) [WITH NO_INFOMSGS]

_____________________________________________________________________________________________________________________________________________________________________
DBCC CHECKCONSTRAINTS
  [( '<table name>'|'<constraint name>' )]
  [WITH {ALL_ERRORMSGS|ALL_CONSTRAINTS}]

_____________________________________________________________________________________________________________________________________________________________________
DBCC CHECKDB ( '<database name>'
  [,NOINDEX|{REPAIR_ALLOW_DATA_LOSS|REPAIR_FAST|
    REPAIR_REBUILD}] )
  [WITH {[ALL_ERRORMSGS][,[NO_INFOMSGS]][,[TABLOCK]]
          [,[ESTIMATEONLY]][,[PHYSICAL_ONLY]] }]

_____________________________________________________________________________________________________________________________________________________________________
DBCC CHECKFILEGROUP ( [{'<filegroup name>'|<filegroup ID>}]
  [,NOINDEX] )
  [WITH {[ALL_ERRORMSGS][,[NO_INFOMSGS]][,[TABLOCK]]
          [,[ESTIMATEONLY]] }]

_____________________________________________________________________________________________________________________________________________________________________
DBCC CHECKIDENT ( '<table name>'
  [,{NORESEED|RESEED[,<new reseed value>]}] )

_____________________________________________________________________________________________________________________________________________________________________
 SELECT first_name, last_name
 FROM employees
 WHERE hire_date > '2/1/2002'

_____________________________________________________________________________________________________________________________________________________________________
 SELECT first_name, last_name
 FROM realtors AS r
 WHERE 500000.00 <= (SELECT AVG(sales_price)
                     FROM sales AS s
                     WHERE s.realtor_ID = r.realtor_ID)

_____________________________________________________________________________________________________________________________________________________________________
 SELECT first_name, last_name, gpa
 FROM students
 WHERE gpa > ((SELECT AVG(gpa) FROM students) * 1.25)

_____________________________________________________________________________________________________________________________________________________________________
 SELECT first_name, last_name, grade
 FROM students AS s, grades AS g
 WHERE s.home_state = 'CA'
   AND s.student_ID = g.student_ID
   AND g.class      = 'chemistry'

_____________________________________________________________________________________________________________________________________________________________________
  CREATE vw_managers
  AS SELECT * FROM employees WHERE manager_ID IS NULL

_____________________________________________________________________________________________________________________________________________________________________
 SELECT e.emp_ID, e.first_name, e.last_name,
   e.date_hired AS 'Employee Hired',
   m.emp_ID AS 'Manager ID', m.date_hired AS 'Manager Hired'
 FROM employees AS e, employees AS m
 WHERE e.manager_ID = m.emp_ID
   AND e.date_hired < m.date_hired

_____________________________________________________________________________________________________________________________________________________________________
 SELECT first_name, last_name, date_sold, price
 FROM customers AS c, sales AS s
 WHERE c.cust_ID = s.sold_to
   AND make='Corvette'
   AND color='red'

_____________________________________________________________________________________________________________________________________________________________________
 UPDATE  employees  AS m  SET  salary = salary * 0.75
 WHERE employees.manager_ID = m.emp_ID
   AND e.date_hired < m.date_hired

_____________________________________________________________________________________________________________________________________________________________________
UPDATE employees SET salary =  salary * 0.75
WHERE EXISTS (SELECT *
              FROM employees AS m
              WHERE employees.manager_ID = m.manager_ID
                AND employees.date_hired < m.date_hired)

_____________________________________________________________________________________________________________________________________________________________________
UPDATE employees SET salary = salary * 0.75
WHERE EXISTS (SELECT *
              FROM vw_managers AS m
              WHERE employees.manager_ID = m.emp_ID
                AND employees.date_hired < m.date_hired)

_____________________________________________________________________________________________________________________________________________________________________
 /* Create a temporary table */
 CREATE TABLE #temp_items
 (item_number INTEGER,
  description VARCHAR(45),
  cost        MONEY)

 /* Use the DISTINCT clause to prevent the INSERT statement
    from putting duplicate data into the temporary table */

 INSERT INTO #temp_items
   SELECT DISTINCT * FROM items

 /* Delete all rows from the ITEMS table */

 TRUNCATE TABLE items

 /* (Optional) - Apply a uniqueness constraint to the
     original table to prevent future duplicates /

 ALTER TABLE items ADD UNIQUE (item_number)

 /* Return data from the temporary data */

 INSERT INTO items
   SELECT * FROM #temp_items

 /* Drop the temporary table */

 DROP #temp_items<a name="1797"></a><a name="IDX-956"></a>

_____________________________________________________________________________________________________________________________________________________________________
 ITEM_NUMBER INTEGER
 DESCRIPTION VARCHAR(45)
 COST        MONEY

_____________________________________________________________________________________________________________________________________________________________________
 /* Create a temporary table */
 CREATE TABLE #temp_discontinued
 (item_number  INTEGER)

 /* Use the DISTINCT clause to prevent the INSERT statement
    from putting duplicate data into the temporary table */
 INSERT INTO #temp_discontinued
   SELECT DISTINCT item_number
   FROM item_master WHERE type = 'gift'

 /*  Delete child rows  from related tables  */

 DELETE FROM inventory
 WHERE item_no IN (SELECT item_number
                   FROM #temp_discontinued)
 DELETE FROM orders
 WHERE item_no IN (SELECT  item_number
                   FROM #temp_discontinued)

 /* Delete the "parent" row from the parent table */

 DELETE FROM  item_master
 WHERE item_number  IN (SELECT item_number
                        FROM #temp_discontinued)

 /*  Drop the temporary table */

 DROP #temp_discontinued<a name="1800"></a><a name="IDX-958"></a>

_____________________________________________________________________________________________________________________________________________________________________
DELETE FROM item_master WHERE type = 'gift'

_____________________________________________________________________________________________________________________________________________________________________
 /* Mark the payments to be posted and insert them into the
    payment history table */

 UPDATE unposted_payments SET post = 'Y'
 INSERT INTO payment_history SELECT * FROM unposted_payments
                             WHERE post  =   'Y'
 /* Execute the UPDATE statement that posts the unposted
    payments marked for posting */

 UPDATE customers
 SET account_balance = account_balance -
       (SELECT SUM(amount_paid)
        FROM unposted_payments AS up
        WHERE customers.cust_ID = up.cust_ID),

     average_payment =
       (SELECT avg(amount_paid)
        FROM payment_history as ph
        WHERE customers.cust_ID = ph.cust_ID)

 WHERE EXISTS (SELECT *
               FROM unposted_payments as up
               WHERE customers.cust_ID = up.cust_ID
                 AND up.post = 'Y' )

 /* Remove posted payments from the unposted payments
    table */

 DELETE FROM unposted_payments WHERE post = 'Y'

_____________________________________________________________________________________________________________________________________________________________________
 UPDATE <table name>
 SET <column name> = <variable name or simple expression>
 WHERE <search condition>

_____________________________________________________________________________________________________________________________________________________________________
 UPDATE customers SET cust_no = cust_no

_____________________________________________________________________________________________________________________________________________________________________
        WHERE <search criteria>)

_____________________________________________________________________________________________________________________________________________________________________
        WHERE <search criteria>)

_____________________________________________________________________________________________________________________________________________________________________
        WHERE <search criteria>)

_____________________________________________________________________________________________________________________________________________________________________
 DELETE FROM prospects
 WHERE phone_number IN (SELECT phone_number FROM customers)

_____________________________________________________________________________________________________________________________________________________________________
 SELECT * FROM customers
 WHERE salesperson IN ('Mary', 'Mark', 'Sue')

_____________________________________________________________________________________________________________________________________________________________________
 WHERE customer.normal_payment IN
   (SELECT amount_paid
    FROM unposted_payments AS up
    WHERE customers.cust_ID = up.cust_ID
    AND up.post = 'Y')

_____________________________________________________________________________________________________________________________________________________________________
 WHERE EXISTS (SELECT *
               FROM unposted_payments as up
               WHERE customers.cust_ID = up.cust_ID
                 AND up.post = 'Y')

_____________________________________________________________________________________________________________________________________________________________________
 CREATE VIEW vw_total_listings(realtor_ID, listing_count)
 SELECT realtor_ID, COUNT(*)
 FROM listings
 GROUP BY realtor_ID

 SELECT realtor_ID, listing_count
 FROM vw_total_listings
 WHERE listing_count = (SELECT MAX(listing_count)
                        FROM vw_total_listing)

_____________________________________________________________________________________________________________________________________________________________________
 SELECT first_name, last_name, total_sales
 FROM employees
 WHERE total_sales >= ALL (SELECT total_sales
                           FROM employees
                           WHERE total_sales IS NOT NULL)

_____________________________________________________________________________________________________________________________________________________________________
 SELECT first_name, last_name, total_sales
 FROM employees
 WHERE total_sales = (SELECT MAX(total_sales)
                      FROM employees)

_____________________________________________________________________________________________________________________________________________________________________
 SELECT realtor_ID, COUNT(*)
 FROM listings
 GROUP BY realtor_ID<a name="1809"></a><a name="IDX-964"></a>
HAVING COUNT(*) >= ALL (SELECT DISTINCT COUNT(*)
                        FROM listings
                        GROUP BY realtor_ID)

_____________________________________________________________________________________________________________________________________________________________________
 SELECT 'All Unique'
 WHERE UNIQUE (SELECT <column list> FROM <table name>)

_____________________________________________________________________________________________________________________________________________________________________
 SELECT DISTINCT 'Contains Duplicates'
 WHERE EXISTS (SELECT item_number, COUNT(*)
               FROM item_master<a name="1811"></a><a name="IDX-965"></a>
               GROUP BY item_number
               HAVING COUNT(*) > 1)

_____________________________________________________________________________________________________________________________________________________________________
 SELECT DISTINCT 'Contains Duplicates'
 WHERE NOT UNIQUE (SELECT item_number FROM item_master)

_____________________________________________________________________________________________________________________________________________________________________
 INSERT INTO survey_results (question, response)
   SELECT question_text,
          SUBSTRING(response_string, question_number, 1)
   FROM survey_responses, survey_questions
   WHERE survey_responses = 1
     AND survey_questions = 1

_____________________________________________________________________________________________________________________________________________________________________
CREATE TABLE survey_questions
(survey_number   SMALLINT,
 question_number TINYINT,
 question_text   VARCHAR(256))

CREATE TABLE survey_responses
(survey_number   SMALLINT,
 response_string VARCHAR(50))

_____________________________________________________________________________________________________________________________________________________________________
CREATE TABLE survey_results
(question VARCHAR(256),
 response CHAR(1))

_____________________________________________________________________________________________________________________________________________________________________
l,"1111"
l,"1000"
l,"1100"
l,"1110"
l,"0000"

_____________________________________________________________________________________________________________________________________________________________________
l,1, "Do you support home schooling?"
l,2,"Do you want public school vouchers?"
l,3, "Do you support lower taxes over deficit reduction?"
l,4,"Do you support placing the nuclear repository in Nevada?"

_____________________________________________________________________________________________________________________________________________________________________
SELECT question 'Question to 5 Respondents', COUNT(*) 'Yes'
FROM survey_results
WHERE response = '1'
GROUP BY question

_____________________________________________________________________________________________________________________________________________________________________
 SELECT * FROM vw_salesrep_sales
 SELECT * FROM vw_department_sales
 SELECT * FROM vw_region_sales

 SELECT SUM (total_sales)
 FROM vw_regional_sales

_____________________________________________________________________________________________________________________________________________________________________
CREATE VIEW vw_salesrep_sales (region, department,
                                salesprep_ID, total_sales)
AS SELECT region, department, salesrep_ID SUM(amount)
FROM sales
GROUP BY region, department, salesrep_ID

CREATE VIEW vw_department_sales (region, department,
                                 total_sales
AS SELECT region, department, SUM(total_sales)
FROM vw_salesrep_sales
GROUP BY region, department

CREATE VIEW vw_regional_sales (region, total_sales)
AS SELECT region, SUM(total_sales)
FROM vw_department_sales
GROUP BY region

_____________________________________________________________________________________________________________________________________________________________________
  TOTAL_SALES
  -----------
  115,000.00
  100,000.00
  105,000.00
  100,000.00
   85,000.00
   85,000.00
  105,000.00
   65,000.00
   95,000.00
   95,000.00

_____________________________________________________________________________________________________________________________________________________________________
 SELECT DISTINCT TOP 3 total_sales
 FROM employees
 ORDER BY total_sales ASC

_____________________________________________________________________________________________________________________________________________________________________
 SELECT DISTINCT TOP 50 percent total_sales
 FROM employees
 ORDER BY total_sales DESC

_____________________________________________________________________________________________________________________________________________________________________
 SELECT TOP 3 total_sales
 FROM employees
 ORDER BY total_sales DESC

_____________________________________________________________________________________________________________________________________________________________________
 SELECT TOP 50 percent total_sales
 FROM employees
 ORDER BY total_sales DESC

_____________________________________________________________________________________________________________________________________________________________________
SELECT DISTINCT TOP 3 total_sales
FROM employees
ORDER BY total_sales DESC

_____________________________________________________________________________________________________________________________________________________________________
SELECT first_name, last_name, total_sales
FROM employees
WHERE total_sales IN (SELECT DISTINCT TOP 3 total_sales
                      FROM employees
                      ORDER BY total_sales DESC)

_____________________________________________________________________________________________________________________________________________________________________
 FIRST_NAME  LAST_NAME  TOTAL_SALES
 ----------  ---------  -----------
 Konrad      Kernin      115,000.00
 Joseph      King        100,000.00
 Sally       Hardy       105,000.00
 Robert      Fields      100,000.00
 Walter      Berry        85,000.00
 Susan       Mathau       85,000.00
 Karen       Berry       105,000.00
 Kregg       King         65,000.00
 Kris        Smith        95,000.00
 Debbie      Jones        95,000.00

_____________________________________________________________________________________________________________________________________________________________________
 SELECT DISTINCT e1.total_sales 'Top Three TOTAL_SALES'
 FROM employees AS el
 WHERE 3 < (SELECT COUNT(*) FROM employees AS e2
            WHERE e1.total_sales > e2.total_sales)

_____________________________________________________________________________________________________________________________________________________________________
 SELECT MIN(e1.total_sales) 'Bottom Three TOTAL_SALES'
 FROM employees AS e1, employees AS e2
 WHERE e1.total_sales  >= e2.total_sales
 GROUP BY e2.total_sales
 HAVING COUNT(DISTINCT e1.total_sales) > 3

_____________________________________________________________________________________________________________________________________________________________________
 SELECT MIN(e1.total_sales) 'Top Three TOTAL_SALES'
 FROM employees AS e1, employees AS e2
 WHERE e1.total_sales >= e2.total_sales
 GROUP BY e2.total_sales
 HAVING COUNT(DISTINCT e1.total_sales) <= 3

_____________________________________________________________________________________________________________________________________________________________________
SELECT DISTINCT e1.total_sales 'Bottom Three TOTAL_SALES'
FROM employees AS el
WHERE 3 < (SELECT COUNT(*) FROM employees AS e2
           WHERE e1.total_sales < e2.total_sales)

_____________________________________________________________________________________________________________________________________________________________________
SELECT first_name, last_name, total_sales
FROM employees AS e1
WHERE 3 < (SELECT COUNT(*) FROM employees AS e2
           WHERE e1.total_sales > e2.total_sales)
ORDER BY total_sales DESC

_____________________________________________________________________________________________________________________________________________________________________
 SELECT *, (SELECT SUM(amount_invoiced)
            FROM sales AS s2
            WHERE s2.salesrep_ID = s1.salesrep_ID) AS
             'Total Sales'
 FROM sales AS s1
 ORDER BY salesrep_ID, invoice_date

_____________________________________________________________________________________________________________________________________________________________________
 SELECT salesrep_ID, SUM(amount_invoiced) 'Total Sales'
 FROM sales
 GROUP BY salesrep_ID
 ORDER BY salesrep_ID

_____________________________________________________________________________________________________________________________________________________________________
SELECT t1.trans_date, trans_type, trans_amount AS 'Amount'
       (SELECT  SUM(t2.trans_amount)<a name="1826"></a><a name="IDX-974"></a>
        FROM transactions AS t2
        WHERE t2.trans_date <= t1.trans_date) AS
          'Net (Deposits - Checks)'
 FROM transactions AS t1
 ORDER BY trans_date

_____________________________________________________________________________________________________________________________________________________________________
SELECT t1.trans_date, trans_type, trans_amount AS 'Amount'
       (SELECT SUM(t2.trans_amount)
        FROM transactions AS t2
        WHERE t2.trans_date <= t1.trans_date
          AND t2.acct_number = @acct_no) + @begin_bal)
        AS 'Account Balance'
FROM transactions AS t1
WHERE t1.acct_number = @acct_no
ORDER BY trans_date

_____________________________________________________________________________________________________________________________________________________________________
   SELECT * FROM table_a
 EXCEPT
   SELECT * FROM table_b

_____________________________________________________________________________________________________________________________________________________________________
   SELECT first_name, last_name, phone_number FROM customers
 EXCEPT
   SELECT first_name, last_name, phone_number FROM employees

_____________________________________________________________________________________________________________________________________________________________________
 SELECT DISTINCT prospects.*
 FROM (prospects LEFT OUTER JOIN customers
   ON prospects.phone_number = customers.phone_number)
 WHERE customers.phone_number IS NULL

_____________________________________________________________________________________________________________________________________________________________________
   SELECT cust_ID, first_name, last_name, phone_number
   FROM life_cust_list
 INTERSECT
   SELECT cust_ID, first_name, last_name, phone_number
   FROM auto_cust_list

_____________________________________________________________________________________________________________________________________________________________________
 SELECT DISTINCT student_id, first_name, last_name, GPA
 FROM students
 WHERE EXISTS (SELECT * FROM football_team
               WHERE students.student_ID =
                       football_team.student_ID)

_____________________________________________________________________________________________________________________________________________________________________
SELECT DISTINCT student_id, first_name, last_name, GPA
FROM students INNER JOIN football_team
  ON students.student_ID = football_team,student_ID

_____________________________________________________________________________________________________________________________________________________________________
 EXEC sp_attach_db @dbname='MySQLTips',
        @filename1='C:\MSSQL\Data\SqlTips_data.mdf'

_____________________________________________________________________________________________________________________________________________________________________
 EXEC sp_attach_db @dbname='MySQLTips',
        @filenamel='C:\MSSQL\Data\SqlTips_data.mdf',
        @filename2='D:\MSSQL\LogFiles\SQLTips_log.ldf'

_____________________________________________________________________________________________________________________________________________________________________
 EXEC sp_detach_db @dbname='SQLTips', @skipchecks='TRUE'

_____________________________________________________________________________________________________________________________________________________________________
 sp_attach_db [@dbname=]'<database name>'
              ,[@filename<<i class="emphasis">n</i>>=]
                 '<pathname of an .mdf or .ldf file>'
              [...,@filename16]

_____________________________________________________________________________________________________________________________________________________________________
 sp_detach_db [@dbname=]'<database name>'
              [, [@skipchecks=]{'TRUE'|'FALSE'}]

_____________________________________________________________________________________________________________________________________________________________________
 EXEC sp_addtype @typename='SALES_TAX',
 @phystype='NUMERIC(6,5),@owner='dbo'

_____________________________________________________________________________________________________________________________________________________________________
 sp_addtype [@typename=]'<data type name>'
            ,[@phystype=]'<valid system data type>'
            [,[@nulltype=]'{NULL|NOT NULL|NONULL}'
            [,[@owner=]'<username>']

_____________________________________________________________________________________________________________________________________________________________________
 sp_droptype [@typename=]'<data type name>'

_____________________________________________________________________________________________________________________________________________________________________
EXEC sp_droptype @typename='SSAN'

_____________________________________________________________________________________________________________________________________________________________________
 EXEC sp_help 'USP_PROCESS_CHECK'

_____________________________________________________________________________________________________________________________________________________________________
 EXEC sp_help

_____________________________________________________________________________________________________________________________________________________________________
 sp_help [[@objname=]<database object name>]

_____________________________________________________________________________________________________________________________________________________________________
 EXEC sp_helptext 'sp_helptext'

_____________________________________________________________________________________________________________________________________________________________________
 sp_helptext [[@objname=]<database object name>]

_____________________________________________________________________________________________________________________________________________________________________
 sp_depends [[@objname=]<database object name>]

_____________________________________________________________________________________________________________________________________________________________________
 sp_depends 'vw_high_rollers'

_____________________________________________________________________________________________________________________________________________________________________
Server: Msg 208, State 1, Procedure vw_show_high_rollers,
Line2

Invalid object name 'high_rollers'.

Server: Msg 4413, Level 16, State 1, Line 1

Could not use view or function 'vw_show_high_rollers'
because of binding errors

_____________________________________________________________________________________________________________________________________________________________________
 EXEC sp_helptext 'CK__authors__au_id__77BFCB91

_____________________________________________________________________________________________________________________________________________________________________
 sp_helpconstraint [@objname=]'<table name>'
              [,[@ncmsg=}{'nomsg'}]

_____________________________________________________________________________________________________________________________________________________________________
 USE PUBS
 EXEC sp_helpconstraint 'authors'

_____________________________________________________________________________________________________________________________________________________________________
 EXEC sp_pkeys @table_name='customers',
               @table_qualifier='Northwind'

_____________________________________________________________________________________________________________________________________________________________________
sp_pkeys [@table_name=]'<table name>'
           [,[@table_owner=]'<table owner's username>'
           [,[@table_qualifier=]'<database name>'

_____________________________________________________________________________________________________________________________________________________________________
 sp_fkeys
   [@pktable_name=]'<PRIMARY KEY table name>'
   [,[@pktable_owner=]'<PRIMARY KEY table owner's name>'
   [,[@fktable_name=]'<FOREIGN KEY table name>'
   [,[@fktable_owner=]'<FOREIGN KEY table owner's name>'
   [,[@fktable_qualifier=]'<FOREIGN KEY table database>'

_____________________________________________________________________________________________________________________________________________________________________
 USE Northwind
 EXEC sp_fkeys @pktable_name='Customers'

_____________________________________________________________________________________________________________________________________________________________________
USE Northwind
EXEC sp_fkeys @fktable_name='Orders'

_____________________________________________________________________________________________________________________________________________________________________
 sp_procoption [@procname=]'<stored procedure name>'
               ,[@optionname=]'startup'
               [@optionvalue=]'{true|false}'

_____________________________________________________________________________________________________________________________________________________________________
USE master
EXEC sp_procoption @procname = 'su_sp_CreateExecSummary',
                   @optionname = 'startup',
                   @optionvalue = 'false'

_____________________________________________________________________________________________________________________________________________________________________
USE master
EXEC sp_procoption @procname = 'su_sp_CreateExecSummary',
                   @optionname = 'startup',
                   @optionvalue = 'true'

_____________________________________________________________________________________________________________________________________________________________________
 EXEC sp_helpdb @dbname='SQLTips'

_____________________________________________________________________________________________________________________________________________________________________
 EXEC sp_helpdb

_____________________________________________________________________________________________________________________________________________________________________
 sp_helpdb [[@dbname=]'<database name>']

_____________________________________________________________________________________________________________________________________________________________________
 EXEC sp_spaceused

_____________________________________________________________________________________________________________________________________________________________________
 sp_spaceused [[@objname=l'<tabee name>'
                [,[@updateusage=]'updateusage']<a name="1863"></a><a name="IDX-995"></a>

_____________________________________________________________________________________________________________________________________________________________________
 USE pubs
 EXEC sp_spaceused @objname='authors'

_____________________________________________________________________________________________________________________________________________________________________
 EXEC sp_helptext <name of trigger>

_____________________________________________________________________________________________________________________________________________________________________
 SELECT * FROM sysobjects WHERE type = 'TR'

_____________________________________________________________________________________________________________________________________________________________________
 sp_helptrigger [@tabname=]'<table name>'
                [,[@triggertype=']'{DELETE|INSERT|UPDATE}']

_____________________________________________________________________________________________________________________________________________________________________
 USE SQLTips
 EXEC sp_helptrigger 'employees'

_____________________________________________________________________________________________________________________________________________________________________
EXEC sp_helptrigger 'employees', 'update'

_____________________________________________________________________________________________________________________________________________________________________
 EXEC KILL {spid} [WITH STATUSONLY]

_____________________________________________________________________________________________________________________________________________________________________
 EXEC sp_who [[@loginame=]'<login name>']

_____________________________________________________________________________________________________________________________________________________________________
 EXEC sp_who<a name="1870"></a><a name="IDX-999"></a>

_____________________________________________________________________________________________________________________________________________________________________
 KILL 53 WITH STATUSONLY

_____________________________________________________________________________________________________________________________________________________________________
 KILL 53

_____________________________________________________________________________________________________________________________________________________________________
 Spid 53: Transaction rollback in progress. Estimated
 rollback completion: 75% Estimated time left: 30 seconds.

_____________________________________________________________________________________________________________________________________________________________________
 EXEC sp_lock 51, 53

_____________________________________________________________________________________________________________________________________________________________________
 EXEC sp_lock

_____________________________________________________________________________________________________________________________________________________________________
 EXEC sp_who 51

_____________________________________________________________________________________________________________________________________________________________________
 EXEC sp_who 'frank'

_____________________________________________________________________________________________________________________________________________________________________
 KILL 51

_____________________________________________________________________________________________________________________________________________________________________
 sp_lock ([@spidl=]'<a SPID>'],[,[@spid2=]'<a second SPID>']

_____________________________________________________________________________________________________________________________________________________________________
 EXEC sp_password @new='MEYER', @loginame='OSCAR'

_____________________________________________________________________________________________________________________________________________________________________
 EXEC sp_password @old='OldPass', @new='newpass'

_____________________________________________________________________________________________________________________________________________________________________
 sp_password [[@old=]'<the current password>,]'
             {[@new]'<the new password>'}
             [,[@loginame=]'<username>'

_____________________________________________________________________________________________________________________________________________________________________
 EXEC sp_droplogin [@loginame=]<username>

_____________________________________________________________________________________________________________________________________________________________________
 EXEC sp_grantlogin [@loginame=]'<domain\username>'

_____________________________________________________________________________________________________________________________________________________________________
 EXEC sp_grantlogin 'NVBizNet2\clarissa'

_____________________________________________________________________________________________________________________________________________________________________
 EXEC sp_revokedbaccess [@name_in_db=] <db username>

_____________________________________________________________________________________________________________________________________________________________________
 EXEC sp_revokelogin [@loginame=]<domain\username>

_____________________________________________________________________________________________________________________________________________________________________
 sp_grantdbaccess [@loginame=]{<domain\username|username>}
                  [,[@name_in_db=]'<db username>'

_____________________________________________________________________________________________________________________________________________________________________
 USE MyTempDb
 EXEC sp_grantdbaccess 'NVBizNet2\Clarissa', 'Clarissa'

_____________________________________________________________________________________________________________________________________________________________________
 USE MyTempDb
 EXEC sp_revokedbaccess 'Clarissa'

_____________________________________________________________________________________________________________________________________________________________________
 USE SQLTips
 EXEC sp_grantdbaccess 'walter'

_____________________________________________________________________________________________________________________________________________________________________
EXEC sp_addlogin @loginame='walter', @passwd='JONES223',
                 @defdb='SQLTips'<a name="1881"></a><a name="IDX-1006"></a>

_____________________________________________________________________________________________________________________________________________________________________
sp_addlogin [@loginame=]'<username>'
            [,[@password=]'<password>']
            [,[@defdb=]'<database name>']
            [,[@deflanguage='<language>']
            [,[@SID=]'<security ID>']
            [,[@encryptopt=]
              {'NULL|skip_encryption|skip_encryption_old'}]

_____________________________________________________________________________________________________________________________________________________________________
 sp_makewebtask
   [@outputfile=]<sup>'</sup><Web page document pathname>',
   [@query=]<one or more SELECT statements>
   [,[@fixedfont=] {0|1}]<a name="1886"></a><a name="IDX-1009"></a>
   [,[@bold=]{0|1}]
   [,[@italic=]{0|1}]
   [,[@colheaders=]{0|1}]
   [,[@lastupdated=]{0|1}]
   [,[@HTMLheader=]{1|2|3|4|5|6}]
   [,[@username=]<username>]
   [,[@dbname=]<database name>]
   [,[@templatefile=]'<pathname of HTML template>']
   [,[@webpagetitle=]'<Web page title text>']
   [,[@resultstitle=]'<Title text above HTML table(s)>]
   [,{[@URL=]'<Web page URL>',[@reftext = ] '<anchor text>']}|
     {[@table_urls=]{0|1},
        [@url_query=]'<2-column table of URL queries>']}]
   [,[whentype@=]{1|2|3|4|5|6|7|8|9|10}]
   [,[@targetdate=]<date in YYYMMDD format>]
   [,[@targettime=]<time in HHMMSS format>]
   [,[@dayflags=]<day(s) of week flag>]
   [,[@numunits=]<number of @UNITTYPE units in each period>]
   [,[@unittype=]{1|2|3|4}]
   [,[@procname=]<Web task name>]
   [,[@maketask=]{0|1|2}]
   [,[@rowcnt=]<maximum number of rows in results set>]
   [,[@tabborder=]{0|1}]
   [,[@singlerow=]{0|1}]
   [,[@blobfmt=]<blob data disposition>]
   [,[@nrowsperpage=]<results set rows per Web page>]
   [,[@datachg=]{TABLE=<table name>[COLUMN=<column name>]
       [,...TABLE=<last table name>
         [COLUMN=<last column name>]}]

_____________________________________________________________________________________________________________________________________________________________________
USE SQLTips

EXEC sp_makewebtask
  @outputfile='D:\InetPub\WWWRoot\SqlTips\ProductList.htm',
  @query='SELECT p.Item_Number AS "Item'', Description,
                 Cost, Sales_Price AS "Retail Price'',
                (SELECT COUNT(*) FROM inventory AS i
                 WHERE i.item_number = p.item_number) AS
                  ''On Hand''
          FROM products AS p
          ORDER BY p.item_number',
  @HTMLHeader=1,
  @webpagetitle='NVBizNet Product List',
  @resultstitle= 'Confidential Price / Product List',
  @whentype=8,
  @numunits=l,
  @unittype=2,
  @procname=web_CreateProductsPage<a name="1893"></a><a name="IDX-1015"></a>

_____________________________________________________________________________________________________________________________________________________________________
 <html>
 <head>
   <title>NVBizNet - Customers &amp; Employees</title>
   <style type="text/css">
     body {background:lightyellow; font-family:helvetica}
   </style>
 </head><a name="1896"></a><a name="IDX-1017"></a>
 <body>
   <center><h1>Confidential Lists</h1></center>
   <hr>
   <center><h2>Customer List</h2></center>
   <center><%insert_data_here%></center>
   <hr>
   <center><h2>Employee List</h2></center>
   <center><%insert_data_here%></center>
   <hr>
 </body>
 </html>

_____________________________________________________________________________________________________________________________________________________________________
 <html>
 <head>
   <title>NVBizNet - Product List</title>
   <style type=" text/css">
     h1 (color:blue; font-size:40px; font-family:verdana}
     body {color:blue; background:lightyellow;
           font-family:helvetica}
   </style>
 </head>
 <body>
   <center>
     <h1>Confidential Price / Product list</h1>
   </center><a name="1895"></a><a name="IDX-1016"></a>
   <hr>
   <center><img src='images/CompanyLogo.gif'></center>
   <hr>
   <center>
     <%insert_data_here%>
   </center>
   <hr>
 </body>
 </html>

_____________________________________________________________________________________________________________________________________________________________________
 EXEC sp_makewebtask
   @outputfile='D:\InetPub\WWWRoot\SqlTips\Custs_Emps.htm',
   @query='SELECT * FROM customers
           SELECT * FROM employeesp '
   @templatefile=
    'D:\InetPub\WWWRoot\SQLTips\Templates\Custs_N_Emps.TF',
   @whentype=8,
   @numunits=l,
   @unittype=2,
   @procname=web_CreateEmpsAndCustsPage

_____________________________________________________________________________________________________________________________________________________________________
 EXEC sp_makewebtask
   @outputfile='D:\InetPub\WWWRoot\SqlTips\ProductList.htm',
   @query='SELECT p.Item_Number AS ''Item'', Description,
                  Cost, Sales_Price AS ''Retail Price'',
                 (SELECT COUNT(*) FROM inventory AS i
                  WHERE i.item_number = p.item_number) AS
                    ''On Hand''
           FROM products p
           ORDER BY p.item_number',
   @templatefile=
    'D:\InetPub\WWWRoot\SQLTips\Templates\ProdList.TF',
   @whentype=8,
   @numunits=l,
   @unittype=2,
   @procname=web_CreateProductsPage

_____________________________________________________________________________________________________________________________________________________________________
 <!DOCTYPE html PUBLIC
  "-//W3C//DTD XHTML 1.0 Transitional//EN"
  "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
 <html xmlns="http://www.w3.org/1999/xhtml">
 <head>
   <title>NVBizNet - Product List</title>

   <style type="text/css">
      th {text-align:center; background:white)
      td {border-style:solid; border-width:1px 1px;
          border-color:black; padding-left:10px;
          padding-right:10px)
      thead {color:black; background:lightgreen;
             font-weight:bold; text-align:center}<a name="1899"></a><a name="IDX-1019"></a>
      tfoot {color:white; background:blue; font-weight:bold;
             text-align:center)
      tbody {text-align:right; background:lightblue}

     h1 {color:blue; font-size:40px; font-family:verdana}
     body {color:blue; background:lightyellow;
           font-family:helvetica}
   </style>
 </head>
 <body>
   <center><h1>Confidential Price/Product List</h1></center>
   <hr />
   <center><img src='images/CompanyLogo.gif'></center>
   <hr />
   <center>
   <table cellspacing="0">
     <thead>
       <tr>
         <td colspan="5">Prices &amp; Products</td>
       </tr>
     </thead>

     <tfoot>
       <tr>
           <td colspan="5">
              &amp;copy; NVBizNet.com (702)-361-0141</td>
       </tr>
     </tfoot>

     <tbody>
       <tr>
         <th>Item</th><th>Description</th><th>Cost</th>
         <th>Retail Price</th><th>On Hand</th>
       </tr>

 <%begindetail%>
       <tr>
         <td><%insert_data_here%></td>
         <td><%insert_data_here%></td>
         <td><%insert_data_here%></td>
         <td><%insert_data_here%></td>
         <td><%insert_data_here%></td>
       </tr>
 <%enddetail%>

     </tbody>
   </table>
   </center>
 </body>
 </html><a name="1900"></a><a name="IDX-1020"></a>

_____________________________________________________________________________________________________________________________________________________________________
 <%begindetail%>
   <tr>
     <td><%insert_data_here%></td>
     <td><%insert_data_here%></td>
     <td><%insert_data_here%></td>
     <td><%insert_data_here%></td>
     <td><%insert_data_here%></td>
   </tr>
 <%enddetail%><a name="1901"></a><a name="IDX-1021"></a>

_____________________________________________________________________________________________________________________________________________________________________
 EXEC sp_makewebtask
   @outputfile='D:\ InetPub\WWWRoot\SqlTips\ProductList.htm',
   @query='SELECT p.Item_Number, Description, Cost,
                  Sales_Price, (SELECT COUNT(*)
                                FROM inventory AS i
                                WHERE i.item_number =
                                        p.item_number)
           FROM products p
           ORDER BY p.item_number',
   @templatefile=
 'D:\InetPub\WWWRoot\SQLTips\Templates\FmtProdList.TF',
   @whentype=8,
   @numunits=l,
   @unittype=2,
   @procname=web_CreateProductsPage

_____________________________________________________________________________________________________________________________________________________________________
 @blobfmt=
   '%1% file=D:\InetPub\WWWRoot\SqlTips\Temp\PR_Text.htm
        URL=http://NVBizNet2.com/SQLTips/Temp/PR_Text.htm
    %6% file=D:\InetPub\WWWRoot\SqlTips\images\publogo.gif
        URL=http://NVBizNet2,com/SQLTips/images/publogo.GIF'

_____________________________________________________________________________________________________________________________________________________________________
 @BLOBFMT='%<TEXT/IMAGE column number>%
           file=<output filename>
           [tplt=<template filename>]
           URL=<Web address of output file>

          [...%<last TEXT/IMAGE column number>%
           file=<last output filename>
           [tplt=<last template filename>]
           URL=<Web address of last output file>]'

_____________________________________________________________________________________________________________________________________________________________________
 SELECT pr_info AS 'Publisher Name', pub_name, city, state,
        country, logo, 'Company Logo'
 FROM pub_info AS pub_info, publishers
 where pub_info.pub_id = publishers.pub_id

_____________________________________________________________________________________________________________________________________________________________________
 USE pubs
 EXEC sp_makewebtask
   @outputfile='D:\InetPub\WWWRoot\SqlTips\Publishers.htm',
   @query='SELECT pr_info AS ''publisher Name'', pub_name,
                  city, state, country, logo,
                  ''Company Logo''
           FROM pub_info AS pub_info, publishers
           where pub_info.pub_id = publishers.pub_id',
   @blobfmt='%1%
 file=D:\InetPub\WWWRoot\SglTips\Temp\PR_Text.htm
 URL=http:// NVBizNet2.com/SQLTips/Temp/PR_Text.htm
              %6%
 file=D:\InetPub\WWWRoot\SqlTips\images\publogo.gif
 URL=http://NVBizNet2.com/SQLTips/images/publogo.GIF',<a name="1905"></a><a name="IDX-1023"></a>

_____________________________________________________________________________________________________________________________________________________________________
 EXEC sp_dropwebtask @procname='web_CreatePublishersPage'

 EXEC sp_dropwebtask @outputfile=
        'D:\InetPub\WWWRoot\SqlTips\Publishers.htm'

_____________________________________________________________________________________________________________________________________________________________________
 EXEC sp_runwebtask @procname='web_CreatePublishersPage'

 EXEC sp_runwebtask @outputfile=
        'D:\InetPub\WWWRoot\SglTips\Publishers.htm'

_____________________________________________________________________________________________________________________________________________________________________
 sp_dropwebtask [[@procname=]'<Web task process name>']
                [,[@outputfile=]'<pathname of output file>']

_____________________________________________________________________________________________________________________________________________________________________
sp_runwebtask [[@procname=]'<Web task process name>']
              [,[@outputfile=]'<pathname of output file>']

_____________________________________________________________________________________________________________________________________________________________________
 <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0//EN">
 <html>
 <body>

 <%
 'Function which establishes a connection with a DBMS
 'through the DSN "SQLTips" when called.

 Sub open_DSN_connection (byref connObjDSN)
   CONST dsnConnection = "DSN=SQLTips;UID=Maggy;pwd=Evans;"

 'Create the ADO Connection object
    Set connObjDSN = server.createobject("adodb.connection")

 'Place the connection string into the ConnectionString
 'property with the ADO Connection object and then try to
 'establish a connection with the DBMS.

    With connObjDSN<a name="1951"></a><a name="IDX-1046"></a>
      .ConnectionString = dsnConnection
      .open
    End With
  End Sub
 DIM connObjDSN
 call open_DSN_Connection (connObjDSN)

 'After calling the function that opens the connection,
 'display on the PHP Web page the connection details
 'available from ADO Connection object properties.

    With connObjDSN
      Response.write _
        "<b>Attributes = " &amp; .Attributes &amp; "<br>" &amp; _
        "<b>ADO Provider = " &amp; .Provider &amp; "<br>" &amp; _
        "<b>Command Timeout = " _
                        &amp; CommandTImeOut     &amp; "<br>" &amp; _
        "<b>Default Database = " _
                        &amp; .DefaultDatabase   &amp; "<br>" &amp; _
        "<b>Connection String = " _
                        &amp; .ConnectionString  &amp; "<br>" &amp; _
        "<b>Connection TimeOut = " _
                        &amp; .ConnectionTimeout &amp; "<br>" &amp; _
        "<b>Provider = " &amp; .Provider     &amp; "<br>" &amp; _
        "<b>CursorLocation = " _
                        &amp; .CursorLocation    &amp; "<br>" &amp; _
        "<b>Isolation Level = " _
                        &amp; .IsolationLevel    &amp; "<br>" &amp; _
        "<b>State = " &amp; .State           &amp; "<br>" &amp; _
        "<b>Version = " &amp; .Version       &amp; "<br>" &amp; _
    End With
 %>

 </body>
 </html>"

_____________________________________________________________________________________________________________________________________________________________________
 <!DOCTYPE HTML PUBLIC '-//W3C//DTD HTML 4.0//EN'>
 <html>
 <head>
   function open_DSN_connection()
   {
    $conn = odbc_connect("SQLTips","Maggy","Evans");
    return $conn;
   }
 </head>
 <body>

 <?php
 //Connect Call the function to connect with the DBMS<a name="1949"></a><a name="IDX-1045"></a>
   $conn = open_DSN_Connection();

 //Check the connection status
   if(!$conn)
    echo "Failed to connect!";
   else
   {
 //Code that works with the data within the DBMS goes here
    echo "DSN Connection through SQLTips successful!";
   }
 ?>
 </body>
 </html>

_____________________________________________________________________________________________________________________________________________________________________
<%
 Sub open_DSN_connection (byref connObjDSN)
   CONST dsnConnection = "DSN=SQLTips;UID=Konrad;pwd=King;"

'Create the ADO Connection object
   Set connObjDSN = server.createobject("adodb.connection")

'Place the connection string into the ConnectionString
'property within the ADO Connection object and then try
'to establish a connection with the DBMS.

   With connObjDSN
     .ConnectionString = dsnConnection
     .open
   End With
 End Sub
%>

_____________________________________________________________________________________________________________________________________________________________________
<head>
  function open_DSN_connection()
  {
   $conn = odbc_connect("SQLTips","Konrad","King");
   return $conn;
  }
</head><a name="1959"></a><a name="IDX-1052"></a>

_____________________________________________________________________________________________________________________________________________________________________
 "PROVIDER=<name of OLE DB provider>;
  DATA SOURCE=<name of the DBMS>;
  UID=<username>;
  PWD=<password>;
  DATABASE=<initial database>"<a name="1962"></a><a name="IDX-1054"></a>

_____________________________________________________________________________________________________________________________________________________________________
 <%
  Sub open_OLEDB_connection (byref connObj)
    connectString = _
      "PROVIDER=SQLOLEDB;DATA SOURCE=NVBizNet2;" &amp; _
      "UID=Konrad;PWD=King;DATABASE=SQLTips"

 'Create the ADO Connection object
    Set connObj = server.createobject("adodb.connection")

 'Place the connection string into the ConnectionString
 'property within the ADO Connection object and then call
 'the .open method to establish a connection with the DBMS.

    With connObjDSN
      .ConnectionString = dsnConnection
      .open
    End With
  End Sub
 %>

_____________________________________________________________________________________________________________________________________________________________________
 connectString = "DRIVER={MYSQL};SERVER=NVBizNet2;" &amp; _
                 "UID=Konrad;PWD=King;DATABASE=SQLTips"

_____________________________________________________________________________________________________________________________________________________________________
 <%
 '********************************
 '*** OPEN DSN-Less Connection ***
  Sub open_OLEDB_connection (byref connObj)
    connectString = _
      "PROVIDER=SQLOLEDB;DATA SOURCE=NVBizNet2;" &amp; _
      "UID=sa;PWD=michele;DATABASE=SQLTips"

    With connObj
      .ConnectionString = connectString
      .open
    End With
  End Sub

 '********************
 '*** MAIN ROUTINE ***
  Dim connObj, objResultsSet, queryString

 'open the connection to the DBMS
  Set connObj = server.createobject ("adodb.connection")
  open_OLEDB_connection (connObj)

 'setup the SELECT statement to submit to the DBMS
  queryString = _
    "SELECT COUNT(*) Count FROM siteAccessList " &amp; _
    "WHERE username = '" &amp; Request.Form("username") &amp; _
    "' AND password = '" &amp; Request.Form("password") &amp; "'"

  With connObj

 'submit the SELECT statement to the DBMS

    Set objResultsSet = .Execute (queryString)<a name="1965"></a><a name="IDX-1056"></a>
 'save the session variables and then
 'move the visitor member to the member area

    If objResultsSet.Fields("count") = 1 Then
      Session("username") = Request.Form("username")
      Session("password") = Request.Form("password")
      Response.Redirect "/SQLTips/StartSession.asp"
    End If
  End With
 %>

_____________________________________________________________________________________________________________________________________________________________________
 SELECT COUNT(*) FROM siteAccessList
 WHERE username='<data from username field in form>'
   AND password='<data from password field in form>'

_____________________________________________________________________________________________________________________________________________________________________
 With conObj
   Set objResultsSet = .Execute (queryString)
 End With

_____________________________________________________________________________________________________________________________________________________________________
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0//EN">
<html>
<head>
  <title>Login and Start a Session</title>
</head>
<body bgcolor="lightyellow">
  <center><h1>SQL Tips and Techniques</center></h1>
  <hr>
<form<a name="1964"></a><a name="IDX-1055"></a>
  action="http: //www.NVBizNet2.com/SQLTips/Login.asp"
  method="POST">
  Username: <input type="text" name="username"
             size="20"><br>
  Password: <input type="password" name="password"
             size="20"><br><br>
  <input type="submit" value="Login">
  <input type="reset" value="Reset">
</form>
</body>
</html>

_____________________________________________________________________________________________________________________________________________________________________
  Sub display_In_Table (objResultsset)
    With Response
      .Write "<center><table border='1' cellpadding='5'>"
      .Write "<tr>"
      For column = 0 To objResultsSet.Fields.Count - 1
        .Write "<th>" &amp; objResultsSet.Fields(column).Name _
        &amp; "</th>"
      Next
      .Write "<tr>"

      Do While Not objResultsSet.EOF
        .Write "<tr>"

        For column = 0 To objResultsSet.Fields.Count - 1
          If objResultsSet.Fields(column) <> "" Then
            .Write "<td>"  &amp; objResultsSet.Fields(column) _
            &amp; "</td>"
          Else
            .Write "<td>&amp;nbsp;</td>"
          End If
        Next
        .Write "<tr>"

        objResultsSet.MoveNext
      Loop

      .write "</table>"
    End With
  End Sub

_____________________________________________________________________________________________________________________________________________________________________
 columnCount = objResultsSet.Fields.Count

_____________________________________________________________________________________________________________________________________________________________________
 columnName = objResultsSet.Fields(0)

_____________________________________________________________________________________________________________________________________________________________________
 columnName = objResultsSet.Fields(0).Name

_____________________________________________________________________________________________________________________________________________________________________
 columnValue = objResultsSet.Fields(0)
 columnValue = objResultsSet.Fields(0).Value

_____________________________________________________________________________________________________________________________________________________________________
  <?
    function showTable($query)
    {
     global $link, $result;

  //Submit SQL Query to the MS-SQL Server

     executeQuery($query);

  //determine the number of fields within in the results set

     $fields = mssql_num_fields($result);

  //display the query results set in an HTML table

     echo "<center><table border='1' cellpadding='5'>";

  //display column names as table headings

     echo "<tr>";
       for ($i=0; $i < $fields; $i++)
         {
          echo "<th>" .
            mssql_field_name($result, $i) . "</th>";
          $fieldType[$i] = mssql_field_type($result, $i);
         }
     echo "</tr>";

  //display query results (that is, the column) values
  //within the table's rows below the headings (column names)
  //that run across the top of the HTML table

     while ($array = mssql_fetch_array($result))
      {
       echo "<tr>";
       for ($i=0; $i < $fields; $i++)
         {
          if (($fieldType[$i] <> "char") and
              ($fieldType[$i] <> "blob"))
            echo '<td align="right">';
          else
            echo '<td align="left">';

          if ($array[$i] <> null)
            echo "$array[$i]</td>";
          else
            echo "&amp;nbsp;</td>";
         }
       echo "</tr>";<a name="1975"></a><a name="IDX-1064"></a>
      }

     echo "</table></center>";
     return;
    }
  ?>

_____________________________________________________________________________________________________________________________________________________________________
  <?PHP
    function connectToDB($db_host, $db_user, $db_pass,
                         $db_name)
    {
     global $link;

     $success = true;

  //If not already connected, connect to the MS-SQL Server
     if (!$link = mssql_connect($db_host, $db_user,
                                $db_pass))
      {
       $success = false;
       echo "<font color='red'><br><br><hr>".
            "<center><b>** Error ** Unable to connect ".
            "to DMBS: $db_host!</center>".
            "<hr><br>\n</font>";
      }
     else
      {<a name="1973"></a><a name="IDX-1062"></a>
 //Select the database with the data you want to query
      if (!mssql_select_db($db_name, $link))
       {
        $success = false;
        echo "<font color='red'><br><br><hr>".
             "<center><b>** Error ** Unable to select ".
             "the database: $db_name!</center>".
             "<hr><br>\n</font>" ;
       }
     }
    return $success;
   }
 ?>

_____________________________________________________________________________________________________________________________________________________________________
  <?PHP
   function startHTML($title, $heading = "")
  {
   echo ' <html><head>';
   echo "    <title>$title</title>";
   echo '</head>
         <body bgcolor="LightYellow">
         <h1><center>SQL Tips &amp; Techniques</center></h1>
         <hr>';
   if <$heading <> **)
     echo "<h2><center>$heading</center></h2>";
   return;
  }
 ?>

_____________________________________________________________________________________________________________________________________________________________________
 <?
   function executeQuery($query)
   {
    global $link;
    global $result;

 //Submit SQL Query to the MySQL DBMS
    if (!$result = mssql_query($query, $link))
     {
      echo "<font color='red'><br><br><hr>".
           "<center><b>** Error ** The DBMS reported ".
           "an error in executing query!</center>".
           "<hr><br>\n</font>";
     }
    return;
   }
 ?>

_____________________________________________________________________________________________________________________________________________________________________
 <?PHP
  function endHTML()
  {
   echo '<hr>
         Created by <a href="mailto:kki@NVBizNet.com">
         Konrad King</a>.<br>
         &amp;copy; 2002 - all rights reserved!';
   echo "</body></html>";
   return;
  }
 ?>

_____________________________________________________________________________________________________________________________________________________________________
 <?php
  include ('incFiles/StartHtml.php');
  include ('incFiles/EndHTML.php');
  include ('incFiles/MSSQLConnect.php');
  include ('incFiles/MSSQLQuery.php');
  include ('incFiles/ShowTable.php');

 //** database constants **

  $db_host = "NVBizNet2";
  $db_user = "Konrad";
  $db_pass = "King";
  $db_name = "Pubs";

 //** global variables **
  $link = null;  //handle/channel opened to MS-SQL Server
  $result = null;<a name="1971"></a><a name="IDX-1060"></a>
  //** WRITE THE TEXT AND TAGS THAT START A WEB PAGE **

   startHTML ("Display Query Results",
     "Authors Table Data from the Pubs Database");

  //** CALL THE ROUTINE TO CONNECT WITH THE DBMS **
   if (connectToDB($db_host, $db_user $db_pass, $db_name))
     {

  //** FORMULATE THE QUERY THEN PASS IT TO THE ROUTINE **
  //** THAT WILL SEND IT TO THE DBMS AND DISPLAY THE **
  //** QUERY RESULTS WITHIN AN HTML TABLE

      $query = "SELECT * FROM Authors ".
               "ORDERED BY au_fname, au_lname";
      showTable($query);
     }

  //** WRITE THE TEXT AND TAGS THAT END A WEB PAGE **
   endHTML();
  ?>

_____________________________________________________________________________________________________________________________________________________________________
 //** CALL THE ROUTINE TO CONNECT WITH THE DBMS **
  if (connectToDB($db_host, $db_user, $db_pass, $db_name))
    {
 //** FORMULATE THE QUERY THEN PASS IT TO THE ROUTINE **
 //** THAT WILL SEND IT TO THE DBMS AND DISPLAY THE **
 //** QUERY RESULTS WITHIN AN HTML TABLE

     $query = "SELECT * FROM Authors ".
              "ORDERED BY au_fname, au_lname";
     showTable($query);
    }

 //** WRITE THE TEXT AND TAGS THAT END A WEB PAGE **
  endHTML();
 ?>

_____________________________________________________________________________________________________________________________________________________________________
 <%
  Dim connObj, objResultsSet, querystring

 'open the connection to the DBMS

  Set connObj = server.createobject ("adodb.connection")
  open_OLEDB_connection   (connObj)<a name="1981"></a><a name="IDX-1068"></a>
  queryString = "SELECT " &amp; Request.Form("selectClause") &amp; _
                "FROM " &amp; Request.Form("fromClause")
  If Trim(Request.Form("whereClause")) <> "" Then
    queryString = _
      queryString &amp; " WHERE " &amp; Request.Form("whereClause")
  End If

  If Trim(Request.Form("orderBy")) <> "" Then
    queryString = _
      queryString &amp; " ORDER BY " &amp; Request.Form("orderBy")
  End If

 'submit the SELECT statement (the query) to the DBMS

  Set objResultsSet = connObj.Execute (queryString)

 'call the routine that displays the query results set
 'within an HTML table on the Web page
  display_In_Table (objResultsSet)
 %>

_____________________________________________________________________________________________________________________________________________________________________
 <?PHP
  include ('incFiles/MSSQLConnect.php');
  include ('incFiles/MSSQLQuery.php');
  include ('incFiles/StartHtml.php');
  include ('incFiles/EndHTML.php');
  include ('incFiles/ShowTable.php');

 //** database connection constants **

  $db_host = "NVBizNet2";
  $db_user = "konrad";
  $db_pass = "king";
  $db_name = "pubs";

 //** global variabls **

  $link = null; //handle/channel opened to the DBMS
  $result = null;

 //****************************************************
 //** Put the form data into an HTML table display   **
 //** as a heading before the table of query results **
 //****************************************************

  $headingQuery =<a name="1980"></a><a name="IDX-1067"></a>
   "<table border='0'>" .
     "<tr><td><b>SELECT " . $selectClause . "</td></tr>"
     "<tr><td><b>FROM " . $fromClause . "</td></tr>";
  IF (trim($whereClause) <> "")
    $headingQuery .=
      "<tr><td><b>WHERE " . $whereClause . "</td></tr>" ;
  If (trim($orderBy) <> "")
    $headingQuery .=
      "<tr><td><b>ORDER BY " . $orderBy . "</td></tr>";

  $headingQuery = str_replace("\\", $headingQuery);

 //********************************
 //** Display the Web Page Title **
 //********************************

  startHTML ("Display Query Results", $headingQuery);

 //******************************************************
 //** Connect to the DBMS, and call showTable, which   **
 //** submits the query and displays the query results **
 //******************************************************

  if (connectToDB($db_host, $db_user, $db_pass, $db_name))
    {
     $query = "SELECT " . $selectClause . " " .
              "FROM " . $fromClause;
     IF (trim($whereClause) <> "")
       $query .= " WHERE " . $whereClause;
     If (trim($orderBy) <> "")
       $query .= " ORDER BY " . $orderBy;

     $query = str_replace("\\", "", $query);
     showTable($query);
    }
  endHTML();
 ?>

_____________________________________________________________________________________________________________________________________________________________________
 <form action="http://www.NVBizNet2.com/SQLTips/Query.php"
       method="POST">
   SELECT: <input type="text" name="selectClause"
            size="40"><br>
   FROM: <input type="text" name="fromClause" size="40"><br>
   WHERE: <input type="text" name="whereClause"
           size="40"><br>
   ORDER BY: <input type="text" name="orderBy"
              size="40"><br><br>
   <input type="submit" value="Submit Query">
 </form>

_____________________________________________________________________________________________________________________________________________________________________
 <%
  Dim connObj, objResultsSet, statementString

 'create a connection object and then call a subroutine
 'to open a connection to the DBMS

  Set connObj = server.createobject ("adodb.connection")
  open_OLEDB_connection (connObj)

 'Formulate the INSERT statement based on the visitor's
 'inputs within the HTML form

  statementString = _
    "INSERT INTO customers " &amp; _
    "(first_name, last_name, street_addr, city, state, " &amp; _
    " zip_code, phone_number, salesrep_ID) VALUES (" &amp; _
    "'" &amp; Request.Form("fName") &amp; "'" &amp; _
    ",'" &amp; Request.Form("lName") &amp; "'" &amp; _
    ",'" &amp; Request.Form("stAddress") &amp; "'" &amp; _.
    ",'" &amp; Request.Form("city") &amp; "'" &amp; _<a name="1988"></a><a name="IDX-1072"></a>
    ",'" &amp; Request.Form("state") &amp; "'" &amp; _
    ",'" &amp; Request.Form("zipCode") &amp;"'"&amp;_
    ",'" &amp; Request.Form("phoneNumber") &amp; "'" &amp; _
    "," &amp; Request.Form("salesrepID") &amp; ")"

 'submit the INSERT statement to the DBMS for execution

  connObj.Execute statementString,,adExecuteNoRecords
 %>

_____________________________________________________________________________________________________________________________________________________________________
 <connection object>.EXECUTE <SQL statement>,ra,options where:

_____________________________________________________________________________________________________________________________________________________________________
 connObj.Execute statementString,,adExecuteNoRecords

_____________________________________________________________________________________________________________________________________________________________________
<form
   action="http: //www.NVBizNet2.com/SQLTips/AddCust.asp"
   method="POST"><a name="1987"></a><a name="IDX-1071"></a>

_____________________________________________________________________________________________________________________________________________________________________
    <%
     Dim connObj, statementstring, i

    'open the connection to the DBMS

     Set connObj = server.createobject ("adodb.connection")
     open_OLEDB_connection (connObj)

    'setup each DELETE statement to submit to the DBMS

     For i = 1 To Request.Form.Count
       statementString = "DELETE FROM CUSTOMERS593 " &amp; _
                         " WHERE cust_ID=" &amp; Request.Form(i)

    'submit the DELETE statement to the DBMS

       connObj.Execute statementString,,adExecuteNoRecords
     Next

    'return to the original CUSTOMERS search page

     Response.Redirect "DeleteCust.HTML"
    %>

_____________________________________________________________________________________________________________________________________________________________________
  Sub display_In_Table (objResultsSet)
    With Response
      .Write "<form action=" &amp; _
     "'http://www.NVBi2Net2.com/SQLTips/DelCustRows.asp'" &amp; _
               "methods'POST'>"
      .Write "<table border='1' cellpadding='5'>"
      .Write "<tr>"
      .Write "<td>DEL</td>"<a name="1995"></a><a name="IDX-1077"></a>
     For column = 0 To objResultsSet.Fields.Count - 1
       .Write "<th>" &amp; objResultsSet.Fields(column).Name _
       &amp; "</th>"
     Next
     .Write "<tr>"

     DIM row_number
     row_number = 0
     Do While Not objResultsSet.EOF
       .Write "<tr>"
       row_number = row_number + 1

 'place a check box within the first column of each row

       .Write "<td><input type='checkbox' name='row" &amp; _
              row_number &amp; "' Value='" &amp; _
              objResultsSet .Fields ("cust_ID") &amp; "'></td>"

 'Display column values from the SQL table

       For column = 0 To objResultsSet.Fields.Count - 1
         If objResultsSet.Fields(column) <> "" Then
           .Write "<td>" &amp; objResultsSet.Fields(column) _
           &amp; "</td>"
         Else
           .Write "<td>&amp;nbsp;</td>"
         End If
       Next
       .Write "<tr>"

       objResultsSet.MoveNext
     Loop

     .write "</table><br>"
     .write "<input type='submit' value='Delete Rows'> " &amp; _
            "<input type='reset' value='Reset'>"
     .Write "</form>"
   End With
 End Sub

_____________________________________________________________________________________________________________________________________________________________________
 <%
  Dim connObj, objResultsSet, statementString

 'create a connection object and then call a subroutine
 'to open a connection to the DBMS

  Set connObj = server.createobject ("adodb.connection")
  open_OLEDB_connection (connObj)

 'Formulate the DELETE statement based on the visitor's
 'inputs within the HTML form

  statementString = _
    "DELETE FROM " &amp; Request.Form("tableName") &amp; _
    " WHERE " &amp; Request.Form("whereClause")

 'submit the DELETE statement to the DBMS for execution

  connObj.Execute statementString,,adExecuteNoRecords
 %>

_____________________________________________________________________________________________________________________________________________________________________
 <%
  Dim connObj, objResultsSet, statementString

 'create a connection object and then call a subroutine
 'to open a connection to the DBMS

  Set connObj = server.createobject ("adodb.connection")
  open_OLEDB_connection (connObj)

 'Formulate the UPDATE statement based on the visitor's
 'inputs within the HTML form

  statementString = _
    "UPDATE " &amp; Request.Form("tableName") &amp; _
    " SET " &amp; Request.Form("setClause") &amp; _
    " WHERE " &amp; Request.Form("whereClause")

 'submit the UPDATE statement to the DBMS for execution

  connObj.Execute statementString,,adExecuteNoRecords
 %>

_____________________________________________________________________________________________________________________________________________________________________
 <form action="http://www.NVBizNet2.com/SQLTips/Delete.asp"
       method="POST">
   DELETE: <input type="text" name="tableName"
            size="40"><br>
   WHERE: <input type="text" name="whereClause"
           size="40"><br>
  <input type="submit" value="Delete Record">
 </form><a name="1992"></a><a name="IDX-1075"></a>

_____________________________________________________________________________________________________________________________________________________________________
 <form action="http://www.NVBizNet2.com/SQLTips/Update.asp"
       method="POST">
   UPDATE: <input type="text" name="tableName"
            size="40"><br>
   SET: <input type="text" name="setClause" size="40"><br>
   WHERE: <input type="text" name="whereClause"
           size="40"><br>
  <input type="submit" value="Update Record">
 </form>

_____________________________________________________________________________________________________________________________________________________________________
 <form
   action="http://www.NVBizNet2.com/SQLTips/DelCustSel.asp
   method="POST">

   SELECT: cust_ID, <input type="text" name="selectClause"
                     size="40"><br>
   FROM: <input type="text" name="fromClause" size="40"
          value=customers593><br>
   WHERE: <input type="text" name="whereClause"
           size="40"><br>
   ORDER BY: <input type="text" name="orderBy"
              size="40" ><br><br >
   <input type="submit" value="Submit Query">
 </form><a name="1993"></a><a name="IDX-1076"></a>

_____________________________________________________________________________________________________________________________________________________________________
  <%
   Dim connObj, objResultsSet, statementString

  'Formulate the statement that calls the stored procedure

   statementString = "sales_by_year " &amp; _
     " @beginning_date='" &amp; Request.form("start_date") &amp; _
     "', @ending_date='"  &amp; Request.form("end_date")   &amp; "'"

  'open the connection to the DBMS

   Set connObj = server.createobject ("adodb.connection")
   open_OLEDB_connection (connObj)

  'call the stored procedure that executes the query

   Set objResultsSet = connObj.Execute (statementString)

  'display the query results returned by the stored procedure
  'within an HTML table

   display_In_Table (objResultsSet)
  %>

_____________________________________________________________________________________________________________________________________________________________________
 <%
  Dim connObj, statementString

 'Formulate the statement that calls the stored procedure

  statementString = "usp_cancel_order " &amp; _
    "@order_number='" &amp; Request.Form("order_number") &amp; "'"

 'open the connection to the DBMS and execute the stored
 'procedure call

  Set connObj = server.createobject ("adodb.connection")
  open_OLEDB_connection (connObj)

  connObj.Execute statementString&bdquo; adExecuteNoRecords
 %>

_____________________________________________________________________________________________________________________________________________________________________
 <%
  Sub DisplayInForm(objRecordset)
   With Response
     .Write _
      "<form action=" &amp; _
      "'http://www.NVBizNet2.com/SQLTips/UpdateCust.asp'" &amp; _
      "method='POST'>"<a name="2005"></a><a name="IDX-1084"></a>
     .Write "<table border='1' cellpadding='5'>"
     .Write "<tr>"

 'use Recordset field names as HTML table column headings

     For column = 0 To objRecordset.Fields.Count - 1
       .Write "<th>" &amp; objRecordset.Fields(column).Name _
       &amp; "</th>"
     Next
     .Write "<tr>"

 'display the value in the Recordset within the HTML table

     Do While Not objRecordset.EOF
       .Write "<tr>"

 'Put an "EDIT" hyperlink into the first column of each row

       For column = 0 To objRecordset.Fields.Count - 1
         .Write "<td>" &amp; _
           "<input type='text' " &amp; _
           "name='" &amp;
           objRecordset.Fields(column).Name &amp; "'" &amp; _
           "size='" &amp;
           objRecordset.Fields(column).ActualSize &amp; "'" &amp; _
           "value='" &amp; objRecordset.Fields(column) &amp; _
           "'" &amp; "</td>"
       Next
       .Write "<tr>"

       objRecordset.MoveNext
     Loop

     .write "</table>"
     .Write "<input name='primaryKey'
                type='hidden' value='" &amp; _
                Request.Querystring("cust_ID") &amp; "'>"
     .Write "<br><input type='submit' value='Save Changes'>"
     .Write " <input type='reset' value='Reset'>"
     .Write "</form>"
    End With
  End Sub
 %>

_____________________________________________________________________________________________________________________________________________________________________
 <%
  Sub DisplayInTable(objRecordset)
    With Response
     .Write "<table border='1' cellpadding='5'>"
     .Write "<tr>"
 'use Recordset field names as HTML table column headings

     .Write "<th>EDIT</th>"
     For column = 0 To objRecordset.Fields.Count - 1
       .Write "<th>" &amp; objRecordset.Fields(column).Name _
       &amp; "</th>"
     Next
     .Write "<tr>"

 'display the value in the Recordset within the HTML table

     Do While Not objRecordset.EOF
       .Write "<tr>"

 'Put an "EDIT" hyperlink in the First column of each row

       .Write "<td><a href= 'EditCust.asp?cust_ID=" &amp; _
          objRecordset.Fields("cust_ID") &amp; "'>EDTT</a></td>"

       For column = 0 To objRecordset.Fields.Count - 1<a name="2004"></a><a name="IDX-1083"></a>
        If objRecordset.Fields(column) <> "" Then
          .Write "<td>" &amp; objRecordset.Fields(column) _
          &amp; "</td>"
        Else
          .Write "<td>&amp;nbsp;</td>"
        End If
      Next
      .Write "<tr>"

      objRecordset.MoveNext
    Loop

    .write "</table>"
  End With
 End Sub
%>

_____________________________________________________________________________________________________________________________________________________________________
 <%
  Sub SubmitQuery(objConn, byref objRecordset)
    DIM queryString

    If (Trim(Request.Form("selectClause")) = "*") Then
      queryString = "SELECT * "
    else
      queryString = "SELECT cust_ID "

      If (Trim(Request.form("selectClause")) <> "") Then
        queryString = queryString &amp; ", " &amp;
                        Trim(Request.form("selectClause"))
      End If
    End If

    queryString = _
      queryString &amp; " FROM  " &amp; Request.Form("fromClause")

    If Trim(Request.Form("whereClause")) <> "" Then
      queryString = queryString &amp; " WHERE " &amp; _<a name="2002"></a><a name="IDX-1082"></a>
                      Request.Form("whereClause")

    End If

    If Trim(Request.Form("orderBy")) <> "" Then
      queryString =
        queryString &amp; " ORDER BY " &amp; Request.Form("orderBy")
    End If

 'submit the query, the SELECT statement to the DBMS

    Set objRecordset = objConn.Execute (queryString)
  End Sub
 %>

_____________________________________________________________________________________________________________________________________________________________________
 <%
  Sub SubmitUpdate(objConn)
    DIM queryString, i, setCount

    setCount = 0
    queryString = "UPDATE customers593 SET "

    For i = 1 To Request.Form.count - 1
      If Request.Form.Key(i) <> "cust_ID" Then
        setCount = setCount + 1

        If setCount > 1 Then
          queryString = queryString &amp; ","
        End If

        queryString = _
          queryString &amp; Request.Form.key(i) &amp; "='" &amp; _
            Request.Form(i) &amp; "'"
      End If
    Next

    queryString = queryString &amp; "WHERE cust_ID =" &amp;
                    Request.Form("cust_ID")

 'submit the UPDATE statement to the DBMS

    Set objRecordset = objConn.Execute (queryString
  End Sub
 %>

_____________________________________________________________________________________________________________________________________________________________________
 <form
  action="http: //www.NVBizNet2.com/SQLTips/CustList.asp"
  method="POST">

   SELECT: cust_ID, <input type="text" name="selectClause"
                     size="40"><br>
   FROM: <input type="text" name="fromClause" size="40"
          value=customers593><br>
   WHERE: <input type="text" name="whereClause"
           size="40"><br>
   ORDER BY: <input type="text" name="orderBy"
              size="40"><br><br>

   <input type="submit" value="Submit Query">
 </form>

_____________________________________________________________________________________________________________________________________________________________________
 <%
   objConn.BeginTrans
   objConn.Execute "<SQL statement - MOD 1...>"
   objConn.Execute "<SQL statement - MOD 2...>"

   objConn.BeginTrans
   objConn.Execute "<SQL statement - MOD 3...>"

   objConn.BeginTrans
   objConn.Execute "<SQL statement - MOD 4...>"

   objConn.RollbackTrans      'undoes MOD 4<a name="2010"></a><a name="IDX-1088"></a>
   objConn.CommitTrans        'makes permanent MOD 3
   objConn.RollbackTrans     'undoes MOD 1 &amp; MOD 2
 %>

_____________________________________________________________________________________________________________________________________________________________________
 <%
   objConn.BeginTrans
   objConn.Execute "<SQL statement - MOD 1...>"

   objConn.CommitTrans         'makes permanent MOD 1

   objConn.BeginTrans
   objConn,Execute "<SQL statement - MOD 2...>"
   objConn.Execute "<SQL statement - MOD 3...>"

   objConn.RollbackTrans      'undoes MOD 2 &amp; MOD 3
 %>

_____________________________________________________________________________________________________________________________________________________________________
 <%
   objConn.Execute "<SQL statement - MOD 1...>"
   objConn.Execute "<SQL statement - MOD 2...>"
   objConn.Execute "<SQL statement - MOD 3...>"

   objConn.RollbackTrans      'undoes nothing
 %>

_____________________________________________________________________________________________________________________________________________________________________
 <%
   objConn.Execute "<SQL statement - MOD 1...>"

   objConn.BeginTrans
   objConn.Execute "<SQL statement - MOD 2...>"
   objConn.Execute "<SQL statement - MOD 3...>"

   objConn.RollbackTrans      'undoes MOD 2 &amp; MOD 3
 %>

_____________________________________________________________________________________________________________________________________________________________________
 http://<Web Site Address>/<virtual  connection>?sql=
 <sql statement>+FOR+XML+AUTO&amp;root=root

_____________________________________________________________________________________________________________________________________________________________________
 http://www,nvbiznet2.com/Northwind?sql=
 SELECT+*+FROM+shippers+FOR+XML+AUTO&amp;root=root

_____________________________________________________________________________________________________________________________________________________________________
 SELECT * FROM shippers

_____________________________________________________________________________________________________________________________________________________________________
 CREATE  PROCEDURE TenMostExpensiveProducts AS
 SET ROWCOUNT 10
 SELECT ProductName, UnitPrice
 FROM products
 ORDER BY UnitPrice DESC
 FOR XML AUTO

_____________________________________________________________________________________________________________________________________________________________________
 http: //www.NVBizNet2.com/Northwind/?sql=
 EXECUTE+TenMostExpensiveProducts&amp;root=root

_____________________________________________________________________________________________________________________________________________________________________
 http://<IIS Web Site Address>/<name of virtual connection>
 ?sql=<statement string>+FOR+XML+AUTO&amp;root=root

_____________________________________________________________________________________________________________________________________________________________________
 http://<IIS Web Site Address>/<name of virtual connection>
 ?sql={EXEC|EXECUTE}<stored procedure name>
      [+@<parameter>='<value>'
       [...,+@<last parameter>='<last value>'])&amp;root=root

_____________________________________________________________________________________________________________________________________________________________________
 http://www.nvbiznet2.com/Northwind/?sql=EXECUTE+SalesByYear
 +@Beginning_Date='06/01/1996',+@Ending_Date='05/31/1997'
 &amp;root=root

_____________________________________________________________________________________________________________________________________________________________________
CREATE PROCEDURE SalesByYear
   @Beginning_Date DateTime, @Ending_Date DateTime AS

SELECT Orders.ShippedDate, Orders.OrderID,
       "Order Subtotals".Subtotal,
       DATENAME(yy,ShippedDate) AS Year
FROM Orders INNER JOIN "Order Subtotals"
  ON Orders.OrderID = "Order Subtotals".OrderID
WHERE Orders.ShippedDate
      BETWEEN @Beginning_Date AND @Ending_Date
ORDER BY Year
FOR XML AUTO

_____________________________________________________________________________________________________________________________________________________________________
http://www.NVBizNet2.com/Northwind/?sql=SELECT+CompanyName,
+ContactName,+City,+Country+FROM+suppliers+WHERE+Country+<>
+'USA'+ORDER+BY+City,+Country+FOR+XML+AUTO&amp;root=root

_____________________________________________________________________________________________________________________________________________________________________
SELECT CompanyName, ContactName, City, Country
FROM suppliers
WHERE Country <> 'USA'
ORDER BY City, Country

_____________________________________________________________________________________________________________________________________________________________________
  <TR>
   <TD>1</TD><TD>Nancy</TD>
   <TD>Davolio</TD><TD>Sales Representative</TD>
   <TD><B>
     <IMG src="dbobject/employees[@EmployeeID='1']/@Photo" />
       </TD>
  </TR>

_____________________________________________________________________________________________________________________________________________________________________
  <xsl:template match = 'employees'>
    <TR>
      <TD><xsl:value-of select = '@employeeID' /></TD>
      <TD><xsl:value-of select = '@FirstName' /></TD>
      <TD><xsl:value-of select = '@LastName' /></TD>
      <TD><xsl:value-of select = '@Title' /></TD>
      <TD><B> <IMG><xsl:attribute name='src'>
                  <xsl:value-of select = '@Photo'/>
                  </xsl:attribute>
               </IMG>
      </TD>
    </TR>

_____________________________________________________________________________________________________________________________________________________________________
  <xsl:template match = 'suppliers'>
     <TR>
       <TD><xsl:value-o&pound; select = '@Company-Name' /></TD>
       <TD><xsl:value-of select = '@ContactNsme' /></TD>
       <TD><xsl:value-of select = "@Phone' /></TD>
     </TR>

_____________________________________________________________________________________________________________________________________________________________________
 <?xml version ='1.0' encoding='UTF-8'?>
 <root xmlns:sql='urn:schemes-Microsoft-com:xml-sql'
   sql:xsl='../EmpNamePhoto.xsl'>
   <sql:query >
      SELECT employeeID FirstName, LastName, Title, Photo
      FROM employees FOR XML AUTO
   </sql:query>
 </root><a name="2039"></a><a name="IDX-1104"></a>

_____________________________________________________________________________________________________________________________________________________________________
 <employees
   employeeID="1" FirstName="Nancy"
   LastName="Davolio" Title="Sales Representative"
   Photo="dbobject/employees[@EmployeeID='1']/@Photo" /><a name="2037"></a><a name="IDX-1102"></a>

_____________________________________________________________________________________________________________________________________________________________________
 <TABLE border='1' style='width:230;'>
   <TR><TH colspan='5'>Supplier Information
       </TH></TR>
   <TR><TH  width=' 30' >Company Name</TH>
       <TH  width='100'>Contact Name</TH>
       <TH  width='100'>Phone Number</TH>
   <xsl:apply-templates select = 'root' />
 </TABLE>

_____________________________________________________________________________________________________________________________________________________________________
 http://www.NVBizNet2.com/Northwind/?sql=SELECT+employeeID,+
 FirstName,+LastName,+Title,+Photo+FROM+employees+
 FOR+XML+AUTO&amp;root=root

_____________________________________________________________________________________________________________________________________________________________________
 http://www.NVBizNet2.com/Northwind/7sqlsSELECTH-employeeID,+
 FirstName, +LastName, +Title, +Photo+FROM+employees+
 FOR+XML+AUTO&amp;xsl=EmpNamePhoto.xsl&amp;root=root

_____________________________________________________________________________________________________________________________________________________________________
 http://www.NVBizNet2.com/Northwind/template/EmpQuery.xml
 ?contenttype=text/html

_____________________________________________________________________________________________________________________________________________________________________
<?xml version='1.0' encoding='UTF-8'?>
 <xsl:stylesheet xmlns:xsl='http://www.w3.org/TR/WD-xsl' >
    <xsl:template match = '*'>
        <xsl:apply-templates />
    </xsl:template>
    <xsl:template match = 'employees'>
       <TR>
         <TD><xsl:value-of select = '@employeeID' /></TD>
         <TD><xsl:value-of select = '@FirstName' /></TD>
         <TD><xsl:value-of select = '@LastName' /></TD>
         <TD><xsl:value-of select = '@Title' /></TD>
         <TD><B> <IMG><xsl:attribute name='src'>
                    <xsl:value-of select = '@Photo'/>
                    </xsl:attribute>
                 </IMG>
         </TD>
       </TR>
</xsl:template><a name="2035"></a><a name="IDX-1100"></a>
    <xsl:template match = '/'>
      <HTML>
        <HEAD>
          <STYLE>th    {background-color : lightblue }
                 table {background-color : lightyellow}
          </STYLE>
          <BASE href='http: //www.NVBizNet2.com/Northwind/'>
          </BASE>
        </HEAD>
        <BODY>
         <TABLE border='1' style='width:680;'>
           <TR><TH colspan='5'>Employee Information
               </TH></TR>
           <TR><TH width='30'>ID</TH>
               <TH width='100'>First Name</TH>
               <TH width='100'>Last Name</TH>
               <TH width='200'>Job Title</TH>
               <TH width= '250 ' >Photo</TH></TR>
           <xsl:apply-templates select = 'root' />
         </TABLE>
        </BODY>
      </HTML>
    </xsl:template>
</xsl:stylesheet>

_____________________________________________________________________________________________________________________________________________________________________
http://www.NVBizNet2.com/Northwind/?sql=SELECT+employeeID,+
FirstName,+LastName,+Title,+Photo+-FROM+employees+
FOR+XML+AUTO&amp;root=root

_____________________________________________________________________________________________________________________________________________________________________
SELECT CompanyName, ContactName, Phone
FROM suppliers

_____________________________________________________________________________________________________________________________________________________________________
 <%@ Language=VBScript %>
 <% option explicit %>
 <!- #include file="adovbs.inc" ->
 <%
 '********************************
 '*** OPEN DSN-Less Connection ***
 '********************************
  Sub open_OLEDB_connection (byVal ServerName, DbName,
                                   Username, Password,
                             byRef objconn)
  Dim connectString

    connectString = "PROVIDER=SQLOLEDB;DATA SOURCE=" &amp; _
      ServerName &amp; ";UID=" &amp; UserName &amp; ";PWD=" &amp; _<a name="2042"></a><a name="IDX-1106"></a>
      Password &amp; ";DATABASE=" &amp; DbName

    With objConn
      .ConnectionString = connectString
      .open
    End With
  End Sub

 '*****************************
 '*** Variable Declarations ***
 '*****************************
  Dim objDiskAccess
  Dim objConn
  Dim objRecordset

  Dim ADO_field_header
  Dim block_size

 'connection properties &amp; query string

  Dim Username
  Dim Password
  Dim ServerName
  Dim DBName

  Dim query_string

 'image file processing variables

  Dim block_count
  Dim image_chunk
  Dim image_file_extension
  Dim image_file_size
  Dim offset
  Dim remainder
  Dim temp_image_filename
  Dim temp_image_pathname
  Dim temp_image_physical_folder
  Dim temp_image_virtual_folder

  Dim html_image_tag

 '***********************
 '*** Setup Constants ***
 '***********************
  ADO_field_header = 78
  block_size = 256

 'Determine where you want the image stored on disk<a name="2043"></a><a name="IDX-1107"></a>
 '***Change these to match where you want the image stored.
  temp_image_filename = "Image"
  temp_image_physical_folder = _
    "D:\Inetpub\wwwroot\NWind\Temp\"
  temp_image_virtual_folder = "/NWind/Temp/"
  image_file_extension = ".bmp"

 'ADO connection string properties
 '*** Change these to match your DB access needs.
  UserName = "username"
  Password = "password"
  ServerName = "NVBizNet2"
  DBName = "Northwind"

 '***Change the query string to retrieve the image you want
 '***To retrieve from the DBMS
  query_string = _
    "select Photo from Employees where EmployeeID='1'"

 '********************
 '*** Main Routine ***
 '********************
  on error resume next

 '***You can-download a copy of "FileAccessor.dll" from
 '  the book's companion Web page at
 '  www.PremierPressBooks.com/
  Set objDiskAccess = _
        CreateObject("FileAccessor.FileWriter")

 'Formulate the pathname for the image file the script will
 '  create on disk.
 'Delete the previously written file of the same name (if it
 '  exists).
 'Then open the disk file into which the script will write
 <sup>'</sup>  the contents of the image column from the table.
 '***You need to change this "delete action" to match your
 '  image file retention requirements.

  temp_image_pathname = _
    temp_image_physical_folder &amp; temp_image_filename &amp; _
      image_file_extension

  objDiskAccess.RemoveFile temp_image_pathname
  objDiskAccess.OpenFile temp_image_pathname

 'Open a connection to the DBMS and call the method that
 '  executes the query.<a name="2044"></a><a name="IDX-1108"></a>
  Set objConn = Server.CreateObject("ADODB.Connection")

  Open_OLEDB_Connection _
    ServerName, DbName, Username, Password, objConn
  Set objRecordset = objConn.Execute (query_string)

 'Compute the image file's size (in bytes) by subtracting
 '  the bytes within the ADO field header
 'Then, after discarding the header bytes stored at the
 '  start of the image field's column within the ADO
 '  Recordset object, Compute the number of "block size"
 '  blocks there are within the image field.

  image_file_size = _
    objRecordset.fields("Photo'').ActualSize - _
      ADO_field_header
  image_chunk = _
    objRecordset.fields(''Photo'').GetChunk(ADO_field_header)
  block_count = image_file_size \ block_size

 'To make the last write ouptput a full "block size"
 '  buffer, divide the block size into the image's total
 '  size and then retrieve and write to the disk file any
 '  "left over" bytes so that when looping the read you
 '  always have exactly some number of "block size" (and no
 '  extra) bytes to read and write

  remainder = image_file_size Mod block_size
  If Remainder > 0 Then
    image_chunk = _
      objRecordset.fields("photo").GetChunk(remainder)
    objDiskAccess.WriteToFile image_chunk
  End If

 'Work through the image field "block size" bytes at a time
 '  and append each block of bytes onto the disk file.

  offset = remainder
  Do While Offset < image_file_size
    image_chunk = _
      objRecordset.fields(''photo'').GetChunk(block_size)
    objDiskAccess.WriteToFile image_chunk
    offset = offset + block_size
  Loop

  html_image_tag = _
    "<img src='" &amp; temp_image_virtual_folder &amp; _
      temp_image_filename &amp; image_file_extension &amp;. "'/>"<a name="2045"></a><a name="IDX-1109"></a>
 'Close the disk file, recordset and the DBMS connection.

  objDiskAccess.CloseFile
  objRecordset.Close
  objConn.Close
 %>
 <html>
 <head>
   <title>Display Image Data from Table Column</title>
 </head>
 <body>
   <center>
     <h1>"Photo" Image Column Contents</h1>

     <table border='2'>
       <tr><td><%=html_image_tag%></td></tr>
     </table>
   </center>
 </body>
 </html>

_____________________________________________________________________________________________________________________________________________________________________
 <img src=
 "http://www.NVBizNet2.com/Northwind/dbobject/employees
 [@employeeID='1']/@photo"   >

_____________________________________________________________________________________________________________________________________________________________________
 <TD><IMG><xsl:attribute name='src'>
        <xsl:value-of select = '@Photo'/>
        </xsl:attribute>
     </IMG>
 </TD>

_____________________________________________________________________________________________________________________________________________________________________
 http://www.NVBizNet2.com/Northwind/dbobject/Employees
 [@EmployeeTD='1']/@photo

_____________________________________________________________________________________________________________________________________________________________________
REGSVR32 D:\InetPub\WWWRoot\FileAccessor.DLL
