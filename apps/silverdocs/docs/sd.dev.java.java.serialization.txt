--------------------------------------------------------------------------------------------------------
Serialization
--------------------------------------------------------------------------------------------------------
- class must implement Serializable, or inherit it from superclasses
- persist objects with ObjectOutputStream.writeObject(). 
  This is a filter stream(it is built around another stream, called the node stream)
  Retrieve the objects with ObjectInputStream.readObject().
  The constructor is NOT called upon deserialization. Only when the instance is created
- only the object state is persisted, not the object class. The class MUST be available on the target system (the system where the object is deserialized)
- non-persistent fields are marked with transient
- Customization of the mechanism
    1. Customize the default process:
            private void writeObject(ObjectOutputStream out) throws IOException;
            private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException;

            public class PersistentAnimation implements Serializable, Runnable {
                transient private Thread animator;
                private int animationSpeed;
                public PersistentAnimation(int animationSpeed) {
                    this.animationSpeed = animationSpeed;
                    startAnimation();
                }
                public void run() {
                    while ( true ) {
                        // do animation here
                    }
                }
                private void writeObject( ObjectOutputStream out ) throws IOException {
                    out.defaultWriteObject();
                }
                private void readObject( ObjectInputStream in ) throws IOException, ClassNotFoundException {
                    // our "pseudo-constructor"
                    in.defaultReadObject();
                    // now we are a "live" object again, so let's run rebuild and start
                    startAnimation();
                }
                private void startAnimation() {
                    animator = new Thread( this );
                    animator.start();
                }
            }
       
       Stop the serialization of a class:
            private void writeObject(ObjectOutputStream out) throws IOException {
                throw new NotSerializableException("Not today!");
            }
            private void readObject(ObjectInputStream in) throws IOException{
                throw new NotSerializableException("Not today!");
            }
    2. Implement the Externalizable interface
            public void writeExternal(ObjectOutput out) throws IOException;
            public void readExternal(ObjectInput in) throws IOException, ClassNotFoundException;
- release cache of objects hold by ObjectOutputStream -> OOS.reset()
- use serialVersionUID to control the versioning of classes
    - use [serialver] tool for generating serial numbers
    - the serial version UID of a class that does not implement Serializable is 0L
    - the computed value is a 64-bit hash of the class name, interface class names, methods, and fields.
    
- Note - It is strongly recommended that all serializable classes explicitly declare serialVersionUID values, 
         since the default serialVersionUID computation is highly sensitive to class details that may vary 
         depending on compiler implementations, and can thus result in unexpected serialVersionUID conflicts 
         during deserialization, causing deserialization to fail.     
    
GOTCHAS
    - caching of objects (-> use OOS.reset() )
    - versioning of classes (provide serialVersionUID, take care when making changes in the persisted class)
    - performance is low when serializing
    - since objects are cached, it is possible that the GC will not be able to collect the objects until the 
      stream is closed or resetted
       
- steps in serialization
    1. write magic data
    2. write description of classes, bottom-up
        2. write description of Derived Class 3
        2. write description of Derived Class 2
        2. write description of Derived Class 1
        2. write description of Parent Class
    3. write data associated with classes, top-down
        2. write data of Parent Class
        2. write data of Derived Class 1
        2. write data of Derived Class 2
        2. write data of Derived Class 3
    4. write description of contained objects
    5. write data of contained objects
    
- general guidelines
    - serialization is discouraged for inner classes (non-static member classes, local and anonymous classes)
    - to protect from serialization, implement writeObject(), readObject() and throw NotSerializableException
    
- serializable fields
    - all fields non-static and non-transient
    - define special class field:
      private static final ObjectStreamField[] serialPersistentFields = {new ObjectStreamField("next", List.class)};
    - the special serialPersistentFields field does not work for inner classes (but it works for static member classes)
- documenting
    - use @serial <field-description> for each serial field
    - use @serialField for each member of the serialPersistentFields array 
    - use @serialData <data-description> to document the additional data written by the writeObject or by the Externalizable.writeExternal
- customization
    - Serializable
        - writeObject()
        - writeReplace() (nominate a different object to be written to the stream)
        - readObject()
        - readResolve() (nominate a replacement object for the one just read from the stream)
        - objectOutputStream.defaultWriteObject();
        - objectInputStream.defaultReadObject();
    - Externalizable
        - writeExternal( ObjectOutput )
        - readExternal( ObjectInput )
        - optional writeReplace()
        - optional readReplace()
- serialization of special types
    - enums - serializes the name of the element (as returned by name()). Des. by sending the name to valueOf()
    
            

Security
	# Only objects implementing the java.io.Serializable or java.io.Externalizable  interfaces can be serialized. Mechanisms are provided which 
	  can be used to prevent the serialization of specific fields (typically, those containing sensitive or unneeded data).
	# The serialization package cannot be used to recreate or reinitialize objects. Deserializing a byte stream may result in the creation of new 
	  objects, but will not overwrite or modify the contents of existing objects.
	# Although deserializing an object may trigger downloading of code from a remote source, the downloaded code is restricted by all of the 
	  usual JavaTM code verification and security mechanisms. Classes loaded as a side-effect of deserialization are no more or less secure 
	  than those loaded in any other fashion. 
	
--------------------------------------------------------------------------------------------------------
Serial Version UID
--------------------------------------------------------------------------------------------------------

- Object serialization: Object -> ObjectOutputStream -> bytes
- Object deserialization: bytes -> ObjectInputStream -> Object
- data written: class definition/metadata (class name, field names, types, superclass) + actual object data
- two scenarios:
    - store-and-retrieve
    - send-through-the-wire
- anticipating the need for class evolve, Java provides serialVersionUID, aka suid
- can be assigned to a class:
    - manually by the developer
    - manually by the serialver tool from JDK
    - dinamically by Java: ObjectOutputStream -> ObjectStreamClass -> bytes -> ObjectStreamClass -> ObjectInputStream
- in case of mismatched suids -> InvalidClassException
- items involved in computing suid:
    - class name
    - sorted member names
    - modifiers
    - interfaces
- changes to classes
    - compatible changes
		# Adding fields - When the class being reconstituted has a field that does not occur in the stream, that field in the object will be initialized to the default value for its type. If class-specific initialization is needed, the class may provide a readObject method that can initialize the field to nondefault values.
		# Adding classes - The stream will contain the type hierarchy of each object in the stream. Comparing this hierarchy in the stream with the current class can detect additional classes. Since there is no information in the stream from which to initialize the object, the class's fields will be initialized to the default values.
		# Removing classes - Comparing the class hierarchy in the stream with that of the current class can detect that a class has been deleted. In this case, the fields and objects corresponding to that class are read from the stream. Primitive fields are discarded, but the objects referenced by the deleted class are created, since they may be referred to later in the stream. They will be garbage-collected when the stream is garbage-collected or reset.
		# Adding writeObject/readObject methods - If the version reading the stream has these methods then readObject is expected, as usual, to read the required data written to the stream by the default serialization. It should call defaultReadObject first before reading any optional data. The writeObject method is expected as usual to call defaultWriteObject to write the required data and then may write optional data.
		# Removing writeObject/readObject methods - If the class reading the stream does not have these methods, the required data will be read by default serialization, and the optional data will be discarded.
		# Adding java.io.Serializable - This is equivalent to adding types. There will be no values in the stream for this class so its fields will be initialized to default values. The support for subclassing nonserializable classes requires that the class's supertype have a no-arg constructor and the class itself will be initialized to default values. If the no-arg constructor is not available, the InvalidClassException is thrown.
		# Changing the access to a field - The access modifiers public, package, protected, and private have no effect on the ability of serialization to assign values to the fields.
		# Changing a field from static to nonstatic or transient to nontransient - When relying on default serialization to compute the serializable fields, this change is equivalent to adding a field to the class. The new field will be written to the stream but earlier classes will ignore the value since serialization will not assign values to static or transient fields. 	
	
    - incompatible changes
        * Deleting fields - If a field is deleted in a class, the stream written will not contain its value. When the stream is read by an earlier class, the value of the field will be set to the default value because no value is available in the stream. However, this default value may adversely impair the ability of the earlier version to fulfill its contract.
        * Moving classes up or down the hierarchy - This cannot be allowed since the data in the stream appears in the wrong sequence.
        * Changing a nonstatic field to static or a nontransient field to transient - When relying on default serialization, this change is equivalent to deleting a field from the class. This version of the class will not write that data to the stream, so it will not be available to be read by earlier versions of the class. As when deleting a field, the field of the earlier version will be initialized to the default value, which can cause the class to fail in unexpected ways.
        * Changing the declared type of a primitive field - Each version of the class writes the data with its declared type. Earlier versions of the class attempting to read the field will fail because the type of the data in the stream does not match the type of the field.
        * Changing the writeObject or readObject method so that it no longer writes or reads the default field data or changing it so that it attempts to write it or read it when the previous version did not. The default field data must consistently either appear or not appear in the stream.
        * Changing a class from Serializable to Externalizable or vice versa is an incompatible change since the stream will contain data that is incompatible with the implementation of the available class.
        * Changing a class from a non-enum type to an enum type or vice versa since the stream will contain data that is incompatible with the implementation of the available class.
        * Removing either Serializable or Externalizable is an incompatible change since when written it will no longer supply the fields needed by older versions of the class.
        * Adding the writeReplace or readResolve method to a class is incompatible if the behavior would produce an object that is incompatible with any older version of the class.

- alternatives to implementing Serializable:
    - implement Externalizable, and make you own serialization of objects
    - serialize your objects using XML and an XML parser
    - serialize your objects using your own custom protocol
- before making a class serializable:
    - stability: is this class in its initial state, promising more changes in the future until it settles?
    - visibility: is this class used internally by the implementor (so the implementor has more control over it),
      or is a class that is used by multiple parties, in a public manner?
    - usage pattern: will this class be used in a store-and-retrieve or mixed-version scenario? Perhaps in an
      over-the-wire scenario?

